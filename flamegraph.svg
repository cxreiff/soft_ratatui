<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="1275"><g><title>colors`&lt;&amp;mut colors::App as ratatui::widgets::Widget&gt;::render (2 samples, 0.16%)</title><rect x="0.0000%" y="421" width="0.1569%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="0.0784%" y="405" width="0.0784%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3284%" y="415.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::index_of (1 samples, 0.08%)</title><rect x="0.1569%" y="405" width="0.0784%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.4069%" y="415.50"></text></g><g><title>colors`&lt;cosmic_text::buffer::LayoutRunIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="0.3137%" y="389" width="0.0784%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.5637%" y="399.50"></text></g><g><title>colors`cosmic_text::swash::SwashCache::get_image (1 samples, 0.08%)</title><rect x="0.3922%" y="373" width="0.0784%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="0.6422%" y="383.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (1 samples, 0.08%)</title><rect x="1.9608%" y="325" width="0.0784%" height="15" fill="rgb(232,128,0)" fg:x="25" fg:w="1"/><text x="2.2108%" y="335.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (4 samples, 0.31%)</title><rect x="2.0392%" y="325" width="0.3137%" height="15" fill="rgb(207,160,47)" fg:x="26" fg:w="4"/><text x="2.2892%" y="335.50"></text></g><g><title>colors`tiny_skia::blend_mode::BlendMode::to_stage (2 samples, 0.16%)</title><rect x="2.3529%" y="325" width="0.1569%" height="15" fill="rgb(228,23,34)" fg:x="30" fg:w="2"/><text x="2.6029%" y="335.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (6 samples, 0.47%)</title><rect x="2.5098%" y="325" width="0.4706%" height="15" fill="rgb(218,30,26)" fg:x="32" fg:w="6"/><text x="2.7598%" y="335.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::push (2 samples, 0.16%)</title><rect x="2.9804%" y="325" width="0.1569%" height="15" fill="rgb(220,122,19)" fg:x="38" fg:w="2"/><text x="3.2304%" y="335.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (27 samples, 2.12%)</title><rect x="7.6863%" y="309" width="2.1176%" height="15" fill="rgb(250,228,42)" fg:x="98" fg:w="27"/><text x="7.9363%" y="319.50">c..</text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (189 samples, 14.82%)</title><rect x="9.8039%" y="309" width="14.8235%" height="15" fill="rgb(240,193,28)" fg:x="125" fg:w="189"/><text x="10.0539%" y="319.50">colors`tiny_skia::pipel..</text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (26 samples, 2.04%)</title><rect x="24.6275%" y="309" width="2.0392%" height="15" fill="rgb(216,20,37)" fg:x="314" fg:w="26"/><text x="24.8775%" y="319.50">c..</text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (424 samples, 33.25%)</title><rect x="3.1373%" y="325" width="33.2549%" height="15" fill="rgb(206,188,39)" fg:x="40" fg:w="424"/><text x="3.3873%" y="335.50">colors`tiny_skia::pipeline::blitter::RasterPipelineBli..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (124 samples, 9.73%)</title><rect x="26.6667%" y="309" width="9.7255%" height="15" fill="rgb(217,207,13)" fg:x="340" fg:w="124"/><text x="26.9167%" y="319.50">libsystem_plat..</text></g><g><title>colors`tiny_skia::pipeline::lowp::source_over_rgba_tail (1 samples, 0.08%)</title><rect x="39.0588%" y="293" width="0.0784%" height="15" fill="rgb(231,73,38)" fg:x="498" fg:w="1"/><text x="39.3088%" y="303.50"></text></g><g><title>colors`DYLD-STUB$$memset_pattern16 (4 samples, 0.31%)</title><rect x="39.3725%" y="277" width="0.3137%" height="15" fill="rgb(225,20,46)" fg:x="502" fg:w="4"/><text x="39.6225%" y="287.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::source_over_rgba_tail (52 samples, 4.08%)</title><rect x="39.6863%" y="277" width="4.0784%" height="15" fill="rgb(210,31,41)" fg:x="506" fg:w="52"/><text x="39.9363%" y="287.50">colo..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.24%)</title><rect x="43.7647%" y="277" width="0.2353%" height="15" fill="rgb(221,200,47)" fg:x="558" fg:w="3"/><text x="44.0147%" y="287.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::start (67 samples, 5.25%)</title><rect x="39.1373%" y="293" width="5.2549%" height="15" fill="rgb(226,26,5)" fg:x="499" fg:w="67"/><text x="39.3873%" y="303.50">colors..</text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (5 samples, 0.39%)</title><rect x="44.0000%" y="277" width="0.3922%" height="15" fill="rgb(249,33,26)" fg:x="561" fg:w="5"/><text x="44.2500%" y="287.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (82 samples, 6.43%)</title><rect x="38.3529%" y="309" width="6.4314%" height="15" fill="rgb(235,183,28)" fg:x="489" fg:w="82"/><text x="38.6029%" y="319.50">colors`&lt;..</text></g><g><title>colors`tiny_skia::pipeline::lowp::uniform_color (5 samples, 0.39%)</title><rect x="44.3922%" y="293" width="0.3922%" height="15" fill="rgb(221,5,38)" fg:x="566" fg:w="5"/><text x="44.6422%" y="303.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (110 samples, 8.63%)</title><rect x="36.3922%" y="325" width="8.6275%" height="15" fill="rgb(247,18,42)" fg:x="464" fg:w="110"/><text x="36.6422%" y="335.50">colors`tiny_..</text></g><g><title>colors`tiny_skia::pipeline::lowp::start (3 samples, 0.24%)</title><rect x="44.7843%" y="309" width="0.2353%" height="15" fill="rgb(241,131,45)" fg:x="571" fg:w="3"/><text x="45.0343%" y="319.50"></text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (1 samples, 0.08%)</title><rect x="45.0196%" y="325" width="0.0784%" height="15" fill="rgb(249,31,29)" fg:x="574" fg:w="1"/><text x="45.2696%" y="335.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::from_xywh (3 samples, 0.24%)</title><rect x="45.0980%" y="325" width="0.2353%" height="15" fill="rgb(225,111,53)" fg:x="575" fg:w="3"/><text x="45.3480%" y="335.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::intersect (25 samples, 1.96%)</title><rect x="45.3333%" y="325" width="1.9608%" height="15" fill="rgb(238,160,17)" fg:x="578" fg:w="25"/><text x="45.5833%" y="335.50">c..</text></g><g><title>colors`tiny_skia_path::rect::Rect::round (4 samples, 0.31%)</title><rect x="47.2941%" y="325" width="0.3137%" height="15" fill="rgb(214,148,48)" fg:x="603" fg:w="4"/><text x="47.5441%" y="335.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (763 samples, 59.84%)</title><rect x="0.9412%" y="341" width="59.8431%" height="15" fill="rgb(232,36,49)" fg:x="12" fg:w="763"/><text x="1.1912%" y="351.50">colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect</text></g><g><title>libsystem_platform.dylib`_platform_memmove (168 samples, 13.18%)</title><rect x="47.6078%" y="325" width="13.1765%" height="15" fill="rgb(209,103,24)" fg:x="607" fg:w="168"/><text x="47.8578%" y="335.50">libsystem_platform.d..</text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (2 samples, 0.16%)</title><rect x="60.7843%" y="341" width="0.1569%" height="15" fill="rgb(229,88,8)" fg:x="775" fg:w="2"/><text x="61.0343%" y="351.50"></text></g><g><title>colors`tiny_skia_path::transform::Transform::is_identity (2 samples, 0.16%)</title><rect x="60.9412%" y="341" width="0.1569%" height="15" fill="rgb(213,181,19)" fg:x="777" fg:w="2"/><text x="61.1912%" y="351.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::fill_rect (856 samples, 67.14%)</title><rect x="0.7843%" y="357" width="67.1373%" height="15" fill="rgb(254,191,54)" fg:x="10" fg:w="856"/><text x="1.0343%" y="367.50">colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::fill_rect</text></g><g><title>libsystem_platform.dylib`_platform_memmove (87 samples, 6.82%)</title><rect x="61.0980%" y="341" width="6.8235%" height="15" fill="rgb(241,83,37)" fg:x="779" fg:w="87"/><text x="61.3480%" y="351.50">libsystem..</text></g><g><title>colors`cosmic_text::swash::SwashCache::with_pixels (865 samples, 67.84%)</title><rect x="0.4706%" y="373" width="67.8431%" height="15" fill="rgb(233,36,39)" fg:x="6" fg:w="865"/><text x="0.7206%" y="383.50">colors`cosmic_text::swash::SwashCache::with_pixels</text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (5 samples, 0.39%)</title><rect x="67.9216%" y="357" width="0.3922%" height="15" fill="rgb(226,3,54)" fg:x="866" fg:w="5"/><text x="68.1716%" y="367.50"></text></g><g><title>colors`tiny_skia::painter::Paint::set_color (2 samples, 0.16%)</title><rect x="68.3137%" y="373" width="0.1569%" height="15" fill="rgb(245,192,40)" fg:x="871" fg:w="2"/><text x="68.5637%" y="383.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::draw (874 samples, 68.55%)</title><rect x="0.3922%" y="389" width="68.5490%" height="15" fill="rgb(238,167,29)" fg:x="5" fg:w="874"/><text x="0.6422%" y="399.50">colors`cosmic_text::buffer::Buffer::draw</text></g><g><title>colors`tiny_skia_path::rect::Rect::from_xywh (6 samples, 0.47%)</title><rect x="68.4706%" y="373" width="0.4706%" height="15" fill="rgb(232,182,51)" fg:x="873" fg:w="6"/><text x="68.7206%" y="383.50"></text></g><g><title>colors`&lt;cosmic_text::line_ending::LineIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="68.9412%" y="373" width="0.0784%" height="15" fill="rgb(231,60,39)" fg:x="879" fg:w="1"/><text x="69.1912%" y="383.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::buffer_line::BufferLine&gt; (6 samples, 0.47%)</title><rect x="69.0196%" y="373" width="0.4706%" height="15" fill="rgb(208,69,12)" fg:x="880" fg:w="6"/><text x="69.2696%" y="383.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;cosmic_text::shape::ShapeLine&gt;&gt; (6 samples, 0.47%)</title><rect x="69.0196%" y="357" width="0.4706%" height="15" fill="rgb(235,93,37)" fg:x="880" fg:w="6"/><text x="69.2696%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.47%)</title><rect x="69.0196%" y="341" width="0.4706%" height="15" fill="rgb(213,116,39)" fg:x="880" fg:w="6"/><text x="69.2696%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.16%)</title><rect x="69.3333%" y="325" width="0.1569%" height="15" fill="rgb(222,207,29)" fg:x="884" fg:w="2"/><text x="69.5833%" y="335.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;alloc::vec::Vec&lt;cosmic_text::layout::LayoutLine&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="69.4902%" y="373" width="0.0784%" height="15" fill="rgb(206,96,30)" fg:x="886" fg:w="1"/><text x="69.7402%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="69.4902%" y="357" width="0.0784%" height="15" fill="rgb(218,138,4)" fg:x="886" fg:w="1"/><text x="69.7402%" y="367.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;cosmic_text::shape::ShapeLine&gt;&gt; (1 samples, 0.08%)</title><rect x="69.5686%" y="325" width="0.0784%" height="15" fill="rgb(250,191,14)" fg:x="887" fg:w="1"/><text x="69.8186%" y="335.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.7255%" y="309" width="0.0784%" height="15" fill="rgb(239,60,40)" fg:x="889" fg:w="1"/><text x="69.9755%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="69.7255%" y="293" width="0.0784%" height="15" fill="rgb(206,27,48)" fg:x="889" fg:w="1"/><text x="69.9755%" y="303.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.08%)</title><rect x="69.8039%" y="293" width="0.0784%" height="15" fill="rgb(225,35,8)" fg:x="890" fg:w="1"/><text x="70.0539%" y="303.50"></text></g><g><title>colors`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="84.6275%" y="245" width="0.1569%" height="15" fill="rgb(250,213,24)" fg:x="1079" fg:w="2"/><text x="84.8775%" y="255.50"></text></g><g><title>colors`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="84.6275%" y="229" width="0.1569%" height="15" fill="rgb(247,123,22)" fg:x="1079" fg:w="2"/><text x="84.8775%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="84.7059%" y="213" width="0.0784%" height="15" fill="rgb(231,138,38)" fg:x="1080" fg:w="1"/><text x="84.9559%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="84.7059%" y="197" width="0.0784%" height="15" fill="rgb(231,145,46)" fg:x="1080" fg:w="1"/><text x="84.9559%" y="207.50"></text></g><g><title>colors`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (4 samples, 0.31%)</title><rect x="84.7843%" y="245" width="0.3137%" height="15" fill="rgb(251,118,11)" fg:x="1081" fg:w="4"/><text x="85.0343%" y="255.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (3 samples, 0.24%)</title><rect x="85.0980%" y="245" width="0.2353%" height="15" fill="rgb(217,147,25)" fg:x="1085" fg:w="3"/><text x="85.3480%" y="255.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (198 samples, 15.53%)</title><rect x="69.9608%" y="261" width="15.5294%" height="15" fill="rgb(247,81,37)" fg:x="892" fg:w="198"/><text x="70.2108%" y="271.50">colors`&lt;cosmic_text::fon..</text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_supported_codepoints_in_word::_{{closure}} (2 samples, 0.16%)</title><rect x="85.3333%" y="245" width="0.1569%" height="15" fill="rgb(209,12,38)" fg:x="1088" fg:w="2"/><text x="85.5833%" y="255.50"></text></g><g><title>colors`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="85.4902%" y="245" width="0.3137%" height="15" fill="rgb(227,1,9)" fg:x="1090" fg:w="4"/><text x="85.7402%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.24%)</title><rect x="85.5686%" y="229" width="0.2353%" height="15" fill="rgb(248,47,43)" fg:x="1091" fg:w="3"/><text x="85.8186%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.24%)</title><rect x="85.5686%" y="213" width="0.2353%" height="15" fill="rgb(221,10,30)" fg:x="1091" fg:w="3"/><text x="85.8186%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.08%)</title><rect x="85.7255%" y="197" width="0.0784%" height="15" fill="rgb(210,229,1)" fg:x="1093" fg:w="1"/><text x="85.9755%" y="207.50"></text></g><g><title>colors`cosmic_text::font::fallback::FontFallbackIter::new (5 samples, 0.39%)</title><rect x="85.4902%" y="261" width="0.3922%" height="15" fill="rgb(222,148,37)" fg:x="1090" fg:w="5"/><text x="85.7402%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.08%)</title><rect x="85.8039%" y="245" width="0.0784%" height="15" fill="rgb(234,67,33)" fg:x="1094" fg:w="1"/><text x="86.0539%" y="255.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (6 samples, 0.47%)</title><rect x="85.8824%" y="261" width="0.4706%" height="15" fill="rgb(247,98,35)" fg:x="1095" fg:w="6"/><text x="86.1324%" y="271.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_matches (1 samples, 0.08%)</title><rect x="86.3529%" y="261" width="0.0784%" height="15" fill="rgb(247,138,52)" fg:x="1101" fg:w="1"/><text x="86.6029%" y="271.50"></text></g><g><title>colors`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="86.3529%" y="245" width="0.0784%" height="15" fill="rgb(213,79,30)" fg:x="1101" fg:w="1"/><text x="86.6029%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.24%)</title><rect x="86.5882%" y="229" width="0.2353%" height="15" fill="rgb(246,177,23)" fg:x="1104" fg:w="3"/><text x="86.8382%" y="239.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t&gt; (5 samples, 0.39%)</title><rect x="86.5098%" y="245" width="0.3922%" height="15" fill="rgb(230,62,27)" fg:x="1103" fg:w="5"/><text x="86.7598%" y="255.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.08%)</title><rect x="86.8235%" y="229" width="0.0784%" height="15" fill="rgb(216,154,8)" fg:x="1107" fg:w="1"/><text x="87.0735%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::clear (1 samples, 0.08%)</title><rect x="86.9020%" y="245" width="0.0784%" height="15" fill="rgb(244,35,45)" fg:x="1108" fg:w="1"/><text x="87.1520%" y="255.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.08%)</title><rect x="86.9804%" y="229" width="0.0784%" height="15" fill="rgb(251,115,12)" fg:x="1109" fg:w="1"/><text x="87.2304%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::new (2 samples, 0.16%)</title><rect x="87.0588%" y="229" width="0.1569%" height="15" fill="rgb(240,54,50)" fg:x="1110" fg:w="2"/><text x="87.3088%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::tag::tags_from_script_and_language (2 samples, 0.16%)</title><rect x="87.0588%" y="213" width="0.1569%" height="15" fill="rgb(233,84,52)" fg:x="1110" fg:w="2"/><text x="87.3088%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (1 samples, 0.08%)</title><rect x="87.4510%" y="149" width="0.0784%" height="15" fill="rgb(207,117,47)" fg:x="1115" fg:w="1"/><text x="87.7010%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.08%)</title><rect x="87.5294%" y="149" width="0.0784%" height="15" fill="rgb(249,43,39)" fg:x="1116" fg:w="1"/><text x="87.7794%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="87.5294%" y="133" width="0.0784%" height="15" fill="rgb(209,38,44)" fg:x="1116" fg:w="1"/><text x="87.7794%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.24%)</title><rect x="87.4510%" y="165" width="0.2353%" height="15" fill="rgb(236,212,23)" fg:x="1115" fg:w="3"/><text x="87.7010%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="87.6078%" y="149" width="0.0784%" height="15" fill="rgb(242,79,21)" fg:x="1117" fg:w="1"/><text x="87.8578%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.08%)</title><rect x="87.6863%" y="165" width="0.0784%" height="15" fill="rgb(211,96,35)" fg:x="1118" fg:w="1"/><text x="87.9363%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (6 samples, 0.47%)</title><rect x="87.4510%" y="181" width="0.4706%" height="15" fill="rgb(253,215,40)" fg:x="1115" fg:w="6"/><text x="87.7010%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.16%)</title><rect x="87.7647%" y="165" width="0.1569%" height="15" fill="rgb(211,81,21)" fg:x="1119" fg:w="2"/><text x="88.0147%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::collect_features (10 samples, 0.78%)</title><rect x="87.2157%" y="229" width="0.7843%" height="15" fill="rgb(208,190,38)" fg:x="1112" fg:w="10"/><text x="87.4657%" y="239.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (9 samples, 0.71%)</title><rect x="87.2941%" y="213" width="0.7059%" height="15" fill="rgb(235,213,38)" fg:x="1113" fg:w="9"/><text x="87.5441%" y="223.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (8 samples, 0.63%)</title><rect x="87.3725%" y="197" width="0.6275%" height="15" fill="rgb(237,122,38)" fg:x="1114" fg:w="8"/><text x="87.6225%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.08%)</title><rect x="87.9216%" y="181" width="0.0784%" height="15" fill="rgb(244,218,35)" fg:x="1121" fg:w="1"/><text x="88.1716%" y="191.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::find_language_feature (4 samples, 0.31%)</title><rect x="88.0000%" y="213" width="0.3137%" height="15" fill="rgb(240,68,47)" fg:x="1122" fg:w="4"/><text x="88.2500%" y="223.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::insert_tail (3 samples, 0.24%)</title><rect x="88.3137%" y="213" width="0.2353%" height="15" fill="rgb(210,16,53)" fg:x="1126" fg:w="3"/><text x="88.5637%" y="223.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Feature as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (18 samples, 1.41%)</title><rect x="89.2549%" y="197" width="1.4118%" height="15" fill="rgb(235,124,12)" fg:x="1138" fg:w="18"/><text x="89.5049%" y="207.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::find_language_feature (18 samples, 1.41%)</title><rect x="90.6667%" y="197" width="1.4118%" height="15" fill="rgb(224,169,11)" fg:x="1156" fg:w="18"/><text x="90.9167%" y="207.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::get_required_language_feature (1 samples, 0.08%)</title><rect x="92.0784%" y="197" width="0.0784%" height="15" fill="rgb(250,166,2)" fg:x="1174" fg:w="1"/><text x="92.3284%" y="207.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Script as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (5 samples, 0.39%)</title><rect x="92.1569%" y="197" width="0.3922%" height="15" fill="rgb(242,216,29)" fg:x="1175" fg:w="5"/><text x="92.4069%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.08%)</title><rect x="92.5490%" y="165" width="0.0784%" height="15" fill="rgb(230,116,27)" fg:x="1180" fg:w="1"/><text x="92.7990%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="92.7059%" y="117" width="0.0784%" height="15" fill="rgb(228,99,48)" fg:x="1182" fg:w="1"/><text x="92.9559%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.24%)</title><rect x="92.6275%" y="133" width="0.2353%" height="15" fill="rgb(253,11,6)" fg:x="1181" fg:w="3"/><text x="92.8775%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="92.7843%" y="117" width="0.0784%" height="15" fill="rgb(247,143,39)" fg:x="1183" fg:w="1"/><text x="93.0343%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.08%)</title><rect x="92.7843%" y="101" width="0.0784%" height="15" fill="rgb(236,97,10)" fg:x="1183" fg:w="1"/><text x="93.0343%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.08%)</title><rect x="92.7843%" y="85" width="0.0784%" height="15" fill="rgb(233,208,19)" fg:x="1183" fg:w="1"/><text x="93.0343%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.08%)</title><rect x="92.7843%" y="69" width="0.0784%" height="15" fill="rgb(216,164,2)" fg:x="1183" fg:w="1"/><text x="93.0343%" y="79.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (5 samples, 0.39%)</title><rect x="92.5490%" y="181" width="0.3922%" height="15" fill="rgb(220,129,5)" fg:x="1180" fg:w="5"/><text x="92.7990%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (4 samples, 0.31%)</title><rect x="92.6275%" y="165" width="0.3137%" height="15" fill="rgb(242,17,10)" fg:x="1181" fg:w="4"/><text x="92.8775%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (4 samples, 0.31%)</title><rect x="92.6275%" y="149" width="0.3137%" height="15" fill="rgb(242,107,0)" fg:x="1181" fg:w="4"/><text x="92.8775%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.08%)</title><rect x="92.8627%" y="133" width="0.0784%" height="15" fill="rgb(251,28,31)" fg:x="1184" fg:w="1"/><text x="93.1127%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.47%)</title><rect x="92.5490%" y="197" width="0.4706%" height="15" fill="rgb(233,223,10)" fg:x="1180" fg:w="6"/><text x="92.7990%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.08%)</title><rect x="92.9412%" y="181" width="0.0784%" height="15" fill="rgb(215,21,27)" fg:x="1185" fg:w="1"/><text x="93.1912%" y="191.50"></text></g><g><title>colors`core::slice::sort::stable::driftsort_main (3 samples, 0.24%)</title><rect x="93.0196%" y="197" width="0.2353%" height="15" fill="rgb(232,23,21)" fg:x="1186" fg:w="3"/><text x="93.2696%" y="207.50"></text></g><g><title>colors`core::slice::sort::stable::drift::sort (3 samples, 0.24%)</title><rect x="93.0196%" y="181" width="0.2353%" height="15" fill="rgb(244,5,23)" fg:x="1186" fg:w="3"/><text x="93.2696%" y="191.50"></text></g><g><title>colors`core::slice::sort::stable::quicksort::quicksort (2 samples, 0.16%)</title><rect x="93.0980%" y="165" width="0.1569%" height="15" fill="rgb(226,81,46)" fg:x="1187" fg:w="2"/><text x="93.3480%" y="175.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (2 samples, 0.16%)</title><rect x="93.0980%" y="149" width="0.1569%" height="15" fill="rgb(247,70,30)" fg:x="1187" fg:w="2"/><text x="93.3480%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="93.4902%" y="117" width="0.0784%" height="15" fill="rgb(212,68,19)" fg:x="1192" fg:w="1"/><text x="93.7402%" y="127.50"></text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::compile (66 samples, 5.18%)</title><rect x="88.5490%" y="213" width="5.1765%" height="15" fill="rgb(240,187,13)" fg:x="1129" fg:w="66"/><text x="88.7990%" y="223.50">colors..</text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::add_lookups (6 samples, 0.47%)</title><rect x="93.2549%" y="197" width="0.4706%" height="15" fill="rgb(223,113,26)" fg:x="1189" fg:w="6"/><text x="93.5049%" y="207.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4 samples, 0.31%)</title><rect x="93.4118%" y="181" width="0.3137%" height="15" fill="rgb(206,192,2)" fg:x="1191" fg:w="4"/><text x="93.6618%" y="191.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="93.4118%" y="165" width="0.3137%" height="15" fill="rgb(241,108,4)" fg:x="1191" fg:w="4"/><text x="93.6618%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (4 samples, 0.31%)</title><rect x="93.4118%" y="149" width="0.3137%" height="15" fill="rgb(247,173,49)" fg:x="1191" fg:w="4"/><text x="93.6618%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.24%)</title><rect x="93.4902%" y="133" width="0.2353%" height="15" fill="rgb(224,114,35)" fg:x="1192" fg:w="3"/><text x="93.7402%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.16%)</title><rect x="93.5686%" y="117" width="0.1569%" height="15" fill="rgb(245,159,27)" fg:x="1193" fg:w="2"/><text x="93.8186%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.16%)</title><rect x="93.5686%" y="101" width="0.1569%" height="15" fill="rgb(245,172,44)" fg:x="1193" fg:w="2"/><text x="93.8186%" y="111.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::compile (74 samples, 5.80%)</title><rect x="88.0000%" y="229" width="5.8039%" height="15" fill="rgb(236,23,11)" fg:x="1122" fg:w="74"/><text x="88.2500%" y="239.50">colors`..</text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.08%)</title><rect x="93.7255%" y="213" width="0.0784%" height="15" fill="rgb(205,117,38)" fg:x="1195" fg:w="1"/><text x="93.9755%" y="223.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t::new (88 samples, 6.90%)</title><rect x="86.9804%" y="245" width="6.9020%" height="15" fill="rgb(237,72,25)" fg:x="1109" fg:w="88"/><text x="87.2304%" y="255.50">colors`ru..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.08%)</title><rect x="93.8039%" y="229" width="0.0784%" height="15" fill="rgb(244,70,9)" fg:x="1196" fg:w="1"/><text x="94.0539%" y="239.50"></text></g><g><title>colors`&lt;char as unicode_properties::general_category::UnicodeGeneralCategory&gt;::general_category (1 samples, 0.08%)</title><rect x="94.0392%" y="229" width="0.0784%" height="15" fill="rgb(217,125,39)" fg:x="1199" fg:w="1"/><text x="94.2892%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::guess_segment_properties (1 samples, 0.08%)</title><rect x="94.1176%" y="229" width="0.0784%" height="15" fill="rgb(235,36,10)" fg:x="1200" fg:w="1"/><text x="94.3676%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::shape::shape_with_plan (8 samples, 0.63%)</title><rect x="93.8824%" y="245" width="0.6275%" height="15" fill="rgb(251,123,47)" fg:x="1197" fg:w="8"/><text x="94.1324%" y="255.50"></text></g><g><title>colors`rustybuzz::hb::ot_layout::apply_layout_table (4 samples, 0.31%)</title><rect x="94.1961%" y="229" width="0.3137%" height="15" fill="rgb(221,13,13)" fg:x="1201" fg:w="4"/><text x="94.4461%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.08%)</title><rect x="94.5098%" y="245" width="0.0784%" height="15" fill="rgb(238,131,9)" fg:x="1205" fg:w="1"/><text x="94.7598%" y="255.50"></text></g><g><title>colors`cosmic_text::shape::shape_fallback (105 samples, 8.24%)</title><rect x="86.4314%" y="261" width="8.2353%" height="15" fill="rgb(211,50,8)" fg:x="1102" fg:w="105"/><text x="86.6814%" y="271.50">colors`cosm..</text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.08%)</title><rect x="94.5882%" y="245" width="0.0784%" height="15" fill="rgb(245,182,24)" fg:x="1206" fg:w="1"/><text x="94.8382%" y="255.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (324 samples, 25.41%)</title><rect x="69.8039%" y="309" width="25.4118%" height="15" fill="rgb(242,14,37)" fg:x="890" fg:w="324"/><text x="70.0539%" y="319.50">colors`cosmic_text::shape::ShapeSpan::bui..</text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (323 samples, 25.33%)</title><rect x="69.8824%" y="293" width="25.3333%" height="15" fill="rgb(246,228,12)" fg:x="891" fg:w="323"/><text x="70.1324%" y="303.50">colors`cosmic_text::shape::ShapeWord::bu..</text></g><g><title>colors`cosmic_text::shape::Shaping::run (322 samples, 25.25%)</title><rect x="69.9608%" y="277" width="25.2549%" height="15" fill="rgb(213,55,15)" fg:x="892" fg:w="322"/><text x="70.2108%" y="287.50">colors`cosmic_text::shape::Shaping::run</text></g><g><title>colors`fontdb::Database::face (7 samples, 0.55%)</title><rect x="94.6667%" y="261" width="0.5490%" height="15" fill="rgb(209,9,3)" fg:x="1207" fg:w="7"/><text x="94.9167%" y="271.50"></text></g><g><title>colors`unicode_bidi::BidiInfo::new_with_data_source (2 samples, 0.16%)</title><rect x="95.2157%" y="309" width="0.1569%" height="15" fill="rgb(230,59,30)" fg:x="1214" fg:w="2"/><text x="95.4657%" y="319.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.08%)</title><rect x="95.2941%" y="293" width="0.0784%" height="15" fill="rgb(209,121,21)" fg:x="1215" fg:w="1"/><text x="95.5441%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="95.2941%" y="277" width="0.0784%" height="15" fill="rgb(220,109,13)" fg:x="1215" fg:w="1"/><text x="95.5441%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (329 samples, 25.80%)</title><rect x="69.6471%" y="325" width="25.8039%" height="15" fill="rgb(232,18,1)" fg:x="888" fg:w="329"/><text x="69.8971%" y="335.50">colors`cosmic_text::shape::ShapeLine::bui..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.08%)</title><rect x="95.3725%" y="309" width="0.0784%" height="15" fill="rgb(215,41,42)" fg:x="1216" fg:w="1"/><text x="95.6225%" y="319.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (332 samples, 26.04%)</title><rect x="69.5686%" y="341" width="26.0392%" height="15" fill="rgb(224,123,36)" fg:x="887" fg:w="332"/><text x="69.8186%" y="351.50">colors`cosmic_text::buffer_line::BufferLin..</text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.16%)</title><rect x="95.4510%" y="325" width="0.1569%" height="15" fill="rgb(240,125,3)" fg:x="1217" fg:w="2"/><text x="95.7010%" y="335.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (334 samples, 26.20%)</title><rect x="69.5686%" y="357" width="26.1961%" height="15" fill="rgb(205,98,50)" fg:x="887" fg:w="334"/><text x="69.8186%" y="367.50">colors`cosmic_text::buffer_line::BufferLin..</text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer (2 samples, 0.16%)</title><rect x="95.6078%" y="341" width="0.1569%" height="15" fill="rgb(205,185,37)" fg:x="1219" fg:w="2"/><text x="95.8578%" y="351.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.08%)</title><rect x="95.6863%" y="325" width="0.0784%" height="15" fill="rgb(238,207,15)" fg:x="1220" fg:w="1"/><text x="95.9363%" y="335.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.6863%" y="309" width="0.0784%" height="15" fill="rgb(213,199,42)" fg:x="1220" fg:w="1"/><text x="95.9363%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.08%)</title><rect x="95.6863%" y="293" width="0.0784%" height="15" fill="rgb(235,201,11)" fg:x="1220" fg:w="1"/><text x="95.9363%" y="303.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (335 samples, 26.27%)</title><rect x="69.5686%" y="373" width="26.2745%" height="15" fill="rgb(207,46,11)" fg:x="887" fg:w="335"/><text x="69.8186%" y="383.50">colors`cosmic_text::buffer::Buffer::shape_..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.08%)</title><rect x="95.7647%" y="357" width="0.0784%" height="15" fill="rgb(241,35,35)" fg:x="1221" fg:w="1"/><text x="96.0147%" y="367.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (344 samples, 26.98%)</title><rect x="68.9412%" y="389" width="26.9804%" height="15" fill="rgb(243,32,47)" fg:x="879" fg:w="344"/><text x="69.1912%" y="399.50">colors`cosmic_text::buffer::Buffer::set_text</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.08%)</title><rect x="95.8431%" y="373" width="0.0784%" height="15" fill="rgb(247,202,23)" fg:x="1222" fg:w="1"/><text x="96.0931%" y="383.50"></text></g><g><title>colors`cosmic_text::layout::LayoutGlyph::physical (1 samples, 0.08%)</title><rect x="95.9216%" y="389" width="0.0784%" height="15" fill="rgb(219,102,11)" fg:x="1223" fg:w="1"/><text x="96.1716%" y="399.50"></text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (2 samples, 0.16%)</title><rect x="96.0000%" y="357" width="0.1569%" height="15" fill="rgb(243,110,44)" fg:x="1224" fg:w="2"/><text x="96.2500%" y="367.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (2 samples, 0.16%)</title><rect x="96.0000%" y="341" width="0.1569%" height="15" fill="rgb(222,74,54)" fg:x="1224" fg:w="2"/><text x="96.2500%" y="351.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (5 samples, 0.39%)</title><rect x="96.1569%" y="357" width="0.3922%" height="15" fill="rgb(216,99,12)" fg:x="1226" fg:w="5"/><text x="96.4069%" y="367.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (5 samples, 0.39%)</title><rect x="96.1569%" y="341" width="0.3922%" height="15" fill="rgb(226,22,26)" fg:x="1226" fg:w="5"/><text x="96.4069%" y="351.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (8 samples, 0.63%)</title><rect x="96.0000%" y="373" width="0.6275%" height="15" fill="rgb(217,163,10)" fg:x="1224" fg:w="8"/><text x="96.2500%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="96.5490%" y="357" width="0.0784%" height="15" fill="rgb(213,25,53)" fg:x="1231" fg:w="1"/><text x="96.7990%" y="367.50"></text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::draw_cell (1,230 samples, 96.47%)</title><rect x="0.2353%" y="405" width="96.4706%" height="15" fill="rgb(252,105,26)" fg:x="3" fg:w="1230"/><text x="0.4853%" y="415.50">colors`soft_ratatui::soft_backend::SoftBackend::draw_cell</text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::fill_rect (9 samples, 0.71%)</title><rect x="96.0000%" y="389" width="0.7059%" height="15" fill="rgb(220,39,43)" fg:x="1224" fg:w="9"/><text x="96.2500%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="96.6275%" y="373" width="0.0784%" height="15" fill="rgb(229,68,48)" fg:x="1232" fg:w="1"/><text x="96.8775%" y="383.50"></text></g><g><title>colors`crc32fast::Hasher::update (1 samples, 0.08%)</title><rect x="97.0196%" y="373" width="0.0784%" height="15" fill="rgb(252,8,32)" fg:x="1237" fg:w="1"/><text x="97.2696%" y="383.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (3 samples, 0.24%)</title><rect x="97.4118%" y="357" width="0.2353%" height="15" fill="rgb(223,20,43)" fg:x="1242" fg:w="3"/><text x="97.6618%" y="367.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_data (14 samples, 1.10%)</title><rect x="97.0980%" y="373" width="1.0980%" height="15" fill="rgb(229,81,49)" fg:x="1238" fg:w="14"/><text x="97.3480%" y="383.50"></text></g><g><title>colors`simd_adler32::imp::scalar::update (7 samples, 0.55%)</title><rect x="97.6471%" y="357" width="0.5490%" height="15" fill="rgb(236,28,36)" fg:x="1245" fg:w="7"/><text x="97.8971%" y="367.50"></text></g><g><title>colors`tiny_skia::pixmap::PixmapRef::encode_png (20 samples, 1.57%)</title><rect x="96.7059%" y="405" width="1.5686%" height="15" fill="rgb(249,185,26)" fg:x="1233" fg:w="20"/><text x="96.9559%" y="415.50"></text></g><g><title>colors`png::encoder::Writer&lt;W&gt;::write_image_data (16 samples, 1.25%)</title><rect x="97.0196%" y="389" width="1.2549%" height="15" fill="rgb(249,174,33)" fg:x="1237" fg:w="16"/><text x="97.2696%" y="399.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (1 samples, 0.08%)</title><rect x="98.1961%" y="373" width="0.0784%" height="15" fill="rgb(233,201,37)" fg:x="1252" fg:w="1"/><text x="98.4461%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.08%)</title><rect x="98.2745%" y="405" width="0.0784%" height="15" fill="rgb(221,78,26)" fg:x="1253" fg:w="1"/><text x="98.5245%" y="415.50"></text></g><g><title>colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw (1,253 samples, 98.27%)</title><rect x="0.1569%" y="421" width="98.2745%" height="15" fill="rgb(250,127,30)" fg:x="2" fg:w="1253"/><text x="0.4069%" y="431.50">colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.08%)</title><rect x="98.3529%" y="405" width="0.0784%" height="15" fill="rgb(230,49,44)" fg:x="1254" fg:w="1"/><text x="98.6029%" y="415.50"></text></g><g><title>colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw (1,256 samples, 98.51%)</title><rect x="0.0000%" y="437" width="98.5098%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="1256"/><text x="0.2500%" y="447.50">colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw</text></g><g><title>colors`ratatui::buffer::buffer::Buffer::diff (1 samples, 0.08%)</title><rect x="98.4314%" y="421" width="0.0784%" height="15" fill="rgb(249,83,47)" fg:x="1255" fg:w="1"/><text x="98.6814%" y="431.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.5098%" y="293" width="0.0784%" height="15" fill="rgb(215,43,3)" fg:x="1256" fg:w="1"/><text x="98.7598%" y="303.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (1 samples, 0.08%)</title><rect x="98.5098%" y="277" width="0.0784%" height="15" fill="rgb(238,154,13)" fg:x="1256" fg:w="1"/><text x="98.7598%" y="287.50"></text></g><g><title>colors`cosmic_text::font::Font::new (1 samples, 0.08%)</title><rect x="98.5098%" y="261" width="0.0784%" height="15" fill="rgb(219,56,2)" fg:x="1256" fg:w="1"/><text x="98.7598%" y="271.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::from_slice (1 samples, 0.08%)</title><rect x="98.5098%" y="245" width="0.0784%" height="15" fill="rgb(233,0,4)" fg:x="1256" fg:w="1"/><text x="98.7598%" y="255.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::from_face (1 samples, 0.08%)</title><rect x="98.5098%" y="229" width="0.0784%" height="15" fill="rgb(235,30,7)" fg:x="1256" fg:w="1"/><text x="98.7598%" y="239.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.5098%" y="213" width="0.0784%" height="15" fill="rgb(250,79,13)" fg:x="1256" fg:w="1"/><text x="98.7598%" y="223.50"></text></g><g><title>colors`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="98.5098%" y="197" width="0.0784%" height="15" fill="rgb(211,146,34)" fg:x="1256" fg:w="1"/><text x="98.7598%" y="207.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.5098%" y="181" width="0.0784%" height="15" fill="rgb(228,22,38)" fg:x="1256" fg:w="1"/><text x="98.7598%" y="191.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (2 samples, 0.16%)</title><rect x="98.5098%" y="421" width="0.1569%" height="15" fill="rgb(235,168,5)" fg:x="1256" fg:w="2"/><text x="98.7598%" y="431.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (2 samples, 0.16%)</title><rect x="98.5098%" y="405" width="0.1569%" height="15" fill="rgb(221,155,16)" fg:x="1256" fg:w="2"/><text x="98.7598%" y="415.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (2 samples, 0.16%)</title><rect x="98.5098%" y="389" width="0.1569%" height="15" fill="rgb(215,215,53)" fg:x="1256" fg:w="2"/><text x="98.7598%" y="399.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (2 samples, 0.16%)</title><rect x="98.5098%" y="373" width="0.1569%" height="15" fill="rgb(223,4,10)" fg:x="1256" fg:w="2"/><text x="98.7598%" y="383.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (2 samples, 0.16%)</title><rect x="98.5098%" y="357" width="0.1569%" height="15" fill="rgb(234,103,6)" fg:x="1256" fg:w="2"/><text x="98.7598%" y="367.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (2 samples, 0.16%)</title><rect x="98.5098%" y="341" width="0.1569%" height="15" fill="rgb(227,97,0)" fg:x="1256" fg:w="2"/><text x="98.7598%" y="351.50"></text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (2 samples, 0.16%)</title><rect x="98.5098%" y="325" width="0.1569%" height="15" fill="rgb(234,150,53)" fg:x="1256" fg:w="2"/><text x="98.7598%" y="335.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (2 samples, 0.16%)</title><rect x="98.5098%" y="309" width="0.1569%" height="15" fill="rgb(228,201,54)" fg:x="1256" fg:w="2"/><text x="98.7598%" y="319.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::push_str (1 samples, 0.08%)</title><rect x="98.5882%" y="293" width="0.0784%" height="15" fill="rgb(222,22,37)" fg:x="1257" fg:w="1"/><text x="98.8382%" y="303.50"></text></g><g><title>CoreFoundation`_CFPrefsGetCacheStringForBundleID (1 samples, 0.08%)</title><rect x="98.6667%" y="277" width="0.0784%" height="15" fill="rgb(237,53,32)" fg:x="1258" fg:w="1"/><text x="98.9167%" y="287.50"></text></g><g><title>CoreFoundation`CFBundleGetMainBundle (1 samples, 0.08%)</title><rect x="98.6667%" y="261" width="0.0784%" height="15" fill="rgb(233,25,53)" fg:x="1258" fg:w="1"/><text x="98.9167%" y="271.50"></text></g><g><title>CoreFoundation`_CFBundleCreate (1 samples, 0.08%)</title><rect x="98.6667%" y="245" width="0.0784%" height="15" fill="rgb(210,40,34)" fg:x="1258" fg:w="1"/><text x="98.9167%" y="255.50"></text></g><g><title>CoreFoundation`CFBundleGetInfoDictionary (1 samples, 0.08%)</title><rect x="98.6667%" y="229" width="0.0784%" height="15" fill="rgb(241,220,44)" fg:x="1258" fg:w="1"/><text x="98.9167%" y="239.50"></text></g><g><title>CoreFoundation`_CFBundleRefreshInfoDictionaryAlreadyLocked (1 samples, 0.08%)</title><rect x="98.6667%" y="213" width="0.0784%" height="15" fill="rgb(235,28,35)" fg:x="1258" fg:w="1"/><text x="98.9167%" y="223.50"></text></g><g><title>CoreFoundation`_CFBundleCopyInfoDictionaryInDirectoryWithVersion (1 samples, 0.08%)</title><rect x="98.6667%" y="197" width="0.0784%" height="15" fill="rgb(210,56,17)" fg:x="1258" fg:w="1"/><text x="98.9167%" y="207.50"></text></g><g><title>CoreFoundation`_CFIterateDirectory (1 samples, 0.08%)</title><rect x="98.6667%" y="181" width="0.0784%" height="15" fill="rgb(224,130,29)" fg:x="1258" fg:w="1"/><text x="98.9167%" y="191.50"></text></g><g><title>libsystem_c.dylib`readdir (1 samples, 0.08%)</title><rect x="98.6667%" y="165" width="0.0784%" height="15" fill="rgb(235,212,8)" fg:x="1258" fg:w="1"/><text x="98.9167%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__getdirentries64 (1 samples, 0.08%)</title><rect x="98.6667%" y="149" width="0.0784%" height="15" fill="rgb(223,33,50)" fg:x="1258" fg:w="1"/><text x="98.9167%" y="159.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_locale (2 samples, 0.16%)</title><rect x="98.6667%" y="405" width="0.1569%" height="15" fill="rgb(219,149,13)" fg:x="1258" fg:w="2"/><text x="98.9167%" y="415.50"></text></g><g><title>colors`sys_locale::get_locale (2 samples, 0.16%)</title><rect x="98.6667%" y="389" width="0.1569%" height="15" fill="rgb(250,156,29)" fg:x="1258" fg:w="2"/><text x="98.9167%" y="399.50"></text></g><g><title>CoreFoundation`CFLocaleCopyPreferredLanguages (2 samples, 0.16%)</title><rect x="98.6667%" y="373" width="0.1569%" height="15" fill="rgb(216,193,19)" fg:x="1258" fg:w="2"/><text x="98.9167%" y="383.50"></text></g><g><title>Foundation`@objc static NSLocale._preferredLanguagesForCurrentUser(_:) (2 samples, 0.16%)</title><rect x="98.6667%" y="357" width="0.1569%" height="15" fill="rgb(216,135,14)" fg:x="1258" fg:w="2"/><text x="98.9167%" y="367.50"></text></g><g><title>Foundation`LocaleCache.preferredLanguages(forCurrentUser:) (2 samples, 0.16%)</title><rect x="98.6667%" y="341" width="0.1569%" height="15" fill="rgb(241,47,5)" fg:x="1258" fg:w="2"/><text x="98.9167%" y="351.50"></text></g><g><title>CoreFoundation`_CFPreferencesCopyAppValueWithContainerAndConfiguration (2 samples, 0.16%)</title><rect x="98.6667%" y="325" width="0.1569%" height="15" fill="rgb(233,42,35)" fg:x="1258" fg:w="2"/><text x="98.9167%" y="335.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:] (2 samples, 0.16%)</title><rect x="98.6667%" y="309" width="0.1569%" height="15" fill="rgb(231,13,6)" fg:x="1258" fg:w="2"/><text x="98.9167%" y="319.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchListForIdentifier:container:cloudConfigurationURL:perform:] (2 samples, 0.16%)</title><rect x="98.6667%" y="293" width="0.1569%" height="15" fill="rgb(207,181,40)" fg:x="1258" fg:w="2"/><text x="98.9167%" y="303.50"></text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke (1 samples, 0.08%)</title><rect x="98.7451%" y="277" width="0.0784%" height="15" fill="rgb(254,173,49)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="287.50"></text></g><g><title>CoreFoundation`__76-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:]_block_invoke (1 samples, 0.08%)</title><rect x="98.7451%" y="261" width="0.0784%" height="15" fill="rgb(221,1,38)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="271.50"></text></g><g><title>CoreFoundation`-[CFPrefsSource copyValueForKey:] (1 samples, 0.08%)</title><rect x="98.7451%" y="245" width="0.0784%" height="15" fill="rgb(206,124,46)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="255.50"></text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource alreadylocked_copyValueForKey:] (1 samples, 0.08%)</title><rect x="98.7451%" y="229" width="0.0784%" height="15" fill="rgb(249,21,11)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="239.50"></text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource alreadylocked_getDictionary:] (1 samples, 0.08%)</title><rect x="98.7451%" y="213" width="0.0784%" height="15" fill="rgb(222,201,40)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="223.50"></text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource alreadylocked_generationCountFromListOfSources:count:] (1 samples, 0.08%)</title><rect x="98.7451%" y="197" width="0.0784%" height="15" fill="rgb(235,61,29)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="207.50"></text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource synchronouslySendSystemMessage:andUserMessage:andDirectMessage:replyHandler:] (1 samples, 0.08%)</title><rect x="98.7451%" y="181" width="0.0784%" height="15" fill="rgb(219,207,3)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="191.50"></text></g><g><title>CoreFoundation`CFPREFERENCES_IS_WAITING_FOR_SYSTEM_CFPREFSD (1 samples, 0.08%)</title><rect x="98.7451%" y="165" width="0.0784%" height="15" fill="rgb(222,56,46)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="175.50"></text></g><g><title>CoreFoundation`__103-[CFPrefsSearchListSource synchronouslySendSystemMessage:andUserMessage:andDirectMessage:replyHandler:]_block_invoke (1 samples, 0.08%)</title><rect x="98.7451%" y="149" width="0.0784%" height="15" fill="rgb(239,76,54)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="159.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withConnectionForRole:andUserIdentifier:performBlock:] (1 samples, 0.08%)</title><rect x="98.7451%" y="133" width="0.0784%" height="15" fill="rgb(231,124,27)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="143.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences _copyDaemonConnectionSettingUpIfNecessaryForRole:andUserIdentifier:] (1 samples, 0.08%)</title><rect x="98.7451%" y="117" width="0.0784%" height="15" fill="rgb(249,195,6)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="127.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences _setupNewDaemonConnection:invalidationHandler:] (1 samples, 0.08%)</title><rect x="98.7451%" y="101" width="0.0784%" height="15" fill="rgb(237,174,47)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="111.50"></text></g><g><title>libxpc.dylib`_xpc_connection_activate_if_needed (1 samples, 0.08%)</title><rect x="98.7451%" y="85" width="0.0784%" height="15" fill="rgb(206,201,31)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="95.50"></text></g><g><title>libxpc.dylib`_xpc_connection_init (1 samples, 0.08%)</title><rect x="98.7451%" y="69" width="0.0784%" height="15" fill="rgb(231,57,52)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="79.50"></text></g><g><title>libxpc.dylib`_xpc_try_mach_port_construct (1 samples, 0.08%)</title><rect x="98.7451%" y="53" width="0.0784%" height="15" fill="rgb(248,177,22)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_port_construct_trap (1 samples, 0.08%)</title><rect x="98.7451%" y="37" width="0.0784%" height="15" fill="rgb(215,211,37)" fg:x="1259" fg:w="1"/><text x="98.9951%" y="47.50"></text></g><g><title>colors`&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.8235%" y="389" width="0.0784%" height="15" fill="rgb(241,128,51)" fg:x="1260" fg:w="1"/><text x="99.0735%" y="399.50"></text></g><g><title>colors`&lt;std::sys::pal::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.8235%" y="373" width="0.0784%" height="15" fill="rgb(227,165,31)" fg:x="1260" fg:w="1"/><text x="99.0735%" y="383.50"></text></g><g><title>libsystem_c.dylib`readdir_r (1 samples, 0.08%)</title><rect x="98.8235%" y="357" width="0.0784%" height="15" fill="rgb(228,167,24)" fg:x="1260" fg:w="1"/><text x="99.0735%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__getdirentries64 (1 samples, 0.08%)</title><rect x="98.8235%" y="341" width="0.0784%" height="15" fill="rgb(228,143,12)" fg:x="1260" fg:w="1"/><text x="99.0735%" y="351.50"></text></g><g><title>colors`memmap2::os::MmapInner::map (1 samples, 0.08%)</title><rect x="98.9020%" y="357" width="0.0784%" height="15" fill="rgb(249,149,8)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (1 samples, 0.08%)</title><rect x="98.9020%" y="341" width="0.0784%" height="15" fill="rgb(243,35,44)" fg:x="1261" fg:w="1"/><text x="99.1520%" y="351.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (3 samples, 0.24%)</title><rect x="98.9020%" y="373" width="0.2353%" height="15" fill="rgb(246,89,9)" fg:x="1261" fg:w="3"/><text x="99.1520%" y="383.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (2 samples, 0.16%)</title><rect x="98.9804%" y="357" width="0.1569%" height="15" fill="rgb(233,213,13)" fg:x="1262" fg:w="2"/><text x="99.2304%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.16%)</title><rect x="98.9804%" y="341" width="0.1569%" height="15" fill="rgb(233,141,41)" fg:x="1262" fg:w="2"/><text x="99.2304%" y="351.50"></text></g><g><title>colors`memmap2::os::file_len (1 samples, 0.08%)</title><rect x="99.1373%" y="341" width="0.0784%" height="15" fill="rgb(239,167,4)" fg:x="1264" fg:w="1"/><text x="99.3873%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`fstat (1 samples, 0.08%)</title><rect x="99.1373%" y="325" width="0.0784%" height="15" fill="rgb(209,217,16)" fg:x="1264" fg:w="1"/><text x="99.3873%" y="335.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (5 samples, 0.39%)</title><rect x="99.1373%" y="357" width="0.3922%" height="15" fill="rgb(219,88,35)" fg:x="1264" fg:w="5"/><text x="99.3873%" y="367.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (4 samples, 0.31%)</title><rect x="99.2157%" y="341" width="0.3137%" height="15" fill="rgb(220,193,23)" fg:x="1265" fg:w="4"/><text x="99.4657%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__open (4 samples, 0.31%)</title><rect x="99.2157%" y="325" width="0.3137%" height="15" fill="rgb(230,90,52)" fg:x="1265" fg:w="4"/><text x="99.4657%" y="335.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::new (13 samples, 1.02%)</title><rect x="98.6667%" y="421" width="1.0196%" height="15" fill="rgb(252,106,19)" fg:x="1258" fg:w="13"/><text x="98.9167%" y="431.50"></text></g><g><title>colors`fontdb::Database::load_system_fonts (11 samples, 0.86%)</title><rect x="98.8235%" y="405" width="0.8627%" height="15" fill="rgb(206,74,20)" fg:x="1260" fg:w="11"/><text x="99.0735%" y="415.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (10 samples, 0.78%)</title><rect x="98.9020%" y="389" width="0.7843%" height="15" fill="rgb(230,138,44)" fg:x="1261" fg:w="10"/><text x="99.1520%" y="399.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (7 samples, 0.55%)</title><rect x="99.1373%" y="373" width="0.5490%" height="15" fill="rgb(235,182,43)" fg:x="1264" fg:w="7"/><text x="99.3873%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`stat (2 samples, 0.16%)</title><rect x="99.5294%" y="357" width="0.1569%" height="15" fill="rgb(242,16,51)" fg:x="1269" fg:w="2"/><text x="99.7794%" y="367.50"></text></g><g><title>colors`cosmic_text::swash::SwashCache::get_image (1 samples, 0.08%)</title><rect x="99.6863%" y="421" width="0.0784%" height="15" fill="rgb(248,9,4)" fg:x="1271" fg:w="1"/><text x="99.9363%" y="431.50"></text></g><g><title>colors`cosmic_text::swash::swash_image (1 samples, 0.08%)</title><rect x="99.6863%" y="405" width="0.0784%" height="15" fill="rgb(210,31,22)" fg:x="1271" fg:w="1"/><text x="99.9363%" y="415.50"></text></g><g><title>colors`swash::scale::ScalerBuilder::build (1 samples, 0.08%)</title><rect x="99.6863%" y="389" width="0.0784%" height="15" fill="rgb(239,54,39)" fg:x="1271" fg:w="1"/><text x="99.9363%" y="399.50"></text></g><g><title>colors`swash::scale::hinting_cache::HintingCache::get (1 samples, 0.08%)</title><rect x="99.6863%" y="373" width="0.0784%" height="15" fill="rgb(230,99,41)" fg:x="1271" fg:w="1"/><text x="99.9363%" y="383.50"></text></g><g><title>colors`skrifa::outline::glyf::hint::graphics::GraphicsState::reset (1 samples, 0.08%)</title><rect x="99.6863%" y="357" width="0.0784%" height="15" fill="rgb(253,106,12)" fg:x="1271" fg:w="1"/><text x="99.9363%" y="367.50"></text></g><g><title>colors`std::rt::lang_start::_{{closure}} (1,273 samples, 99.84%)</title><rect x="0.0000%" y="485" width="99.8431%" height="15" fill="rgb(213,46,41)" fg:x="0" fg:w="1273"/><text x="0.2500%" y="495.50">colors`std::rt::lang_start::_{{closure}}</text></g><g><title>colors`std::sys::backtrace::__rust_begin_short_backtrace (1,273 samples, 99.84%)</title><rect x="0.0000%" y="469" width="99.8431%" height="15" fill="rgb(215,133,35)" fg:x="0" fg:w="1273"/><text x="0.2500%" y="479.50">colors`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>colors`colors::main (1,273 samples, 99.84%)</title><rect x="0.0000%" y="453" width="99.8431%" height="15" fill="rgb(213,28,5)" fg:x="0" fg:w="1273"/><text x="0.2500%" y="463.50">colors`colors::main</text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::new (17 samples, 1.33%)</title><rect x="98.5098%" y="437" width="1.3333%" height="15" fill="rgb(215,77,49)" fg:x="1256" fg:w="17"/><text x="98.7598%" y="447.50"></text></g><g><title>colors`tiny_skia::pixmap::Pixmap::fill (1 samples, 0.08%)</title><rect x="99.7647%" y="421" width="0.0784%" height="15" fill="rgb(248,100,22)" fg:x="1272" fg:w="1"/><text x="100.0147%" y="431.50"></text></g><g><title>colors`main (1,274 samples, 99.92%)</title><rect x="0.0000%" y="517" width="99.9216%" height="15" fill="rgb(208,67,9)" fg:x="0" fg:w="1274"/><text x="0.2500%" y="527.50">colors`main</text></g><g><title>colors`std::rt::lang_start_internal (1,274 samples, 99.92%)</title><rect x="0.0000%" y="501" width="99.9216%" height="15" fill="rgb(219,133,21)" fg:x="0" fg:w="1274"/><text x="0.2500%" y="511.50">colors`std::rt::lang_start_internal</text></g><g><title>colors`std::thread::set_current (1 samples, 0.08%)</title><rect x="99.8431%" y="485" width="0.0784%" height="15" fill="rgb(246,46,29)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="495.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.08%)</title><rect x="99.8431%" y="469" width="0.0784%" height="15" fill="rgb(246,185,52)" fg:x="1273" fg:w="1"/><text x="100.0931%" y="479.50"></text></g><g><title>all (1,275 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(252,136,11)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="559.50"></text></g><g><title>dyld`start (1,275 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(219,138,53)" fg:x="0" fg:w="1275"/><text x="0.2500%" y="543.50">dyld`start</text></g><g><title>colors`std::rt::lang_start_internal (1 samples, 0.08%)</title><rect x="99.9216%" y="517" width="0.0784%" height="15" fill="rgb(211,51,23)" fg:x="1274" fg:w="1"/><text x="100.1716%" y="527.50"></text></g></svg></svg>
<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="6612"><g><title>colors`&lt;ratatui::text::text::Text as ratatui::widgets::Widget&gt;::render (1 samples, 0.02%)</title><rect x="0.0151%" y="293" width="0.0151%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.2651%" y="303.50"></text></g><g><title>colors`&lt;ratatui::text::text::Text as ratatui::widgets::WidgetRef&gt;::render_ref (1 samples, 0.02%)</title><rect x="0.0151%" y="277" width="0.0151%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2651%" y="287.50"></text></g><g><title>colors`ratatui::text::line::render_spans (1 samples, 0.02%)</title><rect x="0.0151%" y="261" width="0.0151%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2651%" y="271.50"></text></g><g><title>colors`&lt;ratatui::text::span::Span as ratatui::widgets::WidgetRef&gt;::render_ref (1 samples, 0.02%)</title><rect x="0.0151%" y="245" width="0.0151%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2651%" y="255.50"></text></g><g><title>colors`palette::ok_utils::LC&lt;T&gt;::find_cusp (1 samples, 0.02%)</title><rect x="0.0302%" y="293" width="0.0151%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.2802%" y="303.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::index_of (2 samples, 0.03%)</title><rect x="0.0454%" y="293" width="0.0302%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="2"/><text x="0.2954%" y="303.50"></text></g><g><title>colors`ratatui::buffer::cell::Cell::set_char (5 samples, 0.08%)</title><rect x="0.0756%" y="293" width="0.0756%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="5"/><text x="0.3256%" y="303.50"></text></g><g><title>colors`&lt;&amp;mut colors::App as ratatui::widgets::Widget&gt;::render (11 samples, 0.17%)</title><rect x="0.0000%" y="309" width="0.1664%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="11"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="0.1512%" y="293" width="0.0151%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="1"/><text x="0.4012%" y="303.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="0.1815%" y="293" width="0.0151%" height="15" fill="rgb(220,122,19)" fg:x="12" fg:w="1"/><text x="0.4315%" y="303.50"></text></g><g><title>colors`__rdl_alloc (1 samples, 0.02%)</title><rect x="0.1966%" y="293" width="0.0151%" height="15" fill="rgb(250,228,42)" fg:x="13" fg:w="1"/><text x="0.4466%" y="303.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::draw (1 samples, 0.02%)</title><rect x="0.2117%" y="293" width="0.0151%" height="15" fill="rgb(240,193,28)" fg:x="14" fg:w="1"/><text x="0.4617%" y="303.50"></text></g><g><title>colors`ratatui::buffer::cell::Cell::symbol (1 samples, 0.02%)</title><rect x="0.2269%" y="293" width="0.0151%" height="15" fill="rgb(216,20,37)" fg:x="15" fg:w="1"/><text x="0.4769%" y="303.50"></text></g><g><title>colors`&lt;cosmic_text::buffer::LayoutRunIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.05%)</title><rect x="0.2571%" y="277" width="0.0454%" height="15" fill="rgb(206,188,39)" fg:x="17" fg:w="3"/><text x="0.5071%" y="287.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="0.3025%" y="277" width="0.0151%" height="15" fill="rgb(217,207,13)" fg:x="20" fg:w="1"/><text x="0.5525%" y="287.50"></text></g><g><title>colors`__rdl_alloc (1 samples, 0.02%)</title><rect x="0.3176%" y="277" width="0.0151%" height="15" fill="rgb(231,73,38)" fg:x="21" fg:w="1"/><text x="0.5676%" y="287.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsOwned::new (3 samples, 0.05%)</title><rect x="0.3327%" y="277" width="0.0454%" height="15" fill="rgb(225,20,46)" fg:x="22" fg:w="3"/><text x="0.5827%" y="287.50"></text></g><g><title>colors`cosmic_text::swash::SwashCache::get_image (1 samples, 0.02%)</title><rect x="0.3781%" y="261" width="0.0151%" height="15" fill="rgb(210,31,41)" fg:x="25" fg:w="1"/><text x="0.6281%" y="271.50"></text></g><g><title>colors`cosmic_text::swash::SwashCache::get_image (2 samples, 0.03%)</title><rect x="0.8318%" y="245" width="0.0302%" height="15" fill="rgb(221,200,47)" fg:x="55" fg:w="2"/><text x="1.0818%" y="255.50"></text></g><g><title>colors`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.03%)</title><rect x="0.8318%" y="229" width="0.0302%" height="15" fill="rgb(226,26,5)" fg:x="55" fg:w="2"/><text x="1.0818%" y="239.50"></text></g><g><title>colors`tiny_skia::painter::Paint::set_color (14 samples, 0.21%)</title><rect x="0.8621%" y="245" width="0.2117%" height="15" fill="rgb(249,33,26)" fg:x="57" fg:w="14"/><text x="1.1121%" y="255.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (3 samples, 0.05%)</title><rect x="1.2402%" y="229" width="0.0454%" height="15" fill="rgb(235,183,28)" fg:x="82" fg:w="3"/><text x="1.4902%" y="239.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (12 samples, 0.18%)</title><rect x="2.6013%" y="213" width="0.1815%" height="15" fill="rgb(221,5,38)" fg:x="172" fg:w="12"/><text x="2.8513%" y="223.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (30 samples, 0.45%)</title><rect x="2.7828%" y="213" width="0.4537%" height="15" fill="rgb(247,18,42)" fg:x="184" fg:w="30"/><text x="3.0328%" y="223.50"></text></g><g><title>colors`tiny_skia::blend_mode::BlendMode::to_stage (6 samples, 0.09%)</title><rect x="3.2365%" y="213" width="0.0907%" height="15" fill="rgb(241,131,45)" fg:x="214" fg:w="6"/><text x="3.4865%" y="223.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (37 samples, 0.56%)</title><rect x="3.3273%" y="213" width="0.5596%" height="15" fill="rgb(249,31,29)" fg:x="220" fg:w="37"/><text x="3.5773%" y="223.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::push (9 samples, 0.14%)</title><rect x="3.8869%" y="213" width="0.1361%" height="15" fill="rgb(225,111,53)" fg:x="257" fg:w="9"/><text x="4.1369%" y="223.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (134 samples, 2.03%)</title><rect x="10.9195%" y="197" width="2.0266%" height="15" fill="rgb(238,160,17)" fg:x="722" fg:w="134"/><text x="11.1695%" y="207.50">c..</text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (1,154 samples, 17.45%)</title><rect x="12.9462%" y="197" width="17.4531%" height="15" fill="rgb(214,148,48)" fg:x="856" fg:w="1154"/><text x="13.1962%" y="207.50">colors`tiny_skia::pipeline:..</text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (205 samples, 3.10%)</title><rect x="30.3993%" y="197" width="3.1004%" height="15" fill="rgb(232,36,49)" fg:x="2010" fg:w="205"/><text x="30.6493%" y="207.50">col..</text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (2,651 samples, 40.09%)</title><rect x="4.0230%" y="213" width="40.0938%" height="15" fill="rgb(209,103,24)" fg:x="266" fg:w="2651"/><text x="4.2730%" y="223.50">colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new</text></g><g><title>libsystem_platform.dylib`_platform_memmove (702 samples, 10.62%)</title><rect x="33.4997%" y="197" width="10.6171%" height="15" fill="rgb(229,88,8)" fg:x="2215" fg:w="702"/><text x="33.7497%" y="207.50">libsystem_platf..</text></g><g><title>colors`tiny_skia::pipeline::lowp::null_fn (3 samples, 0.05%)</title><rect x="46.5517%" y="181" width="0.0454%" height="15" fill="rgb(213,181,19)" fg:x="3078" fg:w="3"/><text x="46.8017%" y="191.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::source_over_rgba_tail (6 samples, 0.09%)</title><rect x="46.5971%" y="181" width="0.0907%" height="15" fill="rgb(254,191,54)" fg:x="3081" fg:w="6"/><text x="46.8471%" y="191.50"></text></g><g><title>colors`DYLD-STUB$$memset_pattern16 (13 samples, 0.20%)</title><rect x="47.2474%" y="165" width="0.1966%" height="15" fill="rgb(241,83,37)" fg:x="3124" fg:w="13"/><text x="47.4974%" y="175.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::source_over_rgba_tail (174 samples, 2.63%)</title><rect x="47.4440%" y="165" width="2.6316%" height="15" fill="rgb(233,36,39)" fg:x="3137" fg:w="174"/><text x="47.6940%" y="175.50">co..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.27%)</title><rect x="50.0756%" y="165" width="0.2722%" height="15" fill="rgb(226,3,54)" fg:x="3311" fg:w="18"/><text x="50.3256%" y="175.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::start (262 samples, 3.96%)</title><rect x="46.6878%" y="181" width="3.9625%" height="15" fill="rgb(245,192,40)" fg:x="3087" fg:w="262"/><text x="46.9378%" y="191.50">colo..</text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (20 samples, 0.30%)</title><rect x="50.3479%" y="165" width="0.3025%" height="15" fill="rgb(238,167,29)" fg:x="3329" fg:w="20"/><text x="50.5979%" y="175.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (384 samples, 5.81%)</title><rect x="45.5384%" y="197" width="5.8076%" height="15" fill="rgb(232,182,51)" fg:x="3011" fg:w="384"/><text x="45.7884%" y="207.50">colors`..</text></g><g><title>colors`tiny_skia::pipeline::lowp::uniform_color (46 samples, 0.70%)</title><rect x="50.6503%" y="181" width="0.6957%" height="15" fill="rgb(231,60,39)" fg:x="3349" fg:w="46"/><text x="50.9003%" y="191.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (480 samples, 7.26%)</title><rect x="44.1168%" y="213" width="7.2595%" height="15" fill="rgb(208,69,12)" fg:x="2917" fg:w="480"/><text x="44.3668%" y="223.50">colors`tin..</text></g><g><title>colors`tiny_skia::pipeline::lowp::start (2 samples, 0.03%)</title><rect x="51.3460%" y="197" width="0.0302%" height="15" fill="rgb(235,93,37)" fg:x="3395" fg:w="2"/><text x="51.5960%" y="207.50"></text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (10 samples, 0.15%)</title><rect x="51.3763%" y="213" width="0.1512%" height="15" fill="rgb(213,116,39)" fg:x="3397" fg:w="10"/><text x="51.6263%" y="223.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::from_xywh (23 samples, 0.35%)</title><rect x="51.5275%" y="213" width="0.3479%" height="15" fill="rgb(222,207,29)" fg:x="3407" fg:w="23"/><text x="51.7775%" y="223.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::intersect (169 samples, 2.56%)</title><rect x="51.8754%" y="213" width="2.5560%" height="15" fill="rgb(206,96,30)" fg:x="3430" fg:w="169"/><text x="52.1254%" y="223.50">co..</text></g><g><title>colors`tiny_skia_path::rect::Rect::round (27 samples, 0.41%)</title><rect x="54.4313%" y="213" width="0.4083%" height="15" fill="rgb(218,138,4)" fg:x="3599" fg:w="27"/><text x="54.6813%" y="223.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (4,607 samples, 69.68%)</title><rect x="1.2855%" y="229" width="69.6763%" height="15" fill="rgb(250,191,14)" fg:x="85" fg:w="4607"/><text x="1.5355%" y="239.50">colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,066 samples, 16.12%)</title><rect x="54.8397%" y="213" width="16.1222%" height="15" fill="rgb(239,60,40)" fg:x="3626" fg:w="1066"/><text x="55.0897%" y="223.50">libsystem_platform.dylib`..</text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (20 samples, 0.30%)</title><rect x="70.9619%" y="229" width="0.3025%" height="15" fill="rgb(206,27,48)" fg:x="4692" fg:w="20"/><text x="71.2119%" y="239.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (5 samples, 0.08%)</title><rect x="71.2644%" y="229" width="0.0756%" height="15" fill="rgb(225,35,8)" fg:x="4712" fg:w="5"/><text x="71.5144%" y="239.50"></text></g><g><title>colors`tiny_skia_path::transform::Transform::is_identity (29 samples, 0.44%)</title><rect x="71.3400%" y="229" width="0.4386%" height="15" fill="rgb(250,213,24)" fg:x="4717" fg:w="29"/><text x="71.5900%" y="239.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::fill_rect (5,201 samples, 78.66%)</title><rect x="1.0738%" y="245" width="78.6600%" height="15" fill="rgb(247,123,22)" fg:x="71" fg:w="5201"/><text x="1.3238%" y="255.50">colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::fill_rect</text></g><g><title>libsystem_platform.dylib`_platform_memmove (526 samples, 7.96%)</title><rect x="71.7786%" y="229" width="7.9552%" height="15" fill="rgb(231,138,38)" fg:x="4746" fg:w="526"/><text x="72.0286%" y="239.50">libsystem_p..</text></g><g><title>colors`cosmic_text::swash::SwashCache::with_pixels (5,264 samples, 79.61%)</title><rect x="0.3932%" y="261" width="79.6128%" height="15" fill="rgb(231,145,46)" fg:x="26" fg:w="5264"/><text x="0.6432%" y="271.50">colors`cosmic_text::swash::SwashCache::with_pixels</text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (18 samples, 0.27%)</title><rect x="79.7338%" y="245" width="0.2722%" height="15" fill="rgb(251,118,11)" fg:x="5272" fg:w="18"/><text x="79.9838%" y="255.50"></text></g><g><title>colors`tiny_skia::painter::Paint::set_color (11 samples, 0.17%)</title><rect x="80.0060%" y="261" width="0.1664%" height="15" fill="rgb(217,147,25)" fg:x="5290" fg:w="11"/><text x="80.2560%" y="271.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::draw (5,313 samples, 80.35%)</title><rect x="0.3781%" y="277" width="80.3539%" height="15" fill="rgb(247,81,37)" fg:x="25" fg:w="5313"/><text x="0.6281%" y="287.50">colors`cosmic_text::buffer::Buffer::draw</text></g><g><title>colors`tiny_skia_path::rect::Rect::from_xywh (37 samples, 0.56%)</title><rect x="80.1724%" y="261" width="0.5596%" height="15" fill="rgb(209,12,38)" fg:x="5301" fg:w="37"/><text x="80.4224%" y="271.50"></text></g><g><title>colors`&lt;cosmic_text::line_ending::LineIter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.09%)</title><rect x="80.7774%" y="261" width="0.0907%" height="15" fill="rgb(227,1,9)" fg:x="5341" fg:w="6"/><text x="81.0274%" y="271.50"></text></g><g><title>colors`DYLD-STUB$$free (3 samples, 0.05%)</title><rect x="80.8681%" y="261" width="0.0454%" height="15" fill="rgb(248,47,43)" fg:x="5347" fg:w="3"/><text x="81.1181%" y="271.50"></text></g><g><title>colors`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="80.9135%" y="245" width="0.0302%" height="15" fill="rgb(221,10,30)" fg:x="5350" fg:w="2"/><text x="81.1635%" y="255.50"></text></g><g><title>colors`DYLD-STUB$$free (2 samples, 0.03%)</title><rect x="80.9437%" y="245" width="0.0302%" height="15" fill="rgb(210,229,1)" fg:x="5352" fg:w="2"/><text x="81.1937%" y="255.50"></text></g><g><title>colors`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.02%)</title><rect x="80.9740%" y="245" width="0.0151%" height="15" fill="rgb(222,148,37)" fg:x="5354" fg:w="1"/><text x="81.2240%" y="255.50"></text></g><g><title>colors`__rdl_dealloc (1 samples, 0.02%)</title><rect x="81.0194%" y="229" width="0.0151%" height="15" fill="rgb(234,67,33)" fg:x="5357" fg:w="1"/><text x="81.2694%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="81.0345%" y="229" width="0.0151%" height="15" fill="rgb(247,98,35)" fg:x="5358" fg:w="1"/><text x="81.2845%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.05%)</title><rect x="81.0496%" y="229" width="0.0454%" height="15" fill="rgb(247,138,52)" fg:x="5359" fg:w="3"/><text x="81.2996%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="81.0950%" y="229" width="0.0151%" height="15" fill="rgb(213,79,30)" fg:x="5362" fg:w="1"/><text x="81.3450%" y="239.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;cosmic_text::shape::ShapeLine&gt;&gt; (13 samples, 0.20%)</title><rect x="80.9891%" y="245" width="0.1966%" height="15" fill="rgb(246,177,23)" fg:x="5355" fg:w="13"/><text x="81.2391%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.08%)</title><rect x="81.1101%" y="229" width="0.0756%" height="15" fill="rgb(230,62,27)" fg:x="5363" fg:w="5"/><text x="81.3601%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.03%)</title><rect x="81.1555%" y="213" width="0.0302%" height="15" fill="rgb(216,154,8)" fg:x="5366" fg:w="2"/><text x="81.4055%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="81.1706%" y="197" width="0.0151%" height="15" fill="rgb(244,35,45)" fg:x="5367" fg:w="1"/><text x="81.4206%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.06%)</title><rect x="81.1857%" y="245" width="0.0605%" height="15" fill="rgb(251,115,12)" fg:x="5368" fg:w="4"/><text x="81.4357%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.06%)</title><rect x="81.2462%" y="245" width="0.0605%" height="15" fill="rgb(240,54,50)" fg:x="5372" fg:w="4"/><text x="81.4962%" y="255.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::buffer_line::BufferLine&gt; (27 samples, 0.41%)</title><rect x="80.9135%" y="261" width="0.4083%" height="15" fill="rgb(233,84,52)" fg:x="5350" fg:w="27"/><text x="81.1635%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="81.3067%" y="245" width="0.0151%" height="15" fill="rgb(207,117,47)" fg:x="5376" fg:w="1"/><text x="81.5567%" y="255.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;alloc::vec::Vec&lt;cosmic_text::layout::LayoutLine&gt;&gt;&gt; (4 samples, 0.06%)</title><rect x="81.3218%" y="261" width="0.0605%" height="15" fill="rgb(249,43,39)" fg:x="5377" fg:w="4"/><text x="81.5718%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.05%)</title><rect x="81.3370%" y="245" width="0.0454%" height="15" fill="rgb(209,38,44)" fg:x="5378" fg:w="3"/><text x="81.5870%" y="255.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsOwned::new (1 samples, 0.02%)</title><rect x="81.3823%" y="261" width="0.0151%" height="15" fill="rgb(236,212,23)" fg:x="5381" fg:w="1"/><text x="81.6323%" y="271.50"></text></g><g><title>colors`__rdl_alloc (2 samples, 0.03%)</title><rect x="81.4126%" y="229" width="0.0302%" height="15" fill="rgb(242,79,21)" fg:x="5383" fg:w="2"/><text x="81.6626%" y="239.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;cosmic_text::shape::ShapeLine&gt;&gt; (1 samples, 0.02%)</title><rect x="81.4428%" y="229" width="0.0151%" height="15" fill="rgb(211,96,35)" fg:x="5385" fg:w="1"/><text x="81.6928%" y="239.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="81.4580%" y="213" width="0.0151%" height="15" fill="rgb(253,215,40)" fg:x="5386" fg:w="1"/><text x="81.7080%" y="223.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="81.4731%" y="213" width="0.0151%" height="15" fill="rgb(211,81,21)" fg:x="5387" fg:w="1"/><text x="81.7231%" y="223.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="81.4882%" y="213" width="0.0151%" height="15" fill="rgb(208,190,38)" fg:x="5388" fg:w="1"/><text x="81.7382%" y="223.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;cosmic_text::shape::ShapeLine&gt;&gt; (2 samples, 0.03%)</title><rect x="81.5033%" y="213" width="0.0302%" height="15" fill="rgb(235,213,38)" fg:x="5389" fg:w="2"/><text x="81.7533%" y="223.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::defaults (1 samples, 0.02%)</title><rect x="81.5336%" y="213" width="0.0151%" height="15" fill="rgb(237,122,38)" fg:x="5391" fg:w="1"/><text x="81.7836%" y="223.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.05%)</title><rect x="81.8058%" y="197" width="0.0454%" height="15" fill="rgb(244,218,35)" fg:x="5409" fg:w="3"/><text x="82.0558%" y="207.50"></text></g><g><title>colors`&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="81.8209%" y="181" width="0.0302%" height="15" fill="rgb(240,68,47)" fg:x="5410" fg:w="2"/><text x="82.0709%" y="191.50"></text></g><g><title>colors`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.05%)</title><rect x="81.8512%" y="197" width="0.0454%" height="15" fill="rgb(210,16,53)" fg:x="5412" fg:w="3"/><text x="82.1012%" y="207.50"></text></g><g><title>colors`DYLD-STUB$$memset (1 samples, 0.02%)</title><rect x="81.8966%" y="197" width="0.0151%" height="15" fill="rgb(235,124,12)" fg:x="5415" fg:w="1"/><text x="82.1466%" y="207.50"></text></g><g><title>colors`__rdl_alloc (1 samples, 0.02%)</title><rect x="81.9117%" y="197" width="0.0151%" height="15" fill="rgb(224,169,11)" fg:x="5416" fg:w="1"/><text x="82.1617%" y="207.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.02%)</title><rect x="81.9268%" y="197" width="0.0151%" height="15" fill="rgb(250,166,2)" fg:x="5417" fg:w="1"/><text x="82.1768%" y="207.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="81.9419%" y="197" width="0.0151%" height="15" fill="rgb(242,216,29)" fg:x="5418" fg:w="1"/><text x="82.1919%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="81.9419%" y="181" width="0.0151%" height="15" fill="rgb(230,116,27)" fg:x="5418" fg:w="1"/><text x="82.1919%" y="191.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.05%)</title><rect x="82.1083%" y="181" width="0.0454%" height="15" fill="rgb(228,99,48)" fg:x="5429" fg:w="3"/><text x="82.3583%" y="191.50"></text></g><g><title>colors`&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="82.1385%" y="165" width="0.0151%" height="15" fill="rgb(253,11,6)" fg:x="5431" fg:w="1"/><text x="82.3885%" y="175.50"></text></g><g><title>colors`&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="82.1537%" y="181" width="0.0151%" height="15" fill="rgb(247,143,39)" fg:x="5432" fg:w="1"/><text x="82.4037%" y="191.50"></text></g><g><title>colors`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.05%)</title><rect x="82.1688%" y="181" width="0.0454%" height="15" fill="rgb(236,97,10)" fg:x="5433" fg:w="3"/><text x="82.4188%" y="191.50"></text></g><g><title>colors`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.03%)</title><rect x="82.1839%" y="165" width="0.0302%" height="15" fill="rgb(233,208,19)" fg:x="5434" fg:w="2"/><text x="82.4339%" y="175.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4 samples, 0.06%)</title><rect x="82.2142%" y="181" width="0.0605%" height="15" fill="rgb(216,164,2)" fg:x="5436" fg:w="4"/><text x="82.4642%" y="191.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (4 samples, 0.06%)</title><rect x="82.2142%" y="165" width="0.0605%" height="15" fill="rgb(220,129,5)" fg:x="5436" fg:w="4"/><text x="82.4642%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (4 samples, 0.06%)</title><rect x="82.2142%" y="149" width="0.0605%" height="15" fill="rgb(242,17,10)" fg:x="5436" fg:w="4"/><text x="82.4642%" y="159.50"></text></g><g><title>colors`&lt;memmap2::Mmap as core::convert::AsRef&lt;[u8]&gt;&gt;::as_ref (1 samples, 0.02%)</title><rect x="82.6074%" y="165" width="0.0151%" height="15" fill="rgb(242,107,0)" fg:x="5462" fg:w="1"/><text x="82.8574%" y="175.50"></text></g><g><title>colors`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (1 samples, 0.02%)</title><rect x="82.6225%" y="165" width="0.0151%" height="15" fill="rgb(251,28,31)" fg:x="5463" fg:w="1"/><text x="82.8725%" y="175.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (2 samples, 0.03%)</title><rect x="82.6376%" y="165" width="0.0302%" height="15" fill="rgb(233,223,10)" fg:x="5464" fg:w="2"/><text x="82.8876%" y="175.50"></text></g><g><title>colors`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (1 samples, 0.02%)</title><rect x="82.6528%" y="149" width="0.0151%" height="15" fill="rgb(215,21,27)" fg:x="5465" fg:w="1"/><text x="82.9028%" y="159.50"></text></g><g><title>colors`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="82.6981%" y="149" width="0.0151%" height="15" fill="rgb(232,23,21)" fg:x="5468" fg:w="1"/><text x="82.9481%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.02%)</title><rect x="82.8342%" y="69" width="0.0151%" height="15" fill="rgb(244,5,23)" fg:x="5477" fg:w="1"/><text x="83.0842%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.06%)</title><rect x="82.8494%" y="69" width="0.0605%" height="15" fill="rgb(226,81,46)" fg:x="5478" fg:w="4"/><text x="83.0994%" y="79.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (19 samples, 0.29%)</title><rect x="82.7435%" y="133" width="0.2874%" height="15" fill="rgb(247,70,30)" fg:x="5471" fg:w="19"/><text x="82.9935%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (18 samples, 0.27%)</title><rect x="82.7586%" y="117" width="0.2722%" height="15" fill="rgb(212,68,19)" fg:x="5472" fg:w="18"/><text x="83.0086%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.26%)</title><rect x="82.7737%" y="101" width="0.2571%" height="15" fill="rgb(240,187,13)" fg:x="5473" fg:w="17"/><text x="83.0237%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.24%)</title><rect x="82.7889%" y="85" width="0.2420%" height="15" fill="rgb(223,113,26)" fg:x="5474" fg:w="16"/><text x="83.0389%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.12%)</title><rect x="82.9099%" y="69" width="0.1210%" height="15" fill="rgb(206,192,2)" fg:x="5482" fg:w="8"/><text x="83.1599%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.09%)</title><rect x="82.9401%" y="53" width="0.0907%" height="15" fill="rgb(241,108,4)" fg:x="5484" fg:w="6"/><text x="83.1901%" y="63.50"></text></g><g><title>colors`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (8 samples, 0.12%)</title><rect x="83.0309%" y="133" width="0.1210%" height="15" fill="rgb(247,173,49)" fg:x="5490" fg:w="8"/><text x="83.2809%" y="143.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (4 samples, 0.06%)</title><rect x="83.0913%" y="117" width="0.0605%" height="15" fill="rgb(224,114,35)" fg:x="5494" fg:w="4"/><text x="83.3413%" y="127.50"></text></g><g><title>colors`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (2 samples, 0.03%)</title><rect x="83.1216%" y="101" width="0.0302%" height="15" fill="rgb(245,159,27)" fg:x="5496" fg:w="2"/><text x="83.3716%" y="111.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (31 samples, 0.47%)</title><rect x="82.7132%" y="149" width="0.4688%" height="15" fill="rgb(245,172,44)" fg:x="5469" fg:w="31"/><text x="82.9632%" y="159.50"></text></g><g><title>colors`swash::internal::cmap::map (2 samples, 0.03%)</title><rect x="83.1518%" y="133" width="0.0302%" height="15" fill="rgb(236,23,11)" fg:x="5498" fg:w="2"/><text x="83.4018%" y="143.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (2 samples, 0.03%)</title><rect x="87.2958%" y="133" width="0.0302%" height="15" fill="rgb(205,117,38)" fg:x="5772" fg:w="2"/><text x="87.5458%" y="143.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (277 samples, 4.19%)</title><rect x="83.1821%" y="149" width="4.1894%" height="15" fill="rgb(237,72,25)" fg:x="5500" fg:w="277"/><text x="83.4321%" y="159.50">color..</text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_supported_codepoints_in_word::_{{closure}} (3 samples, 0.05%)</title><rect x="87.3261%" y="133" width="0.0454%" height="15" fill="rgb(244,70,9)" fg:x="5774" fg:w="3"/><text x="87.5761%" y="143.50"></text></g><g><title>colors`DYLD-STUB$$memcmp (5 samples, 0.08%)</title><rect x="87.3714%" y="149" width="0.0756%" height="15" fill="rgb(217,125,39)" fg:x="5777" fg:w="5"/><text x="87.6214%" y="159.50"></text></g><g><title>colors`core::str::count::char_count_general_case (1 samples, 0.02%)</title><rect x="87.4471%" y="149" width="0.0151%" height="15" fill="rgb(235,36,10)" fg:x="5782" fg:w="1"/><text x="87.6971%" y="159.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (14 samples, 0.21%)</title><rect x="87.4622%" y="149" width="0.2117%" height="15" fill="rgb(251,123,47)" fg:x="5783" fg:w="14"/><text x="87.7122%" y="159.50"></text></g><g><title>colors`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (3 samples, 0.05%)</title><rect x="87.6286%" y="133" width="0.0454%" height="15" fill="rgb(221,13,13)" fg:x="5794" fg:w="3"/><text x="87.8786%" y="143.50"></text></g><g><title>colors`cosmic_text::font::fallback::FontFallbackIter::new (2 samples, 0.03%)</title><rect x="87.6739%" y="149" width="0.0302%" height="15" fill="rgb(238,131,9)" fg:x="5797" fg:w="2"/><text x="87.9239%" y="159.50"></text></g><g><title>colors`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="87.6739%" y="133" width="0.0302%" height="15" fill="rgb(211,50,8)" fg:x="5797" fg:w="2"/><text x="87.9239%" y="143.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_matches (11 samples, 0.17%)</title><rect x="87.7042%" y="149" width="0.1664%" height="15" fill="rgb(245,182,24)" fg:x="5799" fg:w="11"/><text x="87.9542%" y="159.50"></text></g><g><title>colors`fontdb::Database::face (119 samples, 1.80%)</title><rect x="87.8705%" y="149" width="1.7998%" height="15" fill="rgb(242,14,37)" fg:x="5810" fg:w="119"/><text x="88.1205%" y="159.50">c..</text></g><g><title>colors`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (11 samples, 0.17%)</title><rect x="89.6703%" y="149" width="0.1664%" height="15" fill="rgb(246,228,12)" fg:x="5929" fg:w="11"/><text x="89.9203%" y="159.50"></text></g><g><title>colors`swash::internal::RawFont::table_range (1 samples, 0.02%)</title><rect x="89.8367%" y="133" width="0.0151%" height="15" fill="rgb(213,55,15)" fg:x="5940" fg:w="1"/><text x="90.0867%" y="143.50"></text></g><g><title>colors`swash::_&lt;impl swash::font::FontRef&gt;::charmap (19 samples, 0.29%)</title><rect x="89.8367%" y="149" width="0.2874%" height="15" fill="rgb(209,9,3)" fg:x="5940" fg:w="19"/><text x="90.0867%" y="159.50"></text></g><g><title>colors`swash::internal::cmap::subtable (18 samples, 0.27%)</title><rect x="89.8518%" y="133" width="0.2722%" height="15" fill="rgb(230,59,30)" fg:x="5941" fg:w="18"/><text x="90.1018%" y="143.50"></text></g><g><title>colors`swash::internal::RawFont::table_range (7 samples, 0.11%)</title><rect x="90.0181%" y="117" width="0.1059%" height="15" fill="rgb(209,121,21)" fg:x="5952" fg:w="7"/><text x="90.2681%" y="127.50"></text></g><g><title>colors`swash::internal::RawFont::table_range (3 samples, 0.05%)</title><rect x="90.1240%" y="133" width="0.0454%" height="15" fill="rgb(220,109,13)" fg:x="5959" fg:w="3"/><text x="90.3740%" y="143.50"></text></g><g><title>colors`swash::internal::RawFont::table_range (12 samples, 0.18%)</title><rect x="90.1845%" y="117" width="0.1815%" height="15" fill="rgb(232,18,1)" fg:x="5963" fg:w="12"/><text x="90.4345%" y="127.50"></text></g><g><title>colors`swash::metrics::MetricsProxy::from_font (14 samples, 0.21%)</title><rect x="90.1694%" y="133" width="0.2117%" height="15" fill="rgb(215,41,42)" fg:x="5962" fg:w="14"/><text x="90.4194%" y="143.50"></text></g><g><title>colors`swash::internal::parse::Stream::read (1 samples, 0.02%)</title><rect x="90.3660%" y="117" width="0.0151%" height="15" fill="rgb(224,123,36)" fg:x="5975" fg:w="1"/><text x="90.6160%" y="127.50"></text></g><g><title>colors`swash::_&lt;impl swash::font::FontRef&gt;::glyph_metrics (18 samples, 0.27%)</title><rect x="90.1240%" y="149" width="0.2722%" height="15" fill="rgb(240,125,3)" fg:x="5959" fg:w="18"/><text x="90.3740%" y="159.50"></text></g><g><title>colors`swash::metrics::MetricsProxy::materialize_glyph_metrics (1 samples, 0.02%)</title><rect x="90.3811%" y="133" width="0.0151%" height="15" fill="rgb(205,98,50)" fg:x="5976" fg:w="1"/><text x="90.6311%" y="143.50"></text></g><g><title>colors`swash::internal::RawFont::table_range (5 samples, 0.08%)</title><rect x="90.3962%" y="133" width="0.0756%" height="15" fill="rgb(205,185,37)" fg:x="5977" fg:w="5"/><text x="90.6462%" y="143.50"></text></g><g><title>colors`swash::internal::RawFont::table_range (19 samples, 0.29%)</title><rect x="90.5626%" y="117" width="0.2874%" height="15" fill="rgb(238,207,15)" fg:x="5988" fg:w="19"/><text x="90.8126%" y="127.50"></text></g><g><title>colors`swash::metrics::MetricsProxy::from_font (26 samples, 0.39%)</title><rect x="90.4719%" y="133" width="0.3932%" height="15" fill="rgb(213,199,42)" fg:x="5982" fg:w="26"/><text x="90.7219%" y="143.50"></text></g><g><title>colors`swash::internal::parse::Stream::read (1 samples, 0.02%)</title><rect x="90.8500%" y="117" width="0.0151%" height="15" fill="rgb(235,201,11)" fg:x="6007" fg:w="1"/><text x="91.1000%" y="127.50"></text></g><g><title>colors`swash::_&lt;impl swash::font::FontRef&gt;::metrics (33 samples, 0.50%)</title><rect x="90.3962%" y="149" width="0.4991%" height="15" fill="rgb(207,46,11)" fg:x="5977" fg:w="33"/><text x="90.6462%" y="159.50"></text></g><g><title>colors`swash::metrics::MetricsProxy::materialize_metrics (2 samples, 0.03%)</title><rect x="90.8651%" y="133" width="0.0302%" height="15" fill="rgb(241,35,35)" fg:x="6008" fg:w="2"/><text x="91.1151%" y="143.50"></text></g><g><title>colors`swash::metrics::MetricsProxy::from_font (2 samples, 0.03%)</title><rect x="90.8953%" y="149" width="0.0302%" height="15" fill="rgb(243,32,47)" fg:x="6010" fg:w="2"/><text x="91.1453%" y="159.50"></text></g><g><title>colors`swash::metrics::MetricsProxy::materialize_glyph_metrics (1 samples, 0.02%)</title><rect x="90.9256%" y="149" width="0.0151%" height="15" fill="rgb(247,202,23)" fg:x="6012" fg:w="1"/><text x="91.1756%" y="159.50"></text></g><g><title>colors`swash::metrics::MetricsProxy::materialize_metrics (1 samples, 0.02%)</title><rect x="90.9407%" y="149" width="0.0151%" height="15" fill="rgb(219,102,11)" fg:x="6013" fg:w="1"/><text x="91.1907%" y="159.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (564 samples, 8.53%)</title><rect x="82.6679%" y="165" width="8.5299%" height="15" fill="rgb(243,110,44)" fg:x="5466" fg:w="564"/><text x="82.9179%" y="175.50">colors`cosmi..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (16 samples, 0.24%)</title><rect x="90.9558%" y="149" width="0.2420%" height="15" fill="rgb(222,74,54)" fg:x="6014" fg:w="16"/><text x="91.2058%" y="159.50"></text></g><g><title>colors`swash::_&lt;impl swash::font::FontRef&gt;::charmap (1 samples, 0.02%)</title><rect x="91.1978%" y="165" width="0.0151%" height="15" fill="rgb(216,99,12)" fg:x="6030" fg:w="1"/><text x="91.4478%" y="175.50"></text></g><g><title>colors`swash::_&lt;impl swash::font::FontRef&gt;::metrics (1 samples, 0.02%)</title><rect x="91.2129%" y="165" width="0.0151%" height="15" fill="rgb(226,22,26)" fg:x="6031" fg:w="1"/><text x="91.4629%" y="175.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (615 samples, 9.30%)</title><rect x="81.9570%" y="197" width="9.3013%" height="15" fill="rgb(217,163,10)" fg:x="5419" fg:w="615"/><text x="82.2070%" y="207.50">colors`cosmic..</text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (594 samples, 8.98%)</title><rect x="82.2747%" y="181" width="8.9837%" height="15" fill="rgb(213,25,53)" fg:x="5440" fg:w="594"/><text x="82.5247%" y="191.50">colors`cosmic..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.03%)</title><rect x="91.2281%" y="165" width="0.0302%" height="15" fill="rgb(252,105,26)" fg:x="6032" fg:w="2"/><text x="91.4781%" y="175.50"></text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (1 samples, 0.02%)</title><rect x="91.2583%" y="197" width="0.0151%" height="15" fill="rgb(220,39,43)" fg:x="6034" fg:w="1"/><text x="91.5083%" y="207.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="91.5759%" y="165" width="0.0151%" height="15" fill="rgb(229,68,48)" fg:x="6055" fg:w="1"/><text x="91.8259%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="91.5759%" y="149" width="0.0151%" height="15" fill="rgb(252,8,32)" fg:x="6055" fg:w="1"/><text x="91.8259%" y="159.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.08%)</title><rect x="91.5759%" y="181" width="0.0756%" height="15" fill="rgb(223,20,43)" fg:x="6055" fg:w="5"/><text x="91.8259%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.06%)</title><rect x="91.5910%" y="165" width="0.0605%" height="15" fill="rgb(229,81,49)" fg:x="6056" fg:w="4"/><text x="91.8410%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.05%)</title><rect x="91.6515%" y="181" width="0.0454%" height="15" fill="rgb(236,28,36)" fg:x="6060" fg:w="3"/><text x="91.9015%" y="191.50"></text></g><g><title>colors`unicode_bidi::BidiInfo::new_with_data_source (39 samples, 0.59%)</title><rect x="91.2734%" y="197" width="0.5898%" height="15" fill="rgb(249,185,26)" fg:x="6035" fg:w="39"/><text x="91.5234%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (11 samples, 0.17%)</title><rect x="91.6969%" y="181" width="0.1664%" height="15" fill="rgb(249,174,33)" fg:x="6063" fg:w="11"/><text x="91.9469%" y="191.50"></text></g><g><title>colors`unicode_bidi::char_data::bsearch_range_value_table (5 samples, 0.08%)</title><rect x="91.8633%" y="197" width="0.0756%" height="15" fill="rgb(233,201,37)" fg:x="6074" fg:w="5"/><text x="92.1133%" y="207.50"></text></g><g><title>colors`unicode_linebreak::linebreaks (1 samples, 0.02%)</title><rect x="91.9389%" y="197" width="0.0151%" height="15" fill="rgb(221,78,26)" fg:x="6079" fg:w="1"/><text x="92.1889%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.06%)</title><rect x="91.9540%" y="197" width="0.0605%" height="15" fill="rgb(250,127,30)" fg:x="6080" fg:w="4"/><text x="92.2040%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.08%)</title><rect x="92.0145%" y="197" width="0.0756%" height="15" fill="rgb(230,49,44)" fg:x="6084" fg:w="5"/><text x="92.2645%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.14%)</title><rect x="92.0901%" y="197" width="0.1361%" height="15" fill="rgb(229,67,23)" fg:x="6089" fg:w="9"/><text x="92.3401%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="92.2263%" y="197" width="0.0151%" height="15" fill="rgb(249,83,47)" fg:x="6098" fg:w="1"/><text x="92.4763%" y="207.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (710 samples, 10.74%)</title><rect x="81.5487%" y="213" width="10.7381%" height="15" fill="rgb(215,43,3)" fg:x="5392" fg:w="710"/><text x="81.7987%" y="223.50">colors`cosmic_te..</text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.05%)</title><rect x="92.2414%" y="197" width="0.0454%" height="15" fill="rgb(238,154,13)" fg:x="6099" fg:w="3"/><text x="92.4914%" y="207.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (1 samples, 0.02%)</title><rect x="92.2868%" y="213" width="0.0151%" height="15" fill="rgb(219,56,2)" fg:x="6102" fg:w="1"/><text x="92.5368%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.03%)</title><rect x="92.3019%" y="213" width="0.0302%" height="15" fill="rgb(233,0,4)" fg:x="6103" fg:w="2"/><text x="92.5519%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="92.3321%" y="213" width="0.0151%" height="15" fill="rgb(235,30,7)" fg:x="6105" fg:w="1"/><text x="92.5821%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="92.3472%" y="213" width="0.0151%" height="15" fill="rgb(250,79,13)" fg:x="6106" fg:w="1"/><text x="92.5972%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="92.3624%" y="213" width="0.0151%" height="15" fill="rgb(211,146,34)" fg:x="6107" fg:w="1"/><text x="92.6124%" y="223.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (723 samples, 10.93%)</title><rect x="81.4580%" y="229" width="10.9347%" height="15" fill="rgb(228,22,38)" fg:x="5386" fg:w="723"/><text x="81.7080%" y="239.50">colors`cosmic_te..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="92.3775%" y="213" width="0.0151%" height="15" fill="rgb(235,168,5)" fg:x="6108" fg:w="1"/><text x="92.6275%" y="223.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer (10 samples, 0.15%)</title><rect x="92.3926%" y="229" width="0.1512%" height="15" fill="rgb(221,155,16)" fg:x="6109" fg:w="10"/><text x="92.6426%" y="239.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer::_{{closure}} (2 samples, 0.03%)</title><rect x="92.5439%" y="229" width="0.0302%" height="15" fill="rgb(215,215,53)" fg:x="6119" fg:w="2"/><text x="92.7939%" y="239.50"></text></g><g><title>colors`__rdl_dealloc (1 samples, 0.02%)</title><rect x="92.5741%" y="213" width="0.0151%" height="15" fill="rgb(223,4,10)" fg:x="6121" fg:w="1"/><text x="92.8241%" y="223.50"></text></g><g><title>colors`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="92.5892%" y="197" width="0.0151%" height="15" fill="rgb(234,103,6)" fg:x="6122" fg:w="1"/><text x="92.8392%" y="207.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.03%)</title><rect x="92.5892%" y="213" width="0.0302%" height="15" fill="rgb(227,97,0)" fg:x="6122" fg:w="2"/><text x="92.8392%" y="223.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="92.6044%" y="197" width="0.0151%" height="15" fill="rgb(234,150,53)" fg:x="6123" fg:w="1"/><text x="92.8544%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="92.6044%" y="181" width="0.0151%" height="15" fill="rgb(228,201,54)" fg:x="6123" fg:w="1"/><text x="92.8544%" y="191.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer::_{{closure}} (9 samples, 0.14%)</title><rect x="92.6195%" y="213" width="0.1361%" height="15" fill="rgb(222,22,37)" fg:x="6124" fg:w="9"/><text x="92.8695%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.08%)</title><rect x="92.7556%" y="213" width="0.0756%" height="15" fill="rgb(237,53,32)" fg:x="6133" fg:w="5"/><text x="93.0056%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (6 samples, 0.09%)</title><rect x="92.8312%" y="213" width="0.0907%" height="15" fill="rgb(233,25,53)" fg:x="6138" fg:w="6"/><text x="93.0812%" y="223.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer (24 samples, 0.36%)</title><rect x="92.5741%" y="229" width="0.3630%" height="15" fill="rgb(210,40,34)" fg:x="6121" fg:w="24"/><text x="92.8241%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="92.9220%" y="213" width="0.0151%" height="15" fill="rgb(241,220,44)" fg:x="6144" fg:w="1"/><text x="93.1720%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="92.9371%" y="229" width="0.0151%" height="15" fill="rgb(235,28,35)" fg:x="6145" fg:w="1"/><text x="93.1871%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.05%)</title><rect x="92.9522%" y="229" width="0.0454%" height="15" fill="rgb(210,56,17)" fg:x="6146" fg:w="3"/><text x="93.2022%" y="239.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (768 samples, 11.62%)</title><rect x="81.4126%" y="245" width="11.6152%" height="15" fill="rgb(224,130,29)" fg:x="5383" fg:w="768"/><text x="81.6626%" y="255.50">colors`cosmic_tex..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.03%)</title><rect x="92.9976%" y="229" width="0.0302%" height="15" fill="rgb(235,212,8)" fg:x="6149" fg:w="2"/><text x="93.2476%" y="239.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (771 samples, 11.66%)</title><rect x="81.3975%" y="261" width="11.6606%" height="15" fill="rgb(223,33,50)" fg:x="5382" fg:w="771"/><text x="81.6475%" y="271.50">colors`cosmic_tex..</text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (2 samples, 0.03%)</title><rect x="93.0278%" y="245" width="0.0302%" height="15" fill="rgb(219,149,13)" fg:x="6151" fg:w="2"/><text x="93.2778%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.05%)</title><rect x="93.0581%" y="261" width="0.0454%" height="15" fill="rgb(250,156,29)" fg:x="6153" fg:w="3"/><text x="93.3081%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.08%)</title><rect x="93.1034%" y="261" width="0.0756%" height="15" fill="rgb(216,193,19)" fg:x="6156" fg:w="5"/><text x="93.3534%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.05%)</title><rect x="93.1791%" y="261" width="0.0454%" height="15" fill="rgb(216,135,14)" fg:x="6161" fg:w="3"/><text x="93.4291%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="93.2244%" y="261" width="0.0151%" height="15" fill="rgb(241,47,5)" fg:x="6164" fg:w="1"/><text x="93.4744%" y="271.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (828 samples, 12.52%)</title><rect x="80.7320%" y="277" width="12.5227%" height="15" fill="rgb(233,42,35)" fg:x="5338" fg:w="828"/><text x="80.9820%" y="287.50">colors`cosmic_text:..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="93.2396%" y="261" width="0.0151%" height="15" fill="rgb(231,13,6)" fg:x="6165" fg:w="1"/><text x="93.4896%" y="271.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (3 samples, 0.05%)</title><rect x="93.2547%" y="277" width="0.0454%" height="15" fill="rgb(207,181,40)" fg:x="6166" fg:w="3"/><text x="93.5047%" y="287.50"></text></g><g><title>colors`cosmic_text::layout::LayoutGlyph::physical (2 samples, 0.03%)</title><rect x="93.3001%" y="277" width="0.0302%" height="15" fill="rgb(254,173,49)" fg:x="6169" fg:w="2"/><text x="93.5501%" y="287.50"></text></g><g><title>colors`cosmic_text::swash::SwashCache::with_pixels (2 samples, 0.03%)</title><rect x="93.3303%" y="277" width="0.0302%" height="15" fill="rgb(221,1,38)" fg:x="6171" fg:w="2"/><text x="93.5803%" y="287.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (1 samples, 0.02%)</title><rect x="93.4211%" y="229" width="0.0151%" height="15" fill="rgb(206,124,46)" fg:x="6177" fg:w="1"/><text x="93.6711%" y="239.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (3 samples, 0.05%)</title><rect x="93.4362%" y="229" width="0.0454%" height="15" fill="rgb(249,21,11)" fg:x="6178" fg:w="3"/><text x="93.6862%" y="239.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (2 samples, 0.03%)</title><rect x="93.5723%" y="213" width="0.0302%" height="15" fill="rgb(222,201,40)" fg:x="6187" fg:w="2"/><text x="93.8223%" y="223.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (39 samples, 0.59%)</title><rect x="93.6025%" y="213" width="0.5898%" height="15" fill="rgb(235,61,29)" fg:x="6189" fg:w="39"/><text x="93.8525%" y="223.50"></text></g><g><title>colors`tiny_skia::shaders::pattern::Pattern::push_stages (23 samples, 0.35%)</title><rect x="94.1924%" y="213" width="0.3479%" height="15" fill="rgb(219,207,3)" fg:x="6228" fg:w="23"/><text x="94.4424%" y="223.50"></text></g><g><title>colors`tiny_skia_path::transform::Transform::invert (2 samples, 0.03%)</title><rect x="94.5402%" y="213" width="0.0302%" height="15" fill="rgb(222,56,46)" fg:x="6251" fg:w="2"/><text x="94.7902%" y="223.50"></text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (87 samples, 1.32%)</title><rect x="93.4815%" y="229" width="1.3158%" height="15" fill="rgb(239,76,54)" fg:x="6181" fg:w="87"/><text x="93.7315%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.23%)</title><rect x="94.5705%" y="213" width="0.2269%" height="15" fill="rgb(231,124,27)" fg:x="6253" fg:w="15"/><text x="94.8205%" y="223.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::seed_shader (6 samples, 0.09%)</title><rect x="94.8578%" y="197" width="0.0907%" height="15" fill="rgb(249,195,6)" fg:x="6272" fg:w="6"/><text x="95.1078%" y="207.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::source_over_rgba_tail (1 samples, 0.02%)</title><rect x="94.9486%" y="197" width="0.0151%" height="15" fill="rgb(237,174,47)" fg:x="6278" fg:w="1"/><text x="95.1986%" y="207.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::gather (16 samples, 0.24%)</title><rect x="95.0544%" y="181" width="0.2420%" height="15" fill="rgb(206,201,31)" fg:x="6285" fg:w="16"/><text x="95.3044%" y="191.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::source_over_rgba_tail (100 samples, 1.51%)</title><rect x="95.2964%" y="181" width="1.5124%" height="15" fill="rgb(231,57,52)" fg:x="6301" fg:w="100"/><text x="95.5464%" y="191.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::start (130 samples, 1.97%)</title><rect x="94.9637%" y="197" width="1.9661%" height="15" fill="rgb(248,177,22)" fg:x="6279" fg:w="130"/><text x="95.2137%" y="207.50">c..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.12%)</title><rect x="96.8088%" y="181" width="0.1210%" height="15" fill="rgb(215,211,37)" fg:x="6401" fg:w="8"/><text x="97.0588%" y="191.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (146 samples, 2.21%)</title><rect x="94.8427%" y="213" width="2.2081%" height="15" fill="rgb(241,128,51)" fg:x="6271" fg:w="146"/><text x="95.0927%" y="223.50">c..</text></g><g><title>colors`tiny_skia::pipeline::highp::transform (8 samples, 0.12%)</title><rect x="96.9298%" y="197" width="0.1210%" height="15" fill="rgb(227,165,31)" fg:x="6409" fg:w="8"/><text x="97.1798%" y="207.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (150 samples, 2.27%)</title><rect x="94.7973%" y="229" width="2.2686%" height="15" fill="rgb(228,167,24)" fg:x="6268" fg:w="150"/><text x="95.0473%" y="239.50">c..</text></g><g><title>colors`tiny_skia::pipeline::highp::start (1 samples, 0.02%)</title><rect x="97.0508%" y="213" width="0.0151%" height="15" fill="rgb(228,143,12)" fg:x="6417" fg:w="1"/><text x="97.3008%" y="223.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::from_xywh (1 samples, 0.02%)</title><rect x="97.0659%" y="229" width="0.0151%" height="15" fill="rgb(249,149,8)" fg:x="6418" fg:w="1"/><text x="97.3159%" y="239.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::intersect (1 samples, 0.02%)</title><rect x="97.0811%" y="229" width="0.0151%" height="15" fill="rgb(243,35,44)" fg:x="6419" fg:w="1"/><text x="97.3311%" y="239.50"></text></g><g><title>colors`tiny_skia_path::rect::Rect::round (2 samples, 0.03%)</title><rect x="97.0962%" y="229" width="0.0302%" height="15" fill="rgb(246,89,9)" fg:x="6420" fg:w="2"/><text x="97.3462%" y="239.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (266 samples, 4.02%)</title><rect x="93.3908%" y="245" width="4.0230%" height="15" fill="rgb(233,213,13)" fg:x="6175" fg:w="266"/><text x="93.6408%" y="255.50">colo..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.29%)</title><rect x="97.1264%" y="229" width="0.2874%" height="15" fill="rgb(233,141,41)" fg:x="6422" fg:w="19"/><text x="97.3764%" y="239.50"></text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (1 samples, 0.02%)</title><rect x="97.4138%" y="245" width="0.0151%" height="15" fill="rgb(239,167,4)" fg:x="6441" fg:w="1"/><text x="97.6638%" y="255.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (1 samples, 0.02%)</title><rect x="97.4289%" y="245" width="0.0151%" height="15" fill="rgb(209,217,16)" fg:x="6442" fg:w="1"/><text x="97.6789%" y="255.50"></text></g><g><title>colors`tiny_skia_path::transform::Transform::is_identity (1 samples, 0.02%)</title><rect x="97.4440%" y="245" width="0.0151%" height="15" fill="rgb(219,88,35)" fg:x="6443" fg:w="1"/><text x="97.6940%" y="255.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::draw_pixmap (281 samples, 4.25%)</title><rect x="93.3606%" y="261" width="4.2498%" height="15" fill="rgb(220,193,23)" fg:x="6173" fg:w="281"/><text x="93.6106%" y="271.50">color..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.15%)</title><rect x="97.4592%" y="245" width="0.1512%" height="15" fill="rgb(230,90,52)" fg:x="6444" fg:w="10"/><text x="97.7092%" y="255.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (1 samples, 0.02%)</title><rect x="97.6104%" y="261" width="0.0151%" height="15" fill="rgb(252,106,19)" fg:x="6454" fg:w="1"/><text x="97.8604%" y="271.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::draw_pixmap (283 samples, 4.28%)</title><rect x="93.3606%" y="277" width="4.2801%" height="15" fill="rgb(206,74,20)" fg:x="6173" fg:w="283"/><text x="93.6106%" y="287.50">color..</text></g><g><title>colors`tiny_skia_path::rect::IntRect::to_rect (1 samples, 0.02%)</title><rect x="97.6255%" y="261" width="0.0151%" height="15" fill="rgb(230,138,44)" fg:x="6455" fg:w="1"/><text x="97.8755%" y="271.50"></text></g><g><title>colors`tiny_skia::pixmap::Pixmap::fill (3 samples, 0.05%)</title><rect x="97.6407%" y="277" width="0.0454%" height="15" fill="rgb(235,182,43)" fg:x="6456" fg:w="3"/><text x="97.8907%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="97.6860%" y="277" width="0.0151%" height="15" fill="rgb(242,16,51)" fg:x="6459" fg:w="1"/><text x="97.9360%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.05%)</title><rect x="97.7011%" y="277" width="0.0454%" height="15" fill="rgb(248,9,4)" fg:x="6460" fg:w="3"/><text x="97.9511%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.03%)</title><rect x="97.7465%" y="277" width="0.0302%" height="15" fill="rgb(210,31,22)" fg:x="6463" fg:w="2"/><text x="97.9965%" y="287.50"></text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::draw_cell (6,451 samples, 97.57%)</title><rect x="0.2420%" y="293" width="97.5650%" height="15" fill="rgb(239,54,39)" fg:x="16" fg:w="6451"/><text x="0.4920%" y="303.50">colors`soft_ratatui::soft_backend::SoftBackend::draw_cell</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.03%)</title><rect x="97.7768%" y="277" width="0.0302%" height="15" fill="rgb(230,99,41)" fg:x="6465" fg:w="2"/><text x="98.0268%" y="287.50"></text></g><g><title>colors`std::fs::write::inner (5 samples, 0.08%)</title><rect x="97.8070%" y="293" width="0.0756%" height="15" fill="rgb(253,106,12)" fg:x="6467" fg:w="5"/><text x="98.0570%" y="303.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (5 samples, 0.08%)</title><rect x="97.8070%" y="277" width="0.0756%" height="15" fill="rgb(213,46,41)" fg:x="6467" fg:w="5"/><text x="98.0570%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__open (5 samples, 0.08%)</title><rect x="97.8070%" y="261" width="0.0756%" height="15" fill="rgb(215,133,35)" fg:x="6467" fg:w="5"/><text x="98.0570%" y="271.50"></text></g><g><title>colors`png::encoder::Encoder&lt;W&gt;::write_header (1 samples, 0.02%)</title><rect x="98.0339%" y="277" width="0.0151%" height="15" fill="rgb(213,28,5)" fg:x="6482" fg:w="1"/><text x="98.2839%" y="287.50"></text></g><g><title>colors`png::common::Info::encode (1 samples, 0.02%)</title><rect x="98.0339%" y="261" width="0.0151%" height="15" fill="rgb(215,77,49)" fg:x="6482" fg:w="1"/><text x="98.2839%" y="271.50"></text></g><g><title>colors`png::encoder::write_chunk (1 samples, 0.02%)</title><rect x="98.0339%" y="245" width="0.0151%" height="15" fill="rgb(248,100,22)" fg:x="6482" fg:w="1"/><text x="98.2839%" y="255.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="98.0339%" y="229" width="0.0151%" height="15" fill="rgb(208,67,9)" fg:x="6482" fg:w="1"/><text x="98.2839%" y="239.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="98.0339%" y="213" width="0.0151%" height="15" fill="rgb(219,133,21)" fg:x="6482" fg:w="1"/><text x="98.2839%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="98.0339%" y="197" width="0.0151%" height="15" fill="rgb(246,46,29)" fg:x="6482" fg:w="1"/><text x="98.2839%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="98.0339%" y="181" width="0.0151%" height="15" fill="rgb(246,185,52)" fg:x="6482" fg:w="1"/><text x="98.2839%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="98.0339%" y="165" width="0.0151%" height="15" fill="rgb(252,136,11)" fg:x="6482" fg:w="1"/><text x="98.2839%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="98.0339%" y="149" width="0.0151%" height="15" fill="rgb(219,138,53)" fg:x="6482" fg:w="1"/><text x="98.2839%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="98.0339%" y="133" width="0.0151%" height="15" fill="rgb(211,51,23)" fg:x="6482" fg:w="1"/><text x="98.2839%" y="143.50"></text></g><g><title>colors`crc32fast::Hasher::update (2 samples, 0.03%)</title><rect x="98.0490%" y="261" width="0.0302%" height="15" fill="rgb(247,221,28)" fg:x="6483" fg:w="2"/><text x="98.2990%" y="271.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (11 samples, 0.17%)</title><rect x="98.6540%" y="245" width="0.1664%" height="15" fill="rgb(251,222,45)" fg:x="6523" fg:w="11"/><text x="98.9040%" y="255.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_data (74 samples, 1.12%)</title><rect x="98.0792%" y="261" width="1.1192%" height="15" fill="rgb(217,162,53)" fg:x="6485" fg:w="74"/><text x="98.3292%" y="271.50"></text></g><g><title>colors`simd_adler32::imp::scalar::update (25 samples, 0.38%)</title><rect x="98.8203%" y="245" width="0.3781%" height="15" fill="rgb(229,93,14)" fg:x="6534" fg:w="25"/><text x="99.0703%" y="255.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (8 samples, 0.12%)</title><rect x="99.1984%" y="261" width="0.1210%" height="15" fill="rgb(209,67,49)" fg:x="6559" fg:w="8"/><text x="99.4484%" y="271.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="99.3194%" y="245" width="0.0151%" height="15" fill="rgb(213,87,29)" fg:x="6567" fg:w="1"/><text x="99.5694%" y="255.50"></text></g><g><title>colors`tiny_skia::pixmap::PixmapRef::encode_png (97 samples, 1.47%)</title><rect x="97.8826%" y="293" width="1.4670%" height="15" fill="rgb(205,151,52)" fg:x="6472" fg:w="97"/><text x="98.1326%" y="303.50"></text></g><g><title>colors`png::encoder::Writer&lt;W&gt;::write_image_data (86 samples, 1.30%)</title><rect x="98.0490%" y="277" width="1.3007%" height="15" fill="rgb(253,215,39)" fg:x="6483" fg:w="86"/><text x="98.2990%" y="287.50"></text></g><g><title>colors`png::filter::filter (2 samples, 0.03%)</title><rect x="99.3194%" y="261" width="0.0302%" height="15" fill="rgb(221,220,41)" fg:x="6567" fg:w="2"/><text x="99.5694%" y="271.50"></text></g><g><title>colors`png::filter::filter_internal (1 samples, 0.02%)</title><rect x="99.3345%" y="245" width="0.0151%" height="15" fill="rgb(218,133,21)" fg:x="6568" fg:w="1"/><text x="99.5845%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`close (2 samples, 0.03%)</title><rect x="99.3497%" y="293" width="0.0302%" height="15" fill="rgb(221,193,43)" fg:x="6569" fg:w="2"/><text x="99.5997%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.02%)</title><rect x="99.3799%" y="293" width="0.0151%" height="15" fill="rgb(240,128,52)" fg:x="6571" fg:w="1"/><text x="99.6299%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="99.3950%" y="293" width="0.0151%" height="15" fill="rgb(253,114,12)" fg:x="6572" fg:w="1"/><text x="99.6450%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="99.4102%" y="293" width="0.0151%" height="15" fill="rgb(215,223,47)" fg:x="6573" fg:w="1"/><text x="99.6602%" y="303.50"></text></g><g><title>colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw (6,564 samples, 99.27%)</title><rect x="0.1664%" y="309" width="99.2740%" height="15" fill="rgb(248,225,23)" fg:x="11" fg:w="6564"/><text x="0.4164%" y="319.50">colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="99.4253%" y="293" width="0.0151%" height="15" fill="rgb(250,108,0)" fg:x="6574" fg:w="1"/><text x="99.6753%" y="303.50"></text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (3 samples, 0.05%)</title><rect x="99.4404%" y="309" width="0.0454%" height="15" fill="rgb(228,208,7)" fg:x="6575" fg:w="3"/><text x="99.6904%" y="319.50"></text></g><g><title>colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw (6,586 samples, 99.61%)</title><rect x="0.0000%" y="325" width="99.6068%" height="15" fill="rgb(244,45,10)" fg:x="0" fg:w="6586"/><text x="0.2500%" y="335.50">colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw</text></g><g><title>colors`ratatui::buffer::buffer::Buffer::diff (8 samples, 0.12%)</title><rect x="99.4858%" y="309" width="0.1210%" height="15" fill="rgb(207,125,25)" fg:x="6578" fg:w="8"/><text x="99.7358%" y="319.50"></text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (7 samples, 0.11%)</title><rect x="99.5009%" y="293" width="0.1059%" height="15" fill="rgb(210,195,18)" fg:x="6579" fg:w="7"/><text x="99.7509%" y="303.50"></text></g><g><title>colors`unicode_width::tables::lookup_width (4 samples, 0.06%)</title><rect x="99.5463%" y="277" width="0.0605%" height="15" fill="rgb(249,80,12)" fg:x="6582" fg:w="4"/><text x="99.7963%" y="287.50"></text></g><g><title>colors`__rdl_alloc (1 samples, 0.02%)</title><rect x="99.6068%" y="277" width="0.0151%" height="15" fill="rgb(221,65,9)" fg:x="6586" fg:w="1"/><text x="99.8568%" y="287.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="99.6370%" y="149" width="0.0151%" height="15" fill="rgb(235,49,36)" fg:x="6588" fg:w="1"/><text x="99.8870%" y="159.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="99.6370%" y="133" width="0.0151%" height="15" fill="rgb(225,32,20)" fg:x="6588" fg:w="1"/><text x="99.8870%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.6370%" y="117" width="0.0151%" height="15" fill="rgb(215,141,46)" fg:x="6588" fg:w="1"/><text x="99.8870%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.6370%" y="101" width="0.0151%" height="15" fill="rgb(250,160,47)" fg:x="6588" fg:w="1"/><text x="99.8870%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="99.6370%" y="85" width="0.0151%" height="15" fill="rgb(216,222,40)" fg:x="6588" fg:w="1"/><text x="99.8870%" y="95.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.08%)</title><rect x="99.6521%" y="149" width="0.0756%" height="15" fill="rgb(234,217,39)" fg:x="6589" fg:w="5"/><text x="99.9021%" y="159.50"></text></g><g><title>colors`DYLD-STUB$$memcmp (1 samples, 0.02%)</title><rect x="99.7278%" y="149" width="0.0151%" height="15" fill="rgb(207,178,40)" fg:x="6594" fg:w="1"/><text x="99.9778%" y="159.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_matches (1 samples, 0.02%)</title><rect x="99.7429%" y="149" width="0.0151%" height="15" fill="rgb(221,136,13)" fg:x="6595" fg:w="1"/><text x="99.9929%" y="159.50"></text></g><g><title>colors`fontdb::Database::face (1 samples, 0.02%)</title><rect x="99.7580%" y="149" width="0.0151%" height="15" fill="rgb(249,199,10)" fg:x="6596" fg:w="1"/><text x="100.0080%" y="159.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (11 samples, 0.17%)</title><rect x="99.6219%" y="277" width="0.1664%" height="15" fill="rgb(249,222,13)" fg:x="6587" fg:w="11"/><text x="99.8719%" y="287.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (11 samples, 0.17%)</title><rect x="99.6219%" y="261" width="0.1664%" height="15" fill="rgb(244,185,38)" fg:x="6587" fg:w="11"/><text x="99.8719%" y="271.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (11 samples, 0.17%)</title><rect x="99.6219%" y="245" width="0.1664%" height="15" fill="rgb(236,202,9)" fg:x="6587" fg:w="11"/><text x="99.8719%" y="255.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (11 samples, 0.17%)</title><rect x="99.6219%" y="229" width="0.1664%" height="15" fill="rgb(250,229,37)" fg:x="6587" fg:w="11"/><text x="99.8719%" y="239.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (11 samples, 0.17%)</title><rect x="99.6219%" y="213" width="0.1664%" height="15" fill="rgb(206,174,23)" fg:x="6587" fg:w="11"/><text x="99.8719%" y="223.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (11 samples, 0.17%)</title><rect x="99.6219%" y="197" width="0.1664%" height="15" fill="rgb(211,33,43)" fg:x="6587" fg:w="11"/><text x="99.8719%" y="207.50"></text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (11 samples, 0.17%)</title><rect x="99.6219%" y="181" width="0.1664%" height="15" fill="rgb(245,58,50)" fg:x="6587" fg:w="11"/><text x="99.8719%" y="191.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (10 samples, 0.15%)</title><rect x="99.6370%" y="165" width="0.1512%" height="15" fill="rgb(244,68,36)" fg:x="6588" fg:w="10"/><text x="99.8870%" y="175.50"></text></g><g><title>colors`swash::_&lt;impl swash::font::FontRef&gt;::metrics (1 samples, 0.02%)</title><rect x="99.7731%" y="149" width="0.0151%" height="15" fill="rgb(232,229,15)" fg:x="6597" fg:w="1"/><text x="100.0231%" y="159.50"></text></g><g><title>colors`swash::metrics::MetricsProxy::from_font (1 samples, 0.02%)</title><rect x="99.7731%" y="133" width="0.0151%" height="15" fill="rgb(254,30,23)" fg:x="6597" fg:w="1"/><text x="100.0231%" y="143.50"></text></g><g><title>colors`swash::internal::RawFont::table_range (1 samples, 0.02%)</title><rect x="99.7731%" y="117" width="0.0151%" height="15" fill="rgb(235,160,14)" fg:x="6597" fg:w="1"/><text x="100.0231%" y="127.50"></text></g><g><title>colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::clear (13 samples, 0.20%)</title><rect x="99.6068%" y="309" width="0.1966%" height="15" fill="rgb(212,155,44)" fg:x="6586" fg:w="13"/><text x="99.8568%" y="319.50"></text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::draw_cell (13 samples, 0.20%)</title><rect x="99.6068%" y="293" width="0.1966%" height="15" fill="rgb(226,2,50)" fg:x="6586" fg:w="13"/><text x="99.8568%" y="303.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::draw_pixmap (1 samples, 0.02%)</title><rect x="99.7883%" y="277" width="0.0151%" height="15" fill="rgb(234,177,6)" fg:x="6598" fg:w="1"/><text x="100.0383%" y="287.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::draw_pixmap (1 samples, 0.02%)</title><rect x="99.7883%" y="261" width="0.0151%" height="15" fill="rgb(217,24,9)" fg:x="6598" fg:w="1"/><text x="100.0383%" y="271.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (1 samples, 0.02%)</title><rect x="99.7883%" y="245" width="0.0151%" height="15" fill="rgb(220,13,46)" fg:x="6598" fg:w="1"/><text x="100.0383%" y="255.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (1 samples, 0.02%)</title><rect x="99.7883%" y="229" width="0.0151%" height="15" fill="rgb(239,221,27)" fg:x="6598" fg:w="1"/><text x="100.0383%" y="239.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (1 samples, 0.02%)</title><rect x="99.7883%" y="213" width="0.0151%" height="15" fill="rgb(222,198,25)" fg:x="6598" fg:w="1"/><text x="100.0383%" y="223.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::start (1 samples, 0.02%)</title><rect x="99.7883%" y="197" width="0.0151%" height="15" fill="rgb(211,99,13)" fg:x="6598" fg:w="1"/><text x="100.0383%" y="207.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::source_over_rgba_tail (1 samples, 0.02%)</title><rect x="99.7883%" y="181" width="0.0151%" height="15" fill="rgb(232,111,31)" fg:x="6598" fg:w="1"/><text x="100.0383%" y="191.50"></text></g><g><title>colors`cosmic_text::font::Font::new (1 samples, 0.02%)</title><rect x="99.8034%" y="149" width="0.0151%" height="15" fill="rgb(245,82,37)" fg:x="6599" fg:w="1"/><text x="100.0534%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::from_slice (1 samples, 0.02%)</title><rect x="99.8034%" y="133" width="0.0151%" height="15" fill="rgb(227,149,46)" fg:x="6599" fg:w="1"/><text x="100.0534%" y="143.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::from_face (1 samples, 0.02%)</title><rect x="99.8034%" y="117" width="0.0151%" height="15" fill="rgb(218,36,50)" fg:x="6599" fg:w="1"/><text x="100.0534%" y="127.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="99.8034%" y="101" width="0.0151%" height="15" fill="rgb(226,80,48)" fg:x="6599" fg:w="1"/><text x="100.0534%" y="111.50"></text></g><g><title>colors`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.02%)</title><rect x="99.8034%" y="85" width="0.0151%" height="15" fill="rgb(238,224,15)" fg:x="6599" fg:w="1"/><text x="100.0534%" y="95.50"></text></g><g><title>colors`rustybuzz::hb::glyph_set::GlyphSetBuilder::finish (1 samples, 0.02%)</title><rect x="99.8034%" y="69" width="0.0151%" height="15" fill="rgb(241,136,10)" fg:x="6599" fg:w="1"/><text x="100.0534%" y="79.50"></text></g><g><title>colors`core::slice::sort::stable::driftsort_main (1 samples, 0.02%)</title><rect x="99.8034%" y="53" width="0.0151%" height="15" fill="rgb(208,32,45)" fg:x="6599" fg:w="1"/><text x="100.0534%" y="63.50"></text></g><g><title>colors`core::slice::sort::stable::drift::sort (1 samples, 0.02%)</title><rect x="99.8034%" y="37" width="0.0151%" height="15" fill="rgb(207,135,9)" fg:x="6599" fg:w="1"/><text x="100.0534%" y="47.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (2 samples, 0.03%)</title><rect x="99.8034%" y="309" width="0.0302%" height="15" fill="rgb(206,86,44)" fg:x="6599" fg:w="2"/><text x="100.0534%" y="319.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (2 samples, 0.03%)</title><rect x="99.8034%" y="293" width="0.0302%" height="15" fill="rgb(245,177,15)" fg:x="6599" fg:w="2"/><text x="100.0534%" y="303.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (2 samples, 0.03%)</title><rect x="99.8034%" y="277" width="0.0302%" height="15" fill="rgb(206,64,50)" fg:x="6599" fg:w="2"/><text x="100.0534%" y="287.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (2 samples, 0.03%)</title><rect x="99.8034%" y="261" width="0.0302%" height="15" fill="rgb(234,36,40)" fg:x="6599" fg:w="2"/><text x="100.0534%" y="271.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (2 samples, 0.03%)</title><rect x="99.8034%" y="245" width="0.0302%" height="15" fill="rgb(213,64,8)" fg:x="6599" fg:w="2"/><text x="100.0534%" y="255.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (2 samples, 0.03%)</title><rect x="99.8034%" y="229" width="0.0302%" height="15" fill="rgb(210,75,36)" fg:x="6599" fg:w="2"/><text x="100.0534%" y="239.50"></text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (2 samples, 0.03%)</title><rect x="99.8034%" y="213" width="0.0302%" height="15" fill="rgb(229,88,21)" fg:x="6599" fg:w="2"/><text x="100.0534%" y="223.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (2 samples, 0.03%)</title><rect x="99.8034%" y="197" width="0.0302%" height="15" fill="rgb(252,204,47)" fg:x="6599" fg:w="2"/><text x="100.0534%" y="207.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="99.8034%" y="181" width="0.0302%" height="15" fill="rgb(208,77,27)" fg:x="6599" fg:w="2"/><text x="100.0534%" y="191.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (2 samples, 0.03%)</title><rect x="99.8034%" y="165" width="0.0302%" height="15" fill="rgb(221,76,26)" fg:x="6599" fg:w="2"/><text x="100.0534%" y="175.50"></text></g><g><title>colors`fontdb::Database::make_shared_face_data (1 samples, 0.02%)</title><rect x="99.8185%" y="149" width="0.0151%" height="15" fill="rgb(225,139,18)" fg:x="6600" fg:w="1"/><text x="100.0685%" y="159.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (1 samples, 0.02%)</title><rect x="99.8185%" y="133" width="0.0151%" height="15" fill="rgb(230,137,11)" fg:x="6600" fg:w="1"/><text x="100.0685%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.02%)</title><rect x="99.8185%" y="117" width="0.0151%" height="15" fill="rgb(212,28,1)" fg:x="6600" fg:w="1"/><text x="100.0685%" y="127.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_locale (1 samples, 0.02%)</title><rect x="99.8336%" y="293" width="0.0151%" height="15" fill="rgb(248,164,17)" fg:x="6601" fg:w="1"/><text x="100.0836%" y="303.50"></text></g><g><title>colors`sys_locale::get_locale (1 samples, 0.02%)</title><rect x="99.8336%" y="277" width="0.0151%" height="15" fill="rgb(222,171,42)" fg:x="6601" fg:w="1"/><text x="100.0836%" y="287.50"></text></g><g><title>CoreFoundation`CFLocaleCopyPreferredLanguages (1 samples, 0.02%)</title><rect x="99.8336%" y="261" width="0.0151%" height="15" fill="rgb(243,84,45)" fg:x="6601" fg:w="1"/><text x="100.0836%" y="271.50"></text></g><g><title>Foundation`@objc static NSLocale._preferredLanguagesForCurrentUser(_:) (1 samples, 0.02%)</title><rect x="99.8336%" y="245" width="0.0151%" height="15" fill="rgb(252,49,23)" fg:x="6601" fg:w="1"/><text x="100.0836%" y="255.50"></text></g><g><title>Foundation`LocaleCache.preferredLanguages(forCurrentUser:) (1 samples, 0.02%)</title><rect x="99.8336%" y="229" width="0.0151%" height="15" fill="rgb(215,19,7)" fg:x="6601" fg:w="1"/><text x="100.0836%" y="239.50"></text></g><g><title>CoreFoundation`_CFPreferencesCopyAppValueWithContainerAndConfiguration (1 samples, 0.02%)</title><rect x="99.8336%" y="213" width="0.0151%" height="15" fill="rgb(238,81,41)" fg:x="6601" fg:w="1"/><text x="100.0836%" y="223.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:] (1 samples, 0.02%)</title><rect x="99.8336%" y="197" width="0.0151%" height="15" fill="rgb(210,199,37)" fg:x="6601" fg:w="1"/><text x="100.0836%" y="207.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchListForIdentifier:container:cloudConfigurationURL:perform:] (1 samples, 0.02%)</title><rect x="99.8336%" y="181" width="0.0151%" height="15" fill="rgb(244,192,49)" fg:x="6601" fg:w="1"/><text x="100.0836%" y="191.50"></text></g><g><title>CoreFoundation`_CFPrefsGetCacheStringForBundleID (1 samples, 0.02%)</title><rect x="99.8336%" y="165" width="0.0151%" height="15" fill="rgb(226,211,11)" fg:x="6601" fg:w="1"/><text x="100.0836%" y="175.50"></text></g><g><title>CoreFoundation`CFBundleGetMainBundle (1 samples, 0.02%)</title><rect x="99.8336%" y="149" width="0.0151%" height="15" fill="rgb(236,162,54)" fg:x="6601" fg:w="1"/><text x="100.0836%" y="159.50"></text></g><g><title>CoreFoundation`_CFBundleCopyBundleURLForExecutableURL (1 samples, 0.02%)</title><rect x="99.8336%" y="133" width="0.0151%" height="15" fill="rgb(220,229,9)" fg:x="6601" fg:w="1"/><text x="100.0836%" y="143.50"></text></g><g><title>CoreFoundation`CFURLCopyFileSystemPath (1 samples, 0.02%)</title><rect x="99.8336%" y="117" width="0.0151%" height="15" fill="rgb(250,87,22)" fg:x="6601" fg:w="1"/><text x="100.0836%" y="127.50"></text></g><g><title>CoreFoundation`CFURLCreateStringWithFileSystemPath (1 samples, 0.02%)</title><rect x="99.8336%" y="101" width="0.0151%" height="15" fill="rgb(239,43,17)" fg:x="6601" fg:w="1"/><text x="100.0836%" y="111.50"></text></g><g><title>colors`fontdb::parse_face_info (1 samples, 0.02%)</title><rect x="99.8488%" y="245" width="0.0151%" height="15" fill="rgb(231,177,25)" fg:x="6602" fg:w="1"/><text x="100.0988%" y="255.50"></text></g><g><title>colors`fontdb::collect_families (1 samples, 0.02%)</title><rect x="99.8488%" y="229" width="0.0151%" height="15" fill="rgb(219,179,1)" fg:x="6602" fg:w="1"/><text x="100.0988%" y="239.50"></text></g><g><title>colors`fontdb::name_to_unicode (1 samples, 0.02%)</title><rect x="99.8488%" y="213" width="0.0151%" height="15" fill="rgb(238,219,53)" fg:x="6602" fg:w="1"/><text x="100.0988%" y="223.50"></text></g><g><title>colors`alloc::string::String::from_utf16 (1 samples, 0.02%)</title><rect x="99.8488%" y="197" width="0.0151%" height="15" fill="rgb(232,167,36)" fg:x="6602" fg:w="1"/><text x="100.0988%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="99.8488%" y="181" width="0.0151%" height="15" fill="rgb(244,19,51)" fg:x="6602" fg:w="1"/><text x="100.0988%" y="191.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (2 samples, 0.03%)</title><rect x="99.8488%" y="261" width="0.0302%" height="15" fill="rgb(224,6,22)" fg:x="6602" fg:w="2"/><text x="100.0988%" y="271.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (1 samples, 0.02%)</title><rect x="99.8639%" y="245" width="0.0151%" height="15" fill="rgb(224,145,5)" fg:x="6603" fg:w="1"/><text x="100.1139%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.02%)</title><rect x="99.8639%" y="229" width="0.0151%" height="15" fill="rgb(234,130,49)" fg:x="6603" fg:w="1"/><text x="100.1139%" y="239.50"></text></g><g><title>colors`fontdb::parse_face_info (1 samples, 0.02%)</title><rect x="99.8790%" y="229" width="0.0151%" height="15" fill="rgb(254,6,2)" fg:x="6604" fg:w="1"/><text x="100.1290%" y="239.50"></text></g><g><title>colors`fontdb::name_to_unicode (1 samples, 0.02%)</title><rect x="99.8790%" y="213" width="0.0151%" height="15" fill="rgb(208,96,46)" fg:x="6604" fg:w="1"/><text x="100.1290%" y="223.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.02%)</title><rect x="99.8790%" y="197" width="0.0151%" height="15" fill="rgb(239,3,39)" fg:x="6604" fg:w="1"/><text x="100.1290%" y="207.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.8790%" y="181" width="0.0151%" height="15" fill="rgb(233,210,1)" fg:x="6604" fg:w="1"/><text x="100.1290%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="99.8790%" y="165" width="0.0151%" height="15" fill="rgb(244,137,37)" fg:x="6604" fg:w="1"/><text x="100.1290%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="99.8790%" y="149" width="0.0151%" height="15" fill="rgb(240,136,2)" fg:x="6604" fg:w="1"/><text x="100.1290%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="99.8790%" y="133" width="0.0151%" height="15" fill="rgb(239,18,37)" fg:x="6604" fg:w="1"/><text x="100.1290%" y="143.50"></text></g><g><title>colors`memmap2::os::file_len (1 samples, 0.02%)</title><rect x="99.8941%" y="229" width="0.0151%" height="15" fill="rgb(218,185,22)" fg:x="6605" fg:w="1"/><text x="100.1441%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`fstat (1 samples, 0.02%)</title><rect x="99.8941%" y="213" width="0.0151%" height="15" fill="rgb(225,218,4)" fg:x="6605" fg:w="1"/><text x="100.1441%" y="223.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (6 samples, 0.09%)</title><rect x="99.8790%" y="245" width="0.0907%" height="15" fill="rgb(230,182,32)" fg:x="6604" fg:w="6"/><text x="100.1290%" y="255.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (4 samples, 0.06%)</title><rect x="99.9093%" y="229" width="0.0605%" height="15" fill="rgb(242,56,43)" fg:x="6606" fg:w="4"/><text x="100.1593%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__open (4 samples, 0.06%)</title><rect x="99.9093%" y="213" width="0.0605%" height="15" fill="rgb(233,99,24)" fg:x="6606" fg:w="4"/><text x="100.1593%" y="223.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (7 samples, 0.11%)</title><rect x="99.8790%" y="261" width="0.1059%" height="15" fill="rgb(234,209,42)" fg:x="6604" fg:w="7"/><text x="100.1290%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (1 samples, 0.02%)</title><rect x="99.9698%" y="245" width="0.0151%" height="15" fill="rgb(227,7,12)" fg:x="6610" fg:w="1"/><text x="100.2198%" y="255.50"></text></g><g><title>all (6,612 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(245,203,43)" fg:x="0" fg:w="6612"/><text x="0.2500%" y="447.50"></text></g><g><title>dyld`start (6,612 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(238,205,33)" fg:x="0" fg:w="6612"/><text x="0.2500%" y="431.50">dyld`start</text></g><g><title>colors`main (6,612 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(231,56,7)" fg:x="0" fg:w="6612"/><text x="0.2500%" y="415.50">colors`main</text></g><g><title>colors`std::rt::lang_start_internal (6,612 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(244,186,29)" fg:x="0" fg:w="6612"/><text x="0.2500%" y="399.50">colors`std::rt::lang_start_internal</text></g><g><title>colors`std::rt::lang_start::_{{closure}} (6,612 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(234,111,31)" fg:x="0" fg:w="6612"/><text x="0.2500%" y="383.50">colors`std::rt::lang_start::_{{closure}}</text></g><g><title>colors`std::sys::backtrace::__rust_begin_short_backtrace (6,612 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(241,149,10)" fg:x="0" fg:w="6612"/><text x="0.2500%" y="367.50">colors`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>colors`colors::main (6,612 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(249,206,44)" fg:x="0" fg:w="6612"/><text x="0.2500%" y="351.50">colors`colors::main</text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::new (26 samples, 0.39%)</title><rect x="99.6068%" y="325" width="0.3932%" height="15" fill="rgb(251,153,30)" fg:x="6586" fg:w="26"/><text x="99.8568%" y="335.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::new (11 samples, 0.17%)</title><rect x="99.8336%" y="309" width="0.1664%" height="15" fill="rgb(239,152,38)" fg:x="6601" fg:w="11"/><text x="100.0836%" y="319.50"></text></g><g><title>colors`fontdb::Database::load_system_fonts (10 samples, 0.15%)</title><rect x="99.8488%" y="293" width="0.1512%" height="15" fill="rgb(249,139,47)" fg:x="6602" fg:w="10"/><text x="100.0988%" y="303.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (10 samples, 0.15%)</title><rect x="99.8488%" y="277" width="0.1512%" height="15" fill="rgb(244,64,35)" fg:x="6602" fg:w="10"/><text x="100.0988%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`stat (1 samples, 0.02%)</title><rect x="99.9849%" y="261" width="0.0151%" height="15" fill="rgb(216,46,15)" fg:x="6611" fg:w="1"/><text x="100.2349%" y="271.50"></text></g></svg></svg>
<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="4403"><g><title>colors`main (1 samples, 0.02%)</title><rect x="0.0000%" y="645" width="0.0227%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>colors`&lt;&amp;mut colors::App as ratatui::widgets::Widget&gt;::render (2 samples, 0.05%)</title><rect x="0.0227%" y="533" width="0.0454%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.2727%" y="543.50"></text></g><g><title>colors`ratatui::buffer::cell::Cell::set_char (1 samples, 0.02%)</title><rect x="0.0454%" y="517" width="0.0227%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.2954%" y="527.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::index_of (1 samples, 0.02%)</title><rect x="0.0681%" y="517" width="0.0227%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.3181%" y="527.50"></text></g><g><title>colors`tiny_skia::painter::Paint::set_color (7 samples, 0.16%)</title><rect x="0.3861%" y="469" width="0.1590%" height="15" fill="rgb(208,68,35)" fg:x="17" fg:w="7"/><text x="0.6361%" y="479.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="0.7041%" y="453" width="0.0227%" height="15" fill="rgb(232,128,0)" fg:x="31" fg:w="1"/><text x="0.9541%" y="463.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (1 samples, 0.02%)</title><rect x="1.6807%" y="437" width="0.0227%" height="15" fill="rgb(207,160,47)" fg:x="74" fg:w="1"/><text x="1.9307%" y="447.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (20 samples, 0.45%)</title><rect x="1.7034%" y="437" width="0.4542%" height="15" fill="rgb(228,23,34)" fg:x="75" fg:w="20"/><text x="1.9534%" y="447.50"></text></g><g><title>colors`tiny_skia::blend_mode::BlendMode::to_stage (3 samples, 0.07%)</title><rect x="2.1576%" y="437" width="0.0681%" height="15" fill="rgb(218,30,26)" fg:x="95" fg:w="3"/><text x="2.4076%" y="447.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (14 samples, 0.32%)</title><rect x="2.2258%" y="437" width="0.3180%" height="15" fill="rgb(220,122,19)" fg:x="98" fg:w="14"/><text x="2.4758%" y="447.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::push (9 samples, 0.20%)</title><rect x="2.5437%" y="437" width="0.2044%" height="15" fill="rgb(250,228,42)" fg:x="112" fg:w="9"/><text x="2.7937%" y="447.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (90 samples, 2.04%)</title><rect x="7.5630%" y="421" width="2.0441%" height="15" fill="rgb(240,193,28)" fg:x="333" fg:w="90"/><text x="7.8130%" y="431.50">c..</text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (561 samples, 12.74%)</title><rect x="9.6071%" y="421" width="12.7413%" height="15" fill="rgb(216,20,37)" fg:x="423" fg:w="561"/><text x="9.8571%" y="431.50">colors`tiny_skia::p..</text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (92 samples, 2.09%)</title><rect x="22.3484%" y="421" width="2.0895%" height="15" fill="rgb(206,188,39)" fg:x="984" fg:w="92"/><text x="22.5984%" y="431.50">c..</text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (1,319 samples, 29.96%)</title><rect x="2.7481%" y="437" width="29.9568%" height="15" fill="rgb(217,207,13)" fg:x="121" fg:w="1319"/><text x="2.9981%" y="447.50">colors`tiny_skia::pipeline::blitter::RasterPipel..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (364 samples, 8.27%)</title><rect x="24.4379%" y="421" width="8.2671%" height="15" fill="rgb(231,73,38)" fg:x="1076" fg:w="364"/><text x="24.6879%" y="431.50">libsystem_pl..</text></g><g><title>colors`tiny_skia::pipeline::lowp::source_over_rgba_tail (1 samples, 0.02%)</title><rect x="34.8399%" y="405" width="0.0227%" height="15" fill="rgb(225,20,46)" fg:x="1534" fg:w="1"/><text x="35.0899%" y="415.50"></text></g><g><title>colors`DYLD-STUB$$memset_pattern16 (4 samples, 0.09%)</title><rect x="35.1124%" y="389" width="0.0908%" height="15" fill="rgb(210,31,41)" fg:x="1546" fg:w="4"/><text x="35.3624%" y="399.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::source_over_rgba_tail (51 samples, 1.16%)</title><rect x="35.2033%" y="389" width="1.1583%" height="15" fill="rgb(221,200,47)" fg:x="1550" fg:w="51"/><text x="35.4533%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.18%)</title><rect x="36.3616%" y="389" width="0.1817%" height="15" fill="rgb(226,26,5)" fg:x="1601" fg:w="8"/><text x="36.6116%" y="399.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::start (78 samples, 1.77%)</title><rect x="34.8626%" y="405" width="1.7715%" height="15" fill="rgb(249,33,26)" fg:x="1535" fg:w="78"/><text x="35.1126%" y="415.50">c..</text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (4 samples, 0.09%)</title><rect x="36.5433%" y="389" width="0.0908%" height="15" fill="rgb(235,183,28)" fg:x="1609" fg:w="4"/><text x="36.7933%" y="399.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (130 samples, 2.95%)</title><rect x="34.0677%" y="421" width="2.9525%" height="15" fill="rgb(221,5,38)" fg:x="1500" fg:w="130"/><text x="34.3177%" y="431.50">col..</text></g><g><title>colors`tiny_skia::pipeline::lowp::uniform_color (17 samples, 0.39%)</title><rect x="36.6341%" y="405" width="0.3861%" height="15" fill="rgb(247,18,42)" fg:x="1613" fg:w="17"/><text x="36.8841%" y="415.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (191 samples, 4.34%)</title><rect x="32.7050%" y="437" width="4.3380%" height="15" fill="rgb(241,131,45)" fg:x="1440" fg:w="191"/><text x="32.9550%" y="447.50">color..</text></g><g><title>colors`tiny_skia::pipeline::lowp::start (1 samples, 0.02%)</title><rect x="37.0202%" y="421" width="0.0227%" height="15" fill="rgb(249,31,29)" fg:x="1630" fg:w="1"/><text x="37.2702%" y="431.50"></text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (5 samples, 0.11%)</title><rect x="37.0429%" y="437" width="0.1136%" height="15" fill="rgb(225,111,53)" fg:x="1631" fg:w="5"/><text x="37.2929%" y="447.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::from_xywh (8 samples, 0.18%)</title><rect x="37.1565%" y="437" width="0.1817%" height="15" fill="rgb(238,160,17)" fg:x="1636" fg:w="8"/><text x="37.4065%" y="447.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::intersect (67 samples, 1.52%)</title><rect x="37.3382%" y="437" width="1.5217%" height="15" fill="rgb(214,148,48)" fg:x="1644" fg:w="67"/><text x="37.5882%" y="447.50"></text></g><g><title>colors`tiny_skia_path::rect::Rect::round (19 samples, 0.43%)</title><rect x="38.8599%" y="437" width="0.4315%" height="15" fill="rgb(232,36,49)" fg:x="1711" fg:w="19"/><text x="39.1099%" y="447.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (2,272 samples, 51.60%)</title><rect x="0.7268%" y="453" width="51.6012%" height="15" fill="rgb(209,103,24)" fg:x="32" fg:w="2272"/><text x="0.9768%" y="463.50">colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect</text></g><g><title>libsystem_platform.dylib`_platform_memmove (574 samples, 13.04%)</title><rect x="39.2914%" y="437" width="13.0366%" height="15" fill="rgb(229,88,8)" fg:x="1730" fg:w="574"/><text x="39.5414%" y="447.50">libsystem_platform.d..</text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (10 samples, 0.23%)</title><rect x="52.3280%" y="453" width="0.2271%" height="15" fill="rgb(213,181,19)" fg:x="2304" fg:w="10"/><text x="52.5780%" y="463.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (2 samples, 0.05%)</title><rect x="52.5551%" y="453" width="0.0454%" height="15" fill="rgb(254,191,54)" fg:x="2314" fg:w="2"/><text x="52.8051%" y="463.50"></text></g><g><title>colors`tiny_skia_path::transform::Transform::is_identity (12 samples, 0.27%)</title><rect x="52.6005%" y="453" width="0.2725%" height="15" fill="rgb(241,83,37)" fg:x="2316" fg:w="12"/><text x="52.8505%" y="463.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::fill_rect (2,583 samples, 58.66%)</title><rect x="0.5451%" y="469" width="58.6645%" height="15" fill="rgb(233,36,39)" fg:x="24" fg:w="2583"/><text x="0.7951%" y="479.50">colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::fill_rect</text></g><g><title>libsystem_platform.dylib`_platform_memmove (279 samples, 6.34%)</title><rect x="52.8730%" y="453" width="6.3366%" height="15" fill="rgb(226,3,54)" fg:x="2328" fg:w="279"/><text x="53.1230%" y="463.50">libsyste..</text></g><g><title>colors`cosmic_text::swash::SwashCache::with_pixels (2,618 samples, 59.46%)</title><rect x="0.0908%" y="485" width="59.4595%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="2618"/><text x="0.3408%" y="495.50">colors`cosmic_text::swash::SwashCache::with_pixels</text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (15 samples, 0.34%)</title><rect x="59.2096%" y="469" width="0.3407%" height="15" fill="rgb(238,167,29)" fg:x="2607" fg:w="15"/><text x="59.4596%" y="479.50"></text></g><g><title>colors`tiny_skia::painter::Paint::set_color (5 samples, 0.11%)</title><rect x="59.5503%" y="485" width="0.1136%" height="15" fill="rgb(232,182,51)" fg:x="2622" fg:w="5"/><text x="59.8003%" y="495.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::draw (2,640 samples, 59.96%)</title><rect x="0.0908%" y="501" width="59.9591%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="2640"/><text x="0.3408%" y="511.50">colors`cosmic_text::buffer::Buffer::draw</text></g><g><title>colors`tiny_skia_path::rect::Rect::from_xywh (17 samples, 0.39%)</title><rect x="59.6639%" y="485" width="0.3861%" height="15" fill="rgb(208,69,12)" fg:x="2627" fg:w="17"/><text x="59.9139%" y="495.50"></text></g><g><title>colors`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="60.0500%" y="469" width="0.0227%" height="15" fill="rgb(235,93,37)" fg:x="2644" fg:w="1"/><text x="60.3000%" y="479.50"></text></g><g><title>colors`core::iter::traits::iterator::Iterator::unzip (2 samples, 0.05%)</title><rect x="60.0500%" y="485" width="0.0454%" height="15" fill="rgb(213,116,39)" fg:x="2644" fg:w="2"/><text x="60.3000%" y="495.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="60.0727%" y="469" width="0.0227%" height="15" fill="rgb(222,207,29)" fg:x="2645" fg:w="1"/><text x="60.3227%" y="479.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="60.0727%" y="453" width="0.0227%" height="15" fill="rgb(206,96,30)" fg:x="2645" fg:w="1"/><text x="60.3227%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="60.0727%" y="437" width="0.0227%" height="15" fill="rgb(218,138,4)" fg:x="2645" fg:w="1"/><text x="60.3227%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.02%)</title><rect x="60.0727%" y="421" width="0.0227%" height="15" fill="rgb(250,191,14)" fg:x="2645" fg:w="1"/><text x="60.3227%" y="431.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="60.1408%" y="453" width="0.0227%" height="15" fill="rgb(239,60,40)" fg:x="2648" fg:w="1"/><text x="60.3908%" y="463.50"></text></g><g><title>colors`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.05%)</title><rect x="60.1635%" y="453" width="0.0454%" height="15" fill="rgb(206,27,48)" fg:x="2649" fg:w="2"/><text x="60.4135%" y="463.50"></text></g><g><title>colors`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::find_leaf_edges_spanning_range (1 samples, 0.02%)</title><rect x="60.2089%" y="453" width="0.0227%" height="15" fill="rgb(225,35,8)" fg:x="2651" fg:w="1"/><text x="60.4589%" y="463.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::add_span (7 samples, 0.16%)</title><rect x="60.0954%" y="485" width="0.1590%" height="15" fill="rgb(250,213,24)" fg:x="2646" fg:w="7"/><text x="60.3454%" y="495.50"></text></g><g><title>colors`rangemap::map::RangeMap&lt;K,V&gt;::insert (7 samples, 0.16%)</title><rect x="60.0954%" y="469" width="0.1590%" height="15" fill="rgb(247,123,22)" fg:x="2646" fg:w="7"/><text x="60.3454%" y="479.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="60.2317%" y="453" width="0.0227%" height="15" fill="rgb(231,138,38)" fg:x="2652" fg:w="1"/><text x="60.4817%" y="463.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::defaults (1 samples, 0.02%)</title><rect x="60.2544%" y="485" width="0.0227%" height="15" fill="rgb(231,145,46)" fg:x="2653" fg:w="1"/><text x="60.5044%" y="495.50"></text></g><g><title>colors`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.02%)</title><rect x="60.2771%" y="453" width="0.0227%" height="15" fill="rgb(251,118,11)" fg:x="2654" fg:w="1"/><text x="60.5271%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="60.2771%" y="437" width="0.0227%" height="15" fill="rgb(217,147,25)" fg:x="2654" fg:w="1"/><text x="60.5271%" y="447.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::reset (2 samples, 0.05%)</title><rect x="60.2771%" y="485" width="0.0454%" height="15" fill="rgb(247,81,37)" fg:x="2654" fg:w="2"/><text x="60.5271%" y="495.50"></text></g><g><title>colors`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::clear (2 samples, 0.05%)</title><rect x="60.2771%" y="469" width="0.0454%" height="15" fill="rgb(209,12,38)" fg:x="2654" fg:w="2"/><text x="60.5271%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="60.2998%" y="453" width="0.0227%" height="15" fill="rgb(227,1,9)" fg:x="2655" fg:w="1"/><text x="60.5498%" y="463.50"></text></g><g><title>colors`unicode_bidi::BidiInfo::new_with_data_source (1 samples, 0.02%)</title><rect x="60.3225%" y="469" width="0.0227%" height="15" fill="rgb(248,47,43)" fg:x="2656" fg:w="1"/><text x="60.5725%" y="479.50"></text></g><g><title>colors`cosmic_text::bidi_para::BidiParagraphs::new (4 samples, 0.09%)</title><rect x="60.3225%" y="485" width="0.0908%" height="15" fill="rgb(221,10,30)" fg:x="2656" fg:w="4"/><text x="60.5725%" y="495.50"></text></g><g><title>colors`unicode_bidi::char_data::bsearch_range_value_table (3 samples, 0.07%)</title><rect x="60.3452%" y="469" width="0.0681%" height="15" fill="rgb(210,229,1)" fg:x="2657" fg:w="3"/><text x="60.5952%" y="479.50"></text></g><g><title>colors`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="60.4588%" y="405" width="0.0227%" height="15" fill="rgb(222,148,37)" fg:x="2662" fg:w="1"/><text x="60.7088%" y="415.50"></text></g><g><title>colors`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="60.4588%" y="389" width="0.0227%" height="15" fill="rgb(234,67,33)" fg:x="2662" fg:w="1"/><text x="60.7088%" y="399.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (2 samples, 0.05%)</title><rect x="60.5269%" y="389" width="0.0454%" height="15" fill="rgb(247,98,35)" fg:x="2665" fg:w="2"/><text x="60.7769%" y="399.50"></text></g><g><title>colors`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::find_leaf_edges_spanning_range (2 samples, 0.05%)</title><rect x="60.5269%" y="373" width="0.0454%" height="15" fill="rgb(247,138,52)" fg:x="2665" fg:w="2"/><text x="60.7769%" y="383.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (1 samples, 0.02%)</title><rect x="60.9811%" y="357" width="0.0227%" height="15" fill="rgb(213,79,30)" fg:x="2685" fg:w="1"/><text x="61.2311%" y="367.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_supported_codepoints_in_word::_{{closure}} (5 samples, 0.11%)</title><rect x="61.0039%" y="357" width="0.1136%" height="15" fill="rgb(246,177,23)" fg:x="2686" fg:w="5"/><text x="61.2539%" y="367.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.57%)</title><rect x="60.5723%" y="373" width="0.5678%" height="15" fill="rgb(230,62,27)" fg:x="2667" fg:w="25"/><text x="60.8223%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="61.1174%" y="357" width="0.0227%" height="15" fill="rgb(216,154,8)" fg:x="2691" fg:w="1"/><text x="61.3674%" y="367.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (2 samples, 0.05%)</title><rect x="61.1401%" y="357" width="0.0454%" height="15" fill="rgb(244,35,45)" fg:x="2692" fg:w="2"/><text x="61.3901%" y="367.50"></text></g><g><title>colors`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::find_leaf_edges_spanning_range (2 samples, 0.05%)</title><rect x="61.1401%" y="341" width="0.0454%" height="15" fill="rgb(251,115,12)" fg:x="2692" fg:w="2"/><text x="61.3901%" y="351.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::find_language_feature (1 samples, 0.02%)</title><rect x="61.1856%" y="309" width="0.0227%" height="15" fill="rgb(240,54,50)" fg:x="2694" fg:w="1"/><text x="61.4356%" y="319.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Script as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (1 samples, 0.02%)</title><rect x="61.2083%" y="309" width="0.0227%" height="15" fill="rgb(233,84,52)" fg:x="2695" fg:w="1"/><text x="61.4583%" y="319.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t::new (3 samples, 0.07%)</title><rect x="61.1856%" y="357" width="0.0681%" height="15" fill="rgb(207,117,47)" fg:x="2694" fg:w="3"/><text x="61.4356%" y="367.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::compile (3 samples, 0.07%)</title><rect x="61.1856%" y="341" width="0.0681%" height="15" fill="rgb(249,43,39)" fg:x="2694" fg:w="3"/><text x="61.4356%" y="351.50"></text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::compile (3 samples, 0.07%)</title><rect x="61.1856%" y="325" width="0.0681%" height="15" fill="rgb(209,38,44)" fg:x="2694" fg:w="3"/><text x="61.4356%" y="335.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.02%)</title><rect x="61.2310%" y="309" width="0.0227%" height="15" fill="rgb(236,212,23)" fg:x="2696" fg:w="1"/><text x="61.4810%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="61.2310%" y="293" width="0.0227%" height="15" fill="rgb(242,79,21)" fg:x="2696" fg:w="1"/><text x="61.4810%" y="303.50"></text></g><g><title>colors`&lt;char as unicode_properties::general_category::UnicodeGeneralCategory&gt;::general_category (1 samples, 0.02%)</title><rect x="61.2537%" y="325" width="0.0227%" height="15" fill="rgb(211,96,35)" fg:x="2697" fg:w="1"/><text x="61.5037%" y="335.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::glyph_advance (1 samples, 0.02%)</title><rect x="61.2764%" y="325" width="0.0227%" height="15" fill="rgb(253,215,40)" fg:x="2698" fg:w="1"/><text x="61.5264%" y="335.50"></text></g><g><title>colors`rustybuzz::hb::ot_layout::apply_layout_table (7 samples, 0.16%)</title><rect x="61.2991%" y="325" width="0.1590%" height="15" fill="rgb(211,81,21)" fg:x="2699" fg:w="7"/><text x="61.5491%" y="335.50"></text></g><g><title>colors`rustybuzz::hb::ot::layout::GSUB::ligature_subst::_&lt;impl rustybuzz::hb::ot_layout_gsubgpos::Apply for ttf_parser::tables::gsub::LigatureSubstitution&gt;::apply (1 samples, 0.02%)</title><rect x="61.4354%" y="309" width="0.0227%" height="15" fill="rgb(208,190,38)" fg:x="2705" fg:w="1"/><text x="61.6854%" y="319.50"></text></g><g><title>colors`rustybuzz::hb::ot_layout_gsubgpos::match_input (1 samples, 0.02%)</title><rect x="61.4354%" y="293" width="0.0227%" height="15" fill="rgb(235,213,38)" fg:x="2705" fg:w="1"/><text x="61.6854%" y="303.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::shape_internal (10 samples, 0.23%)</title><rect x="61.2537%" y="341" width="0.2271%" height="15" fill="rgb(237,122,38)" fg:x="2697" fg:w="10"/><text x="61.5037%" y="351.50"></text></g><g><title>colors`ttf_parser::ggg::ClassDefinition::get (1 samples, 0.02%)</title><rect x="61.4581%" y="325" width="0.0227%" height="15" fill="rgb(244,218,35)" fg:x="2706" fg:w="1"/><text x="61.7081%" y="335.50"></text></g><g><title>colors`cosmic_text::shape::shape_fallback (16 samples, 0.36%)</title><rect x="61.1401%" y="373" width="0.3634%" height="15" fill="rgb(240,68,47)" fg:x="2692" fg:w="16"/><text x="61.3901%" y="383.50"></text></g><g><title>colors`rustybuzz::hb::shape::shape_with_plan (11 samples, 0.25%)</title><rect x="61.2537%" y="357" width="0.2498%" height="15" fill="rgb(210,16,53)" fg:x="2697" fg:w="11"/><text x="61.5037%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="61.4808%" y="341" width="0.0227%" height="15" fill="rgb(235,124,12)" fg:x="2707" fg:w="1"/><text x="61.7308%" y="351.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_rich_text (65 samples, 1.48%)</title><rect x="60.0500%" y="501" width="1.4763%" height="15" fill="rgb(224,169,11)" fg:x="2644" fg:w="65"/><text x="60.3000%" y="511.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (49 samples, 1.11%)</title><rect x="60.4134%" y="485" width="1.1129%" height="15" fill="rgb(250,166,2)" fg:x="2660" fg:w="49"/><text x="60.6634%" y="495.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (49 samples, 1.11%)</title><rect x="60.4134%" y="469" width="1.1129%" height="15" fill="rgb(242,216,29)" fg:x="2660" fg:w="49"/><text x="60.6634%" y="479.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (49 samples, 1.11%)</title><rect x="60.4134%" y="453" width="1.1129%" height="15" fill="rgb(230,116,27)" fg:x="2660" fg:w="49"/><text x="60.6634%" y="463.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (49 samples, 1.11%)</title><rect x="60.4134%" y="437" width="1.1129%" height="15" fill="rgb(228,99,48)" fg:x="2660" fg:w="49"/><text x="60.6634%" y="447.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (47 samples, 1.07%)</title><rect x="60.4588%" y="421" width="1.0675%" height="15" fill="rgb(253,11,6)" fg:x="2662" fg:w="47"/><text x="60.7088%" y="431.50"></text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (46 samples, 1.04%)</title><rect x="60.4815%" y="405" width="1.0447%" height="15" fill="rgb(247,143,39)" fg:x="2663" fg:w="46"/><text x="60.7315%" y="415.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (42 samples, 0.95%)</title><rect x="60.5723%" y="389" width="0.9539%" height="15" fill="rgb(236,97,10)" fg:x="2667" fg:w="42"/><text x="60.8223%" y="399.50"></text></g><g><title>colors`fontdb::Database::face (1 samples, 0.02%)</title><rect x="61.5035%" y="373" width="0.0227%" height="15" fill="rgb(233,208,19)" fg:x="2708" fg:w="1"/><text x="61.7535%" y="383.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="61.5489%" y="373" width="0.0227%" height="15" fill="rgb(216,164,2)" fg:x="2710" fg:w="1"/><text x="61.7989%" y="383.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.07%)</title><rect x="61.6852%" y="309" width="0.0681%" height="15" fill="rgb(220,129,5)" fg:x="2716" fg:w="3"/><text x="61.9352%" y="319.50"></text></g><g><title>colors`core::slice::memchr::memrchr (1 samples, 0.02%)</title><rect x="61.7306%" y="293" width="0.0227%" height="15" fill="rgb(242,17,10)" fg:x="2718" fg:w="1"/><text x="61.9806%" y="303.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="61.7533%" y="309" width="0.0227%" height="15" fill="rgb(242,107,0)" fg:x="2719" fg:w="1"/><text x="62.0033%" y="319.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (8 samples, 0.18%)</title><rect x="61.6852%" y="325" width="0.1817%" height="15" fill="rgb(251,28,31)" fg:x="2716" fg:w="8"/><text x="61.9352%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.09%)</title><rect x="61.7761%" y="309" width="0.0908%" height="15" fill="rgb(233,223,10)" fg:x="2720" fg:w="4"/><text x="62.0261%" y="319.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (13 samples, 0.30%)</title><rect x="61.6171%" y="357" width="0.2953%" height="15" fill="rgb(215,21,27)" fg:x="2713" fg:w="13"/><text x="61.8671%" y="367.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (10 samples, 0.23%)</title><rect x="61.6852%" y="341" width="0.2271%" height="15" fill="rgb(232,23,21)" fg:x="2716" fg:w="10"/><text x="61.9352%" y="351.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.05%)</title><rect x="61.8669%" y="325" width="0.0454%" height="15" fill="rgb(244,5,23)" fg:x="2724" fg:w="2"/><text x="62.1169%" y="335.50"></text></g><g><title>colors`&lt;core::option::Option&lt;T&gt; as core::fmt::Debug&gt;::fmt (1 samples, 0.02%)</title><rect x="61.9123%" y="357" width="0.0227%" height="15" fill="rgb(226,81,46)" fg:x="2726" fg:w="1"/><text x="62.1623%" y="367.50"></text></g><g><title>colors`&lt;fontdb::Style as core::fmt::Debug&gt;::fmt (1 samples, 0.02%)</title><rect x="61.9350%" y="357" width="0.0227%" height="15" fill="rgb(247,70,30)" fg:x="2727" fg:w="1"/><text x="62.1850%" y="367.50"></text></g><g><title>colors`&lt;fontdb::Weight as core::fmt::Debug&gt;::fmt (2 samples, 0.05%)</title><rect x="61.9578%" y="357" width="0.0454%" height="15" fill="rgb(212,68,19)" fg:x="2728" fg:w="2"/><text x="62.2078%" y="367.50"></text></g><g><title>colors`&lt;ttf_parser::tables::os2::Width as core::fmt::Debug&gt;::fmt (1 samples, 0.02%)</title><rect x="62.0032%" y="357" width="0.0227%" height="15" fill="rgb(240,187,13)" fg:x="2730" fg:w="1"/><text x="62.2532%" y="367.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.05%)</title><rect x="62.0940%" y="325" width="0.0454%" height="15" fill="rgb(223,113,26)" fg:x="2734" fg:w="2"/><text x="62.3440%" y="335.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.05%)</title><rect x="62.3439%" y="245" width="0.0454%" height="15" fill="rgb(206,192,2)" fg:x="2745" fg:w="2"/><text x="62.5939%" y="255.50"></text></g><g><title>colors`core::slice::memchr::memrchr (2 samples, 0.05%)</title><rect x="62.3439%" y="229" width="0.0454%" height="15" fill="rgb(241,108,4)" fg:x="2745" fg:w="2"/><text x="62.5939%" y="239.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.07%)</title><rect x="62.3439%" y="261" width="0.0681%" height="15" fill="rgb(247,173,49)" fg:x="2745" fg:w="3"/><text x="62.5939%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="62.3893%" y="245" width="0.0227%" height="15" fill="rgb(224,114,35)" fg:x="2747" fg:w="1"/><text x="62.6393%" y="255.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (14 samples, 0.32%)</title><rect x="62.1395%" y="309" width="0.3180%" height="15" fill="rgb(245,159,27)" fg:x="2736" fg:w="14"/><text x="62.3895%" y="319.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (9 samples, 0.20%)</title><rect x="62.2530%" y="293" width="0.2044%" height="15" fill="rgb(245,172,44)" fg:x="2741" fg:w="9"/><text x="62.5030%" y="303.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (6 samples, 0.14%)</title><rect x="62.3211%" y="277" width="0.1363%" height="15" fill="rgb(236,23,11)" fg:x="2744" fg:w="6"/><text x="62.5711%" y="287.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.05%)</title><rect x="62.4120%" y="261" width="0.0454%" height="15" fill="rgb(205,117,38)" fg:x="2748" fg:w="2"/><text x="62.6620%" y="271.50"></text></g><g><title>colors`core::fmt::Formatter::debug_list (1 samples, 0.02%)</title><rect x="62.4574%" y="277" width="0.0227%" height="15" fill="rgb(237,72,25)" fg:x="2750" fg:w="1"/><text x="62.7074%" y="287.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="62.4574%" y="261" width="0.0227%" height="15" fill="rgb(244,70,9)" fg:x="2750" fg:w="1"/><text x="62.7074%" y="271.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="62.4574%" y="245" width="0.0227%" height="15" fill="rgb(217,125,39)" fg:x="2750" fg:w="1"/><text x="62.7074%" y="255.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="62.4574%" y="229" width="0.0227%" height="15" fill="rgb(235,36,10)" fg:x="2750" fg:w="1"/><text x="62.7074%" y="239.50"></text></g><g><title>colors`&lt;&amp;T as core::fmt::Debug&gt;::fmt (3 samples, 0.07%)</title><rect x="62.4574%" y="293" width="0.0681%" height="15" fill="rgb(251,123,47)" fg:x="2750" fg:w="3"/><text x="62.7074%" y="303.50"></text></g><g><title>colors`core::fmt::builders::DebugList::finish (2 samples, 0.05%)</title><rect x="62.4801%" y="277" width="0.0454%" height="15" fill="rgb(221,13,13)" fg:x="2751" fg:w="2"/><text x="62.7301%" y="287.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (2 samples, 0.05%)</title><rect x="62.4801%" y="261" width="0.0454%" height="15" fill="rgb(238,131,9)" fg:x="2751" fg:w="2"/><text x="62.7301%" y="271.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="62.5028%" y="245" width="0.0227%" height="15" fill="rgb(211,50,8)" fg:x="2752" fg:w="1"/><text x="62.7528%" y="255.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="62.5028%" y="229" width="0.0227%" height="15" fill="rgb(245,182,24)" fg:x="2752" fg:w="1"/><text x="62.7528%" y="239.50"></text></g><g><title>colors`core::slice::memchr::memrchr (2 samples, 0.05%)</title><rect x="62.7527%" y="197" width="0.0454%" height="15" fill="rgb(242,14,37)" fg:x="2763" fg:w="2"/><text x="63.0027%" y="207.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (46 samples, 1.04%)</title><rect x="62.7527%" y="213" width="1.0447%" height="15" fill="rgb(246,228,12)" fg:x="2763" fg:w="46"/><text x="63.0027%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`write (44 samples, 1.00%)</title><rect x="62.7981%" y="197" width="0.9993%" height="15" fill="rgb(213,55,15)" fg:x="2765" fg:w="44"/><text x="63.0481%" y="207.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (48 samples, 1.09%)</title><rect x="62.7527%" y="229" width="1.0902%" height="15" fill="rgb(209,9,3)" fg:x="2763" fg:w="48"/><text x="63.0027%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.05%)</title><rect x="63.7974%" y="213" width="0.0454%" height="15" fill="rgb(230,59,30)" fg:x="2809" fg:w="2"/><text x="64.0474%" y="223.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (51 samples, 1.16%)</title><rect x="62.7300%" y="245" width="1.1583%" height="15" fill="rgb(209,121,21)" fg:x="2762" fg:w="51"/><text x="62.9800%" y="255.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.05%)</title><rect x="63.8428%" y="229" width="0.0454%" height="15" fill="rgb(220,109,13)" fg:x="2811" fg:w="2"/><text x="64.0928%" y="239.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (43 samples, 0.98%)</title><rect x="63.8883%" y="229" width="0.9766%" height="15" fill="rgb(232,18,1)" fg:x="2813" fg:w="43"/><text x="64.1383%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`write (43 samples, 0.98%)</title><rect x="63.8883%" y="213" width="0.9766%" height="15" fill="rgb(215,41,42)" fg:x="2813" fg:w="43"/><text x="64.1383%" y="223.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (97 samples, 2.20%)</title><rect x="62.7072%" y="261" width="2.2030%" height="15" fill="rgb(224,123,36)" fg:x="2761" fg:w="97"/><text x="62.9572%" y="271.50">c..</text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (45 samples, 1.02%)</title><rect x="63.8883%" y="245" width="1.0220%" height="15" fill="rgb(240,125,3)" fg:x="2813" fg:w="45"/><text x="64.1383%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.05%)</title><rect x="64.8649%" y="229" width="0.0454%" height="15" fill="rgb(205,98,50)" fg:x="2856" fg:w="2"/><text x="65.1149%" y="239.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (106 samples, 2.41%)</title><rect x="62.5256%" y="293" width="2.4074%" height="15" fill="rgb(205,185,37)" fg:x="2753" fg:w="106"/><text x="62.7756%" y="303.50">co..</text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (101 samples, 2.29%)</title><rect x="62.6391%" y="277" width="2.2939%" height="15" fill="rgb(238,207,15)" fg:x="2758" fg:w="101"/><text x="62.8891%" y="287.50">c..</text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="64.9103%" y="261" width="0.0227%" height="15" fill="rgb(213,199,42)" fg:x="2858" fg:w="1"/><text x="65.1603%" y="271.50"></text></g><g><title>colors`&lt;&amp;T as core::fmt::Debug&gt;::fmt (126 samples, 2.86%)</title><rect x="62.0940%" y="341" width="2.8617%" height="15" fill="rgb(235,201,11)" fg:x="2734" fg:w="126"/><text x="62.3440%" y="351.50">co..</text></g><g><title>colors`core::fmt::Formatter::debug_struct_field1_finish (124 samples, 2.82%)</title><rect x="62.1395%" y="325" width="2.8163%" height="15" fill="rgb(207,46,11)" fg:x="2736" fg:w="124"/><text x="62.3895%" y="335.50">co..</text></g><g><title>colors`core::fmt::builders::DebugStruct::field (110 samples, 2.50%)</title><rect x="62.4574%" y="309" width="2.4983%" height="15" fill="rgb(241,35,35)" fg:x="2750" fg:w="110"/><text x="62.7074%" y="319.50">co..</text></g><g><title>colors`core::fmt::Formatter::debug_list (1 samples, 0.02%)</title><rect x="64.9330%" y="293" width="0.0227%" height="15" fill="rgb(243,32,47)" fg:x="2859" fg:w="1"/><text x="65.1830%" y="303.50"></text></g><g><title>colors`core::slice::memchr::memrchr (27 samples, 0.61%)</title><rect x="67.2950%" y="261" width="0.6132%" height="15" fill="rgb(247,202,23)" fg:x="2963" fg:w="27"/><text x="67.5450%" y="271.50"></text></g><g><title>colors`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (3 samples, 0.07%)</title><rect x="67.9082%" y="261" width="0.0681%" height="15" fill="rgb(219,102,11)" fg:x="2990" fg:w="3"/><text x="68.1582%" y="271.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (514 samples, 11.67%)</title><rect x="66.9771%" y="277" width="11.6739%" height="15" fill="rgb(243,110,44)" fg:x="2949" fg:w="514"/><text x="67.2271%" y="287.50">colors`&lt;std::io::..</text></g><g><title>libsystem_kernel.dylib`write (470 samples, 10.67%)</title><rect x="67.9764%" y="261" width="10.6745%" height="15" fill="rgb(222,74,54)" fg:x="2993" fg:w="470"/><text x="68.2264%" y="271.50">libsystem_kernel..</text></g><g><title>colors`DYLD-STUB$$memcpy (4 samples, 0.09%)</title><rect x="78.6509%" y="277" width="0.0908%" height="15" fill="rgb(216,99,12)" fg:x="3463" fg:w="4"/><text x="78.9009%" y="287.50"></text></g><g><title>colors`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (3 samples, 0.07%)</title><rect x="78.7418%" y="277" width="0.0681%" height="15" fill="rgb(226,22,26)" fg:x="3467" fg:w="3"/><text x="78.9918%" y="287.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (533 samples, 12.11%)</title><rect x="66.9771%" y="293" width="12.1054%" height="15" fill="rgb(217,163,10)" fg:x="2949" fg:w="533"/><text x="67.2271%" y="303.50">colors`&lt;std::io::W..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.27%)</title><rect x="78.8099%" y="277" width="0.2725%" height="15" fill="rgb(213,25,53)" fg:x="3470" fg:w="12"/><text x="79.0599%" y="287.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (570 samples, 12.95%)</title><rect x="66.4093%" y="309" width="12.9457%" height="15" fill="rgb(252,105,26)" fg:x="2924" fg:w="570"/><text x="66.6593%" y="319.50">colors`&lt;core::fmt::..</text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (12 samples, 0.27%)</title><rect x="79.0824%" y="293" width="0.2725%" height="15" fill="rgb(220,39,43)" fg:x="3482" fg:w="12"/><text x="79.3324%" y="303.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (46 samples, 1.04%)</title><rect x="79.4913%" y="293" width="1.0447%" height="15" fill="rgb(229,68,48)" fg:x="3500" fg:w="46"/><text x="79.7413%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`write (46 samples, 1.04%)</title><rect x="79.4913%" y="277" width="1.0447%" height="15" fill="rgb(252,8,32)" fg:x="3500" fg:w="46"/><text x="79.7413%" y="287.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (53 samples, 1.20%)</title><rect x="79.3550%" y="309" width="1.2037%" height="15" fill="rgb(223,20,43)" fg:x="3494" fg:w="53"/><text x="79.6050%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="80.5360%" y="293" width="0.0227%" height="15" fill="rgb(229,81,49)" fg:x="3546" fg:w="1"/><text x="80.7860%" y="303.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (688 samples, 15.63%)</title><rect x="64.9557%" y="341" width="15.6257%" height="15" fill="rgb(236,28,36)" fg:x="2860" fg:w="688"/><text x="65.2057%" y="351.50">colors`&lt;core::fmt::build..</text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (656 samples, 14.90%)</title><rect x="65.6825%" y="325" width="14.8989%" height="15" fill="rgb(249,185,26)" fg:x="2892" fg:w="656"/><text x="65.9325%" y="335.50">colors`&lt;core::fmt::buil..</text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="80.5587%" y="309" width="0.0227%" height="15" fill="rgb(249,174,33)" fg:x="3547" fg:w="1"/><text x="80.8087%" y="319.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (7 samples, 0.16%)</title><rect x="80.6041%" y="309" width="0.1590%" height="15" fill="rgb(233,201,37)" fg:x="3549" fg:w="7"/><text x="80.8541%" y="319.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (7 samples, 0.16%)</title><rect x="80.6041%" y="293" width="0.1590%" height="15" fill="rgb(221,78,26)" fg:x="3549" fg:w="7"/><text x="80.8541%" y="303.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (3 samples, 0.07%)</title><rect x="80.6950%" y="277" width="0.0681%" height="15" fill="rgb(250,127,30)" fg:x="3553" fg:w="3"/><text x="80.9450%" y="287.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="80.7404%" y="261" width="0.0227%" height="15" fill="rgb(230,49,44)" fg:x="3555" fg:w="1"/><text x="80.9904%" y="271.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="80.7404%" y="245" width="0.0227%" height="15" fill="rgb(229,67,23)" fg:x="3555" fg:w="1"/><text x="80.9904%" y="255.50"></text></g><g><title>colors`core::slice::memchr::memrchr (1 samples, 0.02%)</title><rect x="80.7404%" y="229" width="0.0227%" height="15" fill="rgb(249,83,47)" fg:x="3555" fg:w="1"/><text x="80.9904%" y="239.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (8 samples, 0.18%)</title><rect x="81.1492%" y="181" width="0.1817%" height="15" fill="rgb(215,43,3)" fg:x="3573" fg:w="8"/><text x="81.3992%" y="191.50"></text></g><g><title>colors`core::slice::memchr::memrchr (4 samples, 0.09%)</title><rect x="81.2401%" y="165" width="0.0908%" height="15" fill="rgb(238,154,13)" fg:x="3577" fg:w="4"/><text x="81.4901%" y="175.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (25 samples, 0.57%)</title><rect x="80.7858%" y="261" width="0.5678%" height="15" fill="rgb(219,56,2)" fg:x="3557" fg:w="25"/><text x="81.0358%" y="271.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (25 samples, 0.57%)</title><rect x="80.7858%" y="245" width="0.5678%" height="15" fill="rgb(233,0,4)" fg:x="3557" fg:w="25"/><text x="81.0358%" y="255.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (22 samples, 0.50%)</title><rect x="80.8540%" y="229" width="0.4997%" height="15" fill="rgb(235,30,7)" fg:x="3560" fg:w="22"/><text x="81.1040%" y="239.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (16 samples, 0.36%)</title><rect x="80.9902%" y="213" width="0.3634%" height="15" fill="rgb(250,79,13)" fg:x="3566" fg:w="16"/><text x="81.2402%" y="223.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (9 samples, 0.20%)</title><rect x="81.1492%" y="197" width="0.2044%" height="15" fill="rgb(211,146,34)" fg:x="3573" fg:w="9"/><text x="81.3992%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="81.3309%" y="181" width="0.0227%" height="15" fill="rgb(228,22,38)" fg:x="3581" fg:w="1"/><text x="81.5809%" y="191.50"></text></g><g><title>colors`DYLD-STUB$$write (1 samples, 0.02%)</title><rect x="81.4445%" y="133" width="0.0227%" height="15" fill="rgb(235,168,5)" fg:x="3586" fg:w="1"/><text x="81.6945%" y="143.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (41 samples, 0.93%)</title><rect x="81.4218%" y="181" width="0.9312%" height="15" fill="rgb(221,155,16)" fg:x="3585" fg:w="41"/><text x="81.6718%" y="191.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (41 samples, 0.93%)</title><rect x="81.4218%" y="165" width="0.9312%" height="15" fill="rgb(215,215,53)" fg:x="3585" fg:w="41"/><text x="81.6718%" y="175.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (41 samples, 0.93%)</title><rect x="81.4218%" y="149" width="0.9312%" height="15" fill="rgb(223,4,10)" fg:x="3585" fg:w="41"/><text x="81.6718%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`write (39 samples, 0.89%)</title><rect x="81.4672%" y="133" width="0.8858%" height="15" fill="rgb(234,103,6)" fg:x="3587" fg:w="39"/><text x="81.7172%" y="143.50"></text></g><g><title>colors`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.02%)</title><rect x="82.3529%" y="149" width="0.0227%" height="15" fill="rgb(227,97,0)" fg:x="3626" fg:w="1"/><text x="82.6029%" y="159.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (89 samples, 2.02%)</title><rect x="81.3536%" y="245" width="2.0213%" height="15" fill="rgb(234,150,53)" fg:x="3582" fg:w="89"/><text x="81.6036%" y="255.50">c..</text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (89 samples, 2.02%)</title><rect x="81.3536%" y="229" width="2.0213%" height="15" fill="rgb(228,201,54)" fg:x="3582" fg:w="89"/><text x="81.6036%" y="239.50">c..</text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (88 samples, 2.00%)</title><rect x="81.3763%" y="213" width="1.9986%" height="15" fill="rgb(222,22,37)" fg:x="3583" fg:w="88"/><text x="81.6263%" y="223.50">c..</text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (87 samples, 1.98%)</title><rect x="81.3990%" y="197" width="1.9759%" height="15" fill="rgb(237,53,32)" fg:x="3584" fg:w="87"/><text x="81.6490%" y="207.50">c..</text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (45 samples, 1.02%)</title><rect x="82.3529%" y="181" width="1.0220%" height="15" fill="rgb(233,25,53)" fg:x="3626" fg:w="45"/><text x="82.6029%" y="191.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (45 samples, 1.02%)</title><rect x="82.3529%" y="165" width="1.0220%" height="15" fill="rgb(210,40,34)" fg:x="3626" fg:w="45"/><text x="82.6029%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`write (44 samples, 1.00%)</title><rect x="82.3757%" y="149" width="0.9993%" height="15" fill="rgb(241,220,44)" fg:x="3627" fg:w="44"/><text x="82.6257%" y="159.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (14 samples, 0.32%)</title><rect x="83.3750%" y="229" width="0.3180%" height="15" fill="rgb(235,28,35)" fg:x="3671" fg:w="14"/><text x="83.6250%" y="239.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (13 samples, 0.30%)</title><rect x="83.3977%" y="213" width="0.2953%" height="15" fill="rgb(210,56,17)" fg:x="3672" fg:w="13"/><text x="83.6477%" y="223.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (12 samples, 0.27%)</title><rect x="83.4204%" y="197" width="0.2725%" height="15" fill="rgb(224,130,29)" fg:x="3673" fg:w="12"/><text x="83.6704%" y="207.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (11 samples, 0.25%)</title><rect x="83.4431%" y="181" width="0.2498%" height="15" fill="rgb(235,212,8)" fg:x="3674" fg:w="11"/><text x="83.6931%" y="191.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (8 samples, 0.18%)</title><rect x="83.5112%" y="165" width="0.1817%" height="15" fill="rgb(223,33,50)" fg:x="3677" fg:w="8"/><text x="83.7612%" y="175.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (6 samples, 0.14%)</title><rect x="83.5567%" y="149" width="0.1363%" height="15" fill="rgb(219,149,13)" fg:x="3679" fg:w="6"/><text x="83.8067%" y="159.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (6 samples, 0.14%)</title><rect x="83.5567%" y="133" width="0.1363%" height="15" fill="rgb(250,156,29)" fg:x="3679" fg:w="6"/><text x="83.8067%" y="143.50"></text></g><g><title>colors`core::slice::memchr::memrchr (4 samples, 0.09%)</title><rect x="83.6021%" y="117" width="0.0908%" height="15" fill="rgb(216,193,19)" fg:x="3681" fg:w="4"/><text x="83.8521%" y="127.50"></text></g><g><title>colors`&lt;&amp;T as core::fmt::Debug&gt;::fmt (129 samples, 2.93%)</title><rect x="80.7858%" y="293" width="2.9298%" height="15" fill="rgb(216,135,14)" fg:x="3557" fg:w="129"/><text x="81.0358%" y="303.50">co..</text></g><g><title>colors`core::fmt::Formatter::debug_tuple_field1_finish (129 samples, 2.93%)</title><rect x="80.7858%" y="277" width="2.9298%" height="15" fill="rgb(241,47,5)" fg:x="3557" fg:w="129"/><text x="81.0358%" y="287.50">co..</text></g><g><title>colors`core::fmt::builders::DebugTuple::field (104 samples, 2.36%)</title><rect x="81.3536%" y="261" width="2.3620%" height="15" fill="rgb(233,42,35)" fg:x="3582" fg:w="104"/><text x="81.6036%" y="271.50">co..</text></g><g><title>colors`core::fmt::num::imp::_&lt;impl core::fmt::Display for u32&gt;::fmt (15 samples, 0.34%)</title><rect x="83.3750%" y="245" width="0.3407%" height="15" fill="rgb(231,13,6)" fg:x="3671" fg:w="15"/><text x="83.6250%" y="255.50"></text></g><g><title>colors`core::fmt::Formatter::pad_integral (1 samples, 0.02%)</title><rect x="83.6929%" y="229" width="0.0227%" height="15" fill="rgb(207,181,40)" fg:x="3685" fg:w="1"/><text x="83.9429%" y="239.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="83.6929%" y="213" width="0.0227%" height="15" fill="rgb(254,173,49)" fg:x="3685" fg:w="1"/><text x="83.9429%" y="223.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (48 samples, 1.09%)</title><rect x="83.8519%" y="213" width="1.0902%" height="15" fill="rgb(221,1,38)" fg:x="3692" fg:w="48"/><text x="84.1019%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`write (48 samples, 1.09%)</title><rect x="83.8519%" y="197" width="1.0902%" height="15" fill="rgb(206,124,46)" fg:x="3692" fg:w="48"/><text x="84.1019%" y="207.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (50 samples, 1.14%)</title><rect x="83.8292%" y="245" width="1.1356%" height="15" fill="rgb(249,21,11)" fg:x="3691" fg:w="50"/><text x="84.0792%" y="255.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (49 samples, 1.11%)</title><rect x="83.8519%" y="229" width="1.1129%" height="15" fill="rgb(222,201,40)" fg:x="3692" fg:w="49"/><text x="84.1019%" y="239.50"></text></g><g><title>colors`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.02%)</title><rect x="84.9421%" y="213" width="0.0227%" height="15" fill="rgb(235,61,29)" fg:x="3740" fg:w="1"/><text x="85.1921%" y="223.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (54 samples, 1.23%)</title><rect x="84.9648%" y="229" width="1.2264%" height="15" fill="rgb(219,207,3)" fg:x="3741" fg:w="54"/><text x="85.2148%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`write (54 samples, 1.23%)</title><rect x="84.9648%" y="213" width="1.2264%" height="15" fill="rgb(222,56,46)" fg:x="3741" fg:w="54"/><text x="85.2148%" y="223.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (110 samples, 2.50%)</title><rect x="83.7156%" y="293" width="2.4983%" height="15" fill="rgb(239,76,54)" fg:x="3686" fg:w="110"/><text x="83.9656%" y="303.50">co..</text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (110 samples, 2.50%)</title><rect x="83.7156%" y="277" width="2.4983%" height="15" fill="rgb(231,124,27)" fg:x="3686" fg:w="110"/><text x="83.9656%" y="287.50">co..</text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (108 samples, 2.45%)</title><rect x="83.7611%" y="261" width="2.4529%" height="15" fill="rgb(249,195,6)" fg:x="3688" fg:w="108"/><text x="84.0111%" y="271.50">co..</text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (55 samples, 1.25%)</title><rect x="84.9648%" y="245" width="1.2491%" height="15" fill="rgb(237,174,47)" fg:x="3741" fg:w="55"/><text x="85.2148%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="86.1912%" y="229" width="0.0227%" height="15" fill="rgb(206,201,31)" fg:x="3795" fg:w="1"/><text x="86.4412%" y="239.50"></text></g><g><title>colors`&lt;core::option::Option&lt;T&gt; as core::fmt::Debug&gt;::fmt (249 samples, 5.66%)</title><rect x="80.5814%" y="341" width="5.6552%" height="15" fill="rgb(231,57,52)" fg:x="3548" fg:w="249"/><text x="80.8314%" y="351.50">colors`..</text></g><g><title>colors`core::fmt::Formatter::debug_tuple_field1_finish (249 samples, 5.66%)</title><rect x="80.5814%" y="325" width="5.6552%" height="15" fill="rgb(248,177,22)" fg:x="3548" fg:w="249"/><text x="80.8314%" y="335.50">colors`..</text></g><g><title>colors`core::fmt::builders::DebugTuple::field (241 samples, 5.47%)</title><rect x="80.7631%" y="309" width="5.4735%" height="15" fill="rgb(215,211,37)" fg:x="3556" fg:w="241"/><text x="81.0131%" y="319.50">colors`..</text></g><g><title>colors`core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.02%)</title><rect x="86.2139%" y="293" width="0.0227%" height="15" fill="rgb(241,128,51)" fg:x="3796" fg:w="1"/><text x="86.4639%" y="303.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.05%)</title><rect x="86.3956%" y="245" width="0.0454%" height="15" fill="rgb(227,165,31)" fg:x="3804" fg:w="2"/><text x="86.6456%" y="255.50"></text></g><g><title>colors`core::slice::memchr::memrchr (2 samples, 0.05%)</title><rect x="86.3956%" y="229" width="0.0454%" height="15" fill="rgb(228,167,24)" fg:x="3804" fg:w="2"/><text x="86.6456%" y="239.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.09%)</title><rect x="86.3956%" y="261" width="0.0908%" height="15" fill="rgb(228,143,12)" fg:x="3804" fg:w="4"/><text x="86.6456%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.05%)</title><rect x="86.4411%" y="245" width="0.0454%" height="15" fill="rgb(249,149,8)" fg:x="3806" fg:w="2"/><text x="86.6911%" y="255.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (12 samples, 0.27%)</title><rect x="86.2367%" y="309" width="0.2725%" height="15" fill="rgb(243,35,44)" fg:x="3797" fg:w="12"/><text x="86.4867%" y="319.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (12 samples, 0.27%)</title><rect x="86.2367%" y="293" width="0.2725%" height="15" fill="rgb(246,89,9)" fg:x="3797" fg:w="12"/><text x="86.4867%" y="303.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (9 samples, 0.20%)</title><rect x="86.3048%" y="277" width="0.2044%" height="15" fill="rgb(233,213,13)" fg:x="3800" fg:w="9"/><text x="86.5548%" y="287.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="86.4865%" y="261" width="0.0227%" height="15" fill="rgb(233,141,41)" fg:x="3808" fg:w="1"/><text x="86.7365%" y="271.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (52 samples, 1.18%)</title><rect x="86.6455%" y="245" width="1.1810%" height="15" fill="rgb(239,167,4)" fg:x="3815" fg:w="52"/><text x="86.8955%" y="255.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (52 samples, 1.18%)</title><rect x="86.6455%" y="229" width="1.1810%" height="15" fill="rgb(209,217,16)" fg:x="3815" fg:w="52"/><text x="86.8955%" y="239.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (52 samples, 1.18%)</title><rect x="86.6455%" y="213" width="1.1810%" height="15" fill="rgb(219,88,35)" fg:x="3815" fg:w="52"/><text x="86.8955%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`write (52 samples, 1.18%)</title><rect x="86.6455%" y="197" width="1.1810%" height="15" fill="rgb(220,193,23)" fg:x="3815" fg:w="52"/><text x="86.8955%" y="207.50"></text></g><g><title>colors`core::slice::memchr::memrchr (1 samples, 0.02%)</title><rect x="87.8492%" y="213" width="0.0227%" height="15" fill="rgb(230,90,52)" fg:x="3868" fg:w="1"/><text x="88.0992%" y="223.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (51 samples, 1.16%)</title><rect x="87.8265%" y="229" width="1.1583%" height="15" fill="rgb(252,106,19)" fg:x="3867" fg:w="51"/><text x="88.0765%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`write (49 samples, 1.11%)</title><rect x="87.8719%" y="213" width="1.1129%" height="15" fill="rgb(206,74,20)" fg:x="3869" fg:w="49"/><text x="88.1219%" y="223.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (109 samples, 2.48%)</title><rect x="86.5319%" y="293" width="2.4756%" height="15" fill="rgb(230,138,44)" fg:x="3810" fg:w="109"/><text x="86.7819%" y="303.50">co..</text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (109 samples, 2.48%)</title><rect x="86.5319%" y="277" width="2.4756%" height="15" fill="rgb(235,182,43)" fg:x="3810" fg:w="109"/><text x="86.7819%" y="287.50">co..</text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (107 samples, 2.43%)</title><rect x="86.5773%" y="261" width="2.4302%" height="15" fill="rgb(242,16,51)" fg:x="3812" fg:w="107"/><text x="86.8273%" y="271.50">co..</text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (52 samples, 1.18%)</title><rect x="87.8265%" y="245" width="1.1810%" height="15" fill="rgb(248,9,4)" fg:x="3867" fg:w="52"/><text x="88.0765%" y="255.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="88.9848%" y="229" width="0.0227%" height="15" fill="rgb(210,31,22)" fg:x="3918" fg:w="1"/><text x="89.2348%" y="239.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="89.0075%" y="245" width="0.0227%" height="15" fill="rgb(239,54,39)" fg:x="3919" fg:w="1"/><text x="89.2575%" y="255.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="89.0075%" y="229" width="0.0227%" height="15" fill="rgb(230,99,41)" fg:x="3919" fg:w="1"/><text x="89.2575%" y="239.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="89.0075%" y="213" width="0.0227%" height="15" fill="rgb(253,106,12)" fg:x="3919" fg:w="1"/><text x="89.2575%" y="223.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.05%)</title><rect x="89.3027%" y="149" width="0.0454%" height="15" fill="rgb(213,46,41)" fg:x="3932" fg:w="2"/><text x="89.5527%" y="159.50"></text></g><g><title>colors`core::slice::memchr::memrchr (1 samples, 0.02%)</title><rect x="89.3255%" y="133" width="0.0227%" height="15" fill="rgb(215,133,35)" fg:x="3933" fg:w="1"/><text x="89.5755%" y="143.50"></text></g><g><title>colors`&lt;cosmic_text::glyph_cache::CacheKeyFlags as core::fmt::Debug&gt;::fmt (139 samples, 3.16%)</title><rect x="86.2367%" y="341" width="3.1569%" height="15" fill="rgb(213,28,5)" fg:x="3797" fg:w="139"/><text x="86.4867%" y="351.50">col..</text></g><g><title>colors`core::fmt::Formatter::debug_tuple_field1_finish (139 samples, 3.16%)</title><rect x="86.2367%" y="325" width="3.1569%" height="15" fill="rgb(215,77,49)" fg:x="3797" fg:w="139"/><text x="86.4867%" y="335.50">col..</text></g><g><title>colors`core::fmt::builders::DebugTuple::field (127 samples, 2.88%)</title><rect x="86.5092%" y="309" width="2.8844%" height="15" fill="rgb(248,100,22)" fg:x="3809" fg:w="127"/><text x="86.7592%" y="319.50">co..</text></g><g><title>colors`&lt;cosmic_text::glyph_cache::_::InternalBitFlags as core::fmt::Debug&gt;::fmt (17 samples, 0.39%)</title><rect x="89.0075%" y="293" width="0.3861%" height="15" fill="rgb(208,67,9)" fg:x="3919" fg:w="17"/><text x="89.2575%" y="303.50"></text></g><g><title>colors`core::fmt::write (17 samples, 0.39%)</title><rect x="89.0075%" y="277" width="0.3861%" height="15" fill="rgb(219,133,21)" fg:x="3919" fg:w="17"/><text x="89.2575%" y="287.50"></text></g><g><title>colors`core::fmt::num::_&lt;impl core::fmt::LowerHex for i32&gt;::fmt (17 samples, 0.39%)</title><rect x="89.0075%" y="261" width="0.3861%" height="15" fill="rgb(246,46,29)" fg:x="3919" fg:w="17"/><text x="89.2575%" y="271.50"></text></g><g><title>colors`core::fmt::Formatter::pad_integral (16 samples, 0.36%)</title><rect x="89.0302%" y="245" width="0.3634%" height="15" fill="rgb(246,185,52)" fg:x="3920" fg:w="16"/><text x="89.2802%" y="255.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (16 samples, 0.36%)</title><rect x="89.0302%" y="229" width="0.3634%" height="15" fill="rgb(252,136,11)" fg:x="3920" fg:w="16"/><text x="89.2802%" y="239.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (14 samples, 0.32%)</title><rect x="89.0756%" y="213" width="0.3180%" height="15" fill="rgb(219,138,53)" fg:x="3922" fg:w="14"/><text x="89.3256%" y="223.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (12 samples, 0.27%)</title><rect x="89.1211%" y="197" width="0.2725%" height="15" fill="rgb(211,51,23)" fg:x="3924" fg:w="12"/><text x="89.3711%" y="207.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (6 samples, 0.14%)</title><rect x="89.2573%" y="181" width="0.1363%" height="15" fill="rgb(247,221,28)" fg:x="3930" fg:w="6"/><text x="89.5073%" y="191.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.09%)</title><rect x="89.3027%" y="165" width="0.0908%" height="15" fill="rgb(251,222,45)" fg:x="3932" fg:w="4"/><text x="89.5527%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.05%)</title><rect x="89.3482%" y="149" width="0.0454%" height="15" fill="rgb(217,162,53)" fg:x="3934" fg:w="2"/><text x="89.5982%" y="159.50"></text></g><g><title>colors`&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.02%)</title><rect x="89.3936%" y="309" width="0.0227%" height="15" fill="rgb(229,93,14)" fg:x="3936" fg:w="1"/><text x="89.6436%" y="319.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.05%)</title><rect x="89.5072%" y="245" width="0.0454%" height="15" fill="rgb(209,67,49)" fg:x="3941" fg:w="2"/><text x="89.7572%" y="255.50"></text></g><g><title>colors`core::slice::memchr::memrchr (1 samples, 0.02%)</title><rect x="89.5299%" y="229" width="0.0227%" height="15" fill="rgb(213,87,29)" fg:x="3942" fg:w="1"/><text x="89.7799%" y="239.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="89.5526%" y="245" width="0.0227%" height="15" fill="rgb(205,151,52)" fg:x="3943" fg:w="1"/><text x="89.8026%" y="255.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (6 samples, 0.14%)</title><rect x="89.4617%" y="277" width="0.1363%" height="15" fill="rgb(253,215,39)" fg:x="3939" fg:w="6"/><text x="89.7117%" y="287.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.09%)</title><rect x="89.5072%" y="261" width="0.0908%" height="15" fill="rgb(221,220,41)" fg:x="3941" fg:w="4"/><text x="89.7572%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="89.5753%" y="245" width="0.0227%" height="15" fill="rgb(218,133,21)" fg:x="3944" fg:w="1"/><text x="89.8253%" y="255.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (10 samples, 0.23%)</title><rect x="89.4163%" y="309" width="0.2271%" height="15" fill="rgb(221,193,43)" fg:x="3937" fg:w="10"/><text x="89.6663%" y="319.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (8 samples, 0.18%)</title><rect x="89.4617%" y="293" width="0.1817%" height="15" fill="rgb(240,128,52)" fg:x="3939" fg:w="8"/><text x="89.7117%" y="303.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.05%)</title><rect x="89.5980%" y="277" width="0.0454%" height="15" fill="rgb(253,114,12)" fg:x="3945" fg:w="2"/><text x="89.8480%" y="287.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (53 samples, 1.20%)</title><rect x="89.6661%" y="245" width="1.2037%" height="15" fill="rgb(215,223,47)" fg:x="3948" fg:w="53"/><text x="89.9161%" y="255.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (53 samples, 1.20%)</title><rect x="89.6661%" y="229" width="1.2037%" height="15" fill="rgb(248,225,23)" fg:x="3948" fg:w="53"/><text x="89.9161%" y="239.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (53 samples, 1.20%)</title><rect x="89.6661%" y="213" width="1.2037%" height="15" fill="rgb(250,108,0)" fg:x="3948" fg:w="53"/><text x="89.9161%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`write (53 samples, 1.20%)</title><rect x="89.6661%" y="197" width="1.2037%" height="15" fill="rgb(228,208,7)" fg:x="3948" fg:w="53"/><text x="89.9161%" y="207.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (103 samples, 2.34%)</title><rect x="89.6434%" y="293" width="2.3393%" height="15" fill="rgb(244,45,10)" fg:x="3947" fg:w="103"/><text x="89.8934%" y="303.50">c..</text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (103 samples, 2.34%)</title><rect x="89.6434%" y="277" width="2.3393%" height="15" fill="rgb(207,125,25)" fg:x="3947" fg:w="103"/><text x="89.8934%" y="287.50">c..</text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (103 samples, 2.34%)</title><rect x="89.6434%" y="261" width="2.3393%" height="15" fill="rgb(210,195,18)" fg:x="3947" fg:w="103"/><text x="89.8934%" y="271.50">c..</text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (49 samples, 1.11%)</title><rect x="90.8699%" y="245" width="1.1129%" height="15" fill="rgb(249,80,12)" fg:x="4001" fg:w="49"/><text x="91.1199%" y="255.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (49 samples, 1.11%)</title><rect x="90.8699%" y="229" width="1.1129%" height="15" fill="rgb(221,65,9)" fg:x="4001" fg:w="49"/><text x="91.1199%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`write (49 samples, 1.11%)</title><rect x="90.8699%" y="213" width="1.1129%" height="15" fill="rgb(235,49,36)" fg:x="4001" fg:w="49"/><text x="91.1199%" y="223.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.05%)</title><rect x="92.1871%" y="213" width="0.0454%" height="15" fill="rgb(225,32,20)" fg:x="4059" fg:w="2"/><text x="92.4371%" y="223.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.05%)</title><rect x="92.1871%" y="197" width="0.0454%" height="15" fill="rgb(215,141,46)" fg:x="4059" fg:w="2"/><text x="92.4371%" y="207.50"></text></g><g><title>colors`core::slice::memchr::memrchr (1 samples, 0.02%)</title><rect x="92.2099%" y="181" width="0.0227%" height="15" fill="rgb(250,160,47)" fg:x="4060" fg:w="1"/><text x="92.4599%" y="191.50"></text></g><g><title>colors`&lt;fontdb::Weight as core::fmt::Debug&gt;::fmt (126 samples, 2.86%)</title><rect x="89.3936%" y="341" width="2.8617%" height="15" fill="rgb(216,222,40)" fg:x="3936" fg:w="126"/><text x="89.6436%" y="351.50">co..</text></g><g><title>colors`core::fmt::Formatter::debug_tuple_field1_finish (126 samples, 2.86%)</title><rect x="89.3936%" y="325" width="2.8617%" height="15" fill="rgb(234,217,39)" fg:x="3936" fg:w="126"/><text x="89.6436%" y="335.50">co..</text></g><g><title>colors`core::fmt::builders::DebugTuple::field (115 samples, 2.61%)</title><rect x="89.6434%" y="309" width="2.6119%" height="15" fill="rgb(207,178,40)" fg:x="3947" fg:w="115"/><text x="89.8934%" y="319.50">co..</text></g><g><title>colors`core::fmt::num::imp::_&lt;impl core::fmt::Display for u16&gt;::fmt (12 samples, 0.27%)</title><rect x="91.9827%" y="293" width="0.2725%" height="15" fill="rgb(221,136,13)" fg:x="4050" fg:w="12"/><text x="92.2327%" y="303.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (12 samples, 0.27%)</title><rect x="91.9827%" y="277" width="0.2725%" height="15" fill="rgb(249,199,10)" fg:x="4050" fg:w="12"/><text x="92.2327%" y="287.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (11 samples, 0.25%)</title><rect x="92.0055%" y="261" width="0.2498%" height="15" fill="rgb(249,222,13)" fg:x="4051" fg:w="11"/><text x="92.2555%" y="271.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (9 samples, 0.20%)</title><rect x="92.0509%" y="245" width="0.2044%" height="15" fill="rgb(244,185,38)" fg:x="4053" fg:w="9"/><text x="92.3009%" y="255.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (4 samples, 0.09%)</title><rect x="92.1644%" y="229" width="0.0908%" height="15" fill="rgb(236,202,9)" fg:x="4058" fg:w="4"/><text x="92.4144%" y="239.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="92.2326%" y="213" width="0.0227%" height="15" fill="rgb(250,229,37)" fg:x="4061" fg:w="1"/><text x="92.4826%" y="223.50"></text></g><g><title>colors`core::fmt::Formatter::debug_struct_fields_finish (1,352 samples, 30.71%)</title><rect x="61.5717%" y="373" width="30.7063%" height="15" fill="rgb(206,174,23)" fg:x="2711" fg:w="1352"/><text x="61.8217%" y="383.50">colors`core::fmt::Formatter::debug_struct_fields_f..</text></g><g><title>colors`core::fmt::builders::DebugStruct::field (1,332 samples, 30.25%)</title><rect x="62.0259%" y="357" width="30.2521%" height="15" fill="rgb(211,33,43)" fg:x="2731" fg:w="1332"/><text x="62.2759%" y="367.50">colors`core::fmt::builders::DebugStruct::field</text></g><g><title>colors`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.02%)</title><rect x="92.2553%" y="341" width="0.0227%" height="15" fill="rgb(245,58,50)" fg:x="4062" fg:w="1"/><text x="92.5053%" y="351.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="92.2553%" y="325" width="0.0227%" height="15" fill="rgb(244,68,36)" fg:x="4062" fg:w="1"/><text x="92.5053%" y="335.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="92.2553%" y="309" width="0.0227%" height="15" fill="rgb(232,229,15)" fg:x="4062" fg:w="1"/><text x="92.5053%" y="319.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="92.2553%" y="293" width="0.0227%" height="15" fill="rgb(254,30,23)" fg:x="4062" fg:w="1"/><text x="92.5053%" y="303.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="92.2553%" y="277" width="0.0227%" height="15" fill="rgb(235,160,14)" fg:x="4062" fg:w="1"/><text x="92.5053%" y="287.50"></text></g><g><title>colors`&lt;&amp;T as core::fmt::Debug&gt;::fmt (1,354 samples, 30.75%)</title><rect x="61.5489%" y="389" width="30.7518%" height="15" fill="rgb(212,155,44)" fg:x="2710" fg:w="1354"/><text x="61.7989%" y="399.50">colors`&lt;&amp;T as core::fmt::Debug&gt;::fmt</text></g><g><title>colors`core::fmt::builders::DebugStruct::field (1 samples, 0.02%)</title><rect x="92.2780%" y="373" width="0.0227%" height="15" fill="rgb(226,2,50)" fg:x="4063" fg:w="1"/><text x="92.5280%" y="383.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_char (2 samples, 0.05%)</title><rect x="92.3007%" y="389" width="0.0454%" height="15" fill="rgb(234,177,6)" fg:x="4064" fg:w="2"/><text x="92.5507%" y="399.50"></text></g><g><title>colors`core::slice::memchr::memrchr (1 samples, 0.02%)</title><rect x="92.4597%" y="325" width="0.0227%" height="15" fill="rgb(217,24,9)" fg:x="4071" fg:w="1"/><text x="92.7097%" y="335.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (113 samples, 2.57%)</title><rect x="92.4370%" y="341" width="2.5664%" height="15" fill="rgb(220,13,46)" fg:x="4070" fg:w="113"/><text x="92.6870%" y="351.50">co..</text></g><g><title>libsystem_kernel.dylib`write (111 samples, 2.52%)</title><rect x="92.4824%" y="325" width="2.5210%" height="15" fill="rgb(239,221,27)" fg:x="4072" fg:w="111"/><text x="92.7324%" y="335.50">li..</text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (116 samples, 2.63%)</title><rect x="92.4143%" y="373" width="2.6346%" height="15" fill="rgb(222,198,25)" fg:x="4069" fg:w="116"/><text x="92.6643%" y="383.50">co..</text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (115 samples, 2.61%)</title><rect x="92.4370%" y="357" width="2.6119%" height="15" fill="rgb(211,99,13)" fg:x="4070" fg:w="115"/><text x="92.6870%" y="367.50">co..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.05%)</title><rect x="95.0034%" y="341" width="0.0454%" height="15" fill="rgb(232,111,31)" fg:x="4183" fg:w="2"/><text x="95.2534%" y="351.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (57 samples, 1.29%)</title><rect x="95.0488%" y="357" width="1.2946%" height="15" fill="rgb(245,82,37)" fg:x="4185" fg:w="57"/><text x="95.2988%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`write (57 samples, 1.29%)</title><rect x="95.0488%" y="341" width="1.2946%" height="15" fill="rgb(227,149,46)" fg:x="4185" fg:w="57"/><text x="95.2988%" y="351.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (177 samples, 4.02%)</title><rect x="92.3461%" y="389" width="4.0200%" height="15" fill="rgb(218,36,50)" fg:x="4066" fg:w="177"/><text x="92.5961%" y="399.50">colo..</text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (58 samples, 1.32%)</title><rect x="95.0488%" y="373" width="1.3173%" height="15" fill="rgb(226,80,48)" fg:x="4185" fg:w="58"/><text x="95.2988%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="96.3434%" y="357" width="0.0227%" height="15" fill="rgb(238,224,15)" fg:x="4242" fg:w="1"/><text x="96.5934%" y="367.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="96.4115%" y="325" width="0.0227%" height="15" fill="rgb(241,136,10)" fg:x="4245" fg:w="1"/><text x="96.6615%" y="335.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="96.4342%" y="325" width="0.0227%" height="15" fill="rgb(208,32,45)" fg:x="4246" fg:w="1"/><text x="96.6842%" y="335.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.07%)</title><rect x="96.4115%" y="341" width="0.0681%" height="15" fill="rgb(207,135,9)" fg:x="4245" fg:w="3"/><text x="96.6615%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="96.4570%" y="325" width="0.0227%" height="15" fill="rgb(206,86,44)" fg:x="4247" fg:w="1"/><text x="96.7070%" y="335.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_char (6 samples, 0.14%)</title><rect x="96.3661%" y="373" width="0.1363%" height="15" fill="rgb(245,177,15)" fg:x="4243" fg:w="6"/><text x="96.6161%" y="383.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (4 samples, 0.09%)</title><rect x="96.4115%" y="357" width="0.0908%" height="15" fill="rgb(206,64,50)" fg:x="4245" fg:w="4"/><text x="96.6615%" y="367.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="96.4797%" y="341" width="0.0227%" height="15" fill="rgb(234,36,40)" fg:x="4248" fg:w="1"/><text x="96.7297%" y="351.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="96.5024%" y="373" width="0.0227%" height="15" fill="rgb(213,64,8)" fg:x="4249" fg:w="1"/><text x="96.7524%" y="383.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="96.5024%" y="357" width="0.0227%" height="15" fill="rgb(210,75,36)" fg:x="4249" fg:w="1"/><text x="96.7524%" y="367.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="96.5024%" y="341" width="0.0227%" height="15" fill="rgb(229,88,21)" fg:x="4249" fg:w="1"/><text x="96.7524%" y="351.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="96.5024%" y="325" width="0.0227%" height="15" fill="rgb(252,204,47)" fg:x="4249" fg:w="1"/><text x="96.7524%" y="335.50"></text></g><g><title>colors`core::slice::memchr::memrchr (1 samples, 0.02%)</title><rect x="96.5024%" y="309" width="0.0227%" height="15" fill="rgb(208,77,27)" fg:x="4249" fg:w="1"/><text x="96.7524%" y="319.50"></text></g><g><title>colors`core::unicode::printable::is_printable (13 samples, 0.30%)</title><rect x="96.5251%" y="357" width="0.2953%" height="15" fill="rgb(221,76,26)" fg:x="4250" fg:w="13"/><text x="96.7751%" y="367.50"></text></g><g><title>colors`&lt;str as core::fmt::Debug&gt;::fmt (21 samples, 0.48%)</title><rect x="96.3661%" y="389" width="0.4769%" height="15" fill="rgb(225,139,18)" fg:x="4243" fg:w="21"/><text x="96.6161%" y="399.50"></text></g><g><title>colors`core::char::methods::_&lt;impl char&gt;::escape_debug_ext (14 samples, 0.32%)</title><rect x="96.5251%" y="373" width="0.3180%" height="15" fill="rgb(230,137,11)" fg:x="4250" fg:w="14"/><text x="96.7751%" y="383.50"></text></g><g><title>colors`core::unicode::unicode_data::grapheme_extend::lookup_slow (1 samples, 0.02%)</title><rect x="96.8203%" y="357" width="0.0227%" height="15" fill="rgb(212,28,1)" fg:x="4263" fg:w="1"/><text x="97.0703%" y="367.50"></text></g><g><title>colors`core::fmt::builders::DebugTuple::field (1,556 samples, 35.34%)</title><rect x="61.5262%" y="405" width="35.3395%" height="15" fill="rgb(248,164,17)" fg:x="2709" fg:w="1556"/><text x="61.7762%" y="415.50">colors`core::fmt::builders::DebugTuple::field</text></g><g><title>colors`core::fmt::Write::write_char (1 samples, 0.02%)</title><rect x="96.8431%" y="389" width="0.0227%" height="15" fill="rgb(222,171,42)" fg:x="4264" fg:w="1"/><text x="97.0931%" y="399.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.05%)</title><rect x="96.8658%" y="357" width="0.0454%" height="15" fill="rgb(243,84,45)" fg:x="4265" fg:w="2"/><text x="97.1158%" y="367.50"></text></g><g><title>colors`core::slice::memchr::memrchr (2 samples, 0.05%)</title><rect x="96.8658%" y="341" width="0.0454%" height="15" fill="rgb(252,49,23)" fg:x="4265" fg:w="2"/><text x="97.1158%" y="351.50"></text></g><g><title>colors`&lt;&amp;T as core::fmt::Debug&gt;::fmt (1,559 samples, 35.41%)</title><rect x="61.5262%" y="421" width="35.4077%" height="15" fill="rgb(215,19,7)" fg:x="2709" fg:w="1559"/><text x="61.7762%" y="431.50">colors`&lt;&amp;T as core::fmt::Debug&gt;::fmt</text></g><g><title>colors`core::fmt::builders::DebugTuple::finish (3 samples, 0.07%)</title><rect x="96.8658%" y="405" width="0.0681%" height="15" fill="rgb(238,81,41)" fg:x="4265" fg:w="3"/><text x="97.1158%" y="415.50"></text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (3 samples, 0.07%)</title><rect x="96.8658%" y="389" width="0.0681%" height="15" fill="rgb(210,199,37)" fg:x="4265" fg:w="3"/><text x="97.1158%" y="399.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.07%)</title><rect x="96.8658%" y="373" width="0.0681%" height="15" fill="rgb(244,192,49)" fg:x="4265" fg:w="3"/><text x="97.1158%" y="383.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="96.9112%" y="357" width="0.0227%" height="15" fill="rgb(226,211,11)" fg:x="4267" fg:w="1"/><text x="97.1612%" y="367.50"></text></g><g><title>colors`DYLD-STUB$$write (1 samples, 0.02%)</title><rect x="96.9339%" y="373" width="0.0227%" height="15" fill="rgb(236,162,54)" fg:x="4268" fg:w="1"/><text x="97.1839%" y="383.50"></text></g><g><title>colors`core::slice::memchr::memrchr (1 samples, 0.02%)</title><rect x="96.9566%" y="373" width="0.0227%" height="15" fill="rgb(220,229,9)" fg:x="4269" fg:w="1"/><text x="97.2066%" y="383.50"></text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::draw_buffer (4,309 samples, 97.87%)</title><rect x="0.0908%" y="517" width="97.8651%" height="15" fill="rgb(250,87,22)" fg:x="4" fg:w="4309"/><text x="0.3408%" y="527.50">colors`soft_ratatui::soft_backend::SoftBackend::draw_buffer</text></g><g><title>colors`std::io::stdio::_print (1,604 samples, 36.43%)</title><rect x="61.5262%" y="501" width="36.4297%" height="15" fill="rgb(239,43,17)" fg:x="2709" fg:w="1604"/><text x="61.7762%" y="511.50">colors`std::io::stdio::_print</text></g><g><title>colors`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1,604 samples, 36.43%)</title><rect x="61.5262%" y="485" width="36.4297%" height="15" fill="rgb(231,177,25)" fg:x="2709" fg:w="1604"/><text x="61.7762%" y="495.50">colors`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_f..</text></g><g><title>colors`core::fmt::write (1,604 samples, 36.43%)</title><rect x="61.5262%" y="469" width="36.4297%" height="15" fill="rgb(219,179,1)" fg:x="2709" fg:w="1604"/><text x="61.7762%" y="479.50">colors`core::fmt::write</text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as core::fmt::Debug&gt;::fmt (1,604 samples, 36.43%)</title><rect x="61.5262%" y="453" width="36.4297%" height="15" fill="rgb(238,219,53)" fg:x="2709" fg:w="1604"/><text x="61.7762%" y="463.50">colors`&lt;alloc::vec::Vec&lt;T,A&gt; as core::fmt::Debug&gt;::fmt</text></g><g><title>colors`core::fmt::builders::DebugSet::entry (1,604 samples, 36.43%)</title><rect x="61.5262%" y="437" width="36.4297%" height="15" fill="rgb(232,167,36)" fg:x="2709" fg:w="1604"/><text x="61.7762%" y="447.50">colors`core::fmt::builders::DebugSet::entry</text></g><g><title>colors`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (45 samples, 1.02%)</title><rect x="96.9339%" y="421" width="1.0220%" height="15" fill="rgb(244,19,51)" fg:x="4268" fg:w="45"/><text x="97.1839%" y="431.50"></text></g><g><title>colors`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (45 samples, 1.02%)</title><rect x="96.9339%" y="405" width="1.0220%" height="15" fill="rgb(224,6,22)" fg:x="4268" fg:w="45"/><text x="97.1839%" y="415.50"></text></g><g><title>colors`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (45 samples, 1.02%)</title><rect x="96.9339%" y="389" width="1.0220%" height="15" fill="rgb(224,145,5)" fg:x="4268" fg:w="45"/><text x="97.1839%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`write (43 samples, 0.98%)</title><rect x="96.9793%" y="373" width="0.9766%" height="15" fill="rgb(234,130,49)" fg:x="4270" fg:w="43"/><text x="97.2293%" y="383.50"></text></g><g><title>colors`std::fs::write::inner (1 samples, 0.02%)</title><rect x="97.9559%" y="517" width="0.0227%" height="15" fill="rgb(254,6,2)" fg:x="4313" fg:w="1"/><text x="98.2059%" y="527.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (1 samples, 0.02%)</title><rect x="97.9559%" y="501" width="0.0227%" height="15" fill="rgb(208,96,46)" fg:x="4313" fg:w="1"/><text x="98.2059%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.02%)</title><rect x="97.9559%" y="485" width="0.0227%" height="15" fill="rgb(239,3,39)" fg:x="4313" fg:w="1"/><text x="98.2059%" y="495.50"></text></g><g><title>colors`crc32fast::Hasher::update (1 samples, 0.02%)</title><rect x="98.2058%" y="485" width="0.0227%" height="15" fill="rgb(233,210,1)" fg:x="4324" fg:w="1"/><text x="98.4558%" y="495.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (4 samples, 0.09%)</title><rect x="98.3875%" y="469" width="0.0908%" height="15" fill="rgb(244,137,37)" fg:x="4332" fg:w="4"/><text x="98.6375%" y="479.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_data (43 samples, 0.98%)</title><rect x="98.2285%" y="485" width="0.9766%" height="15" fill="rgb(240,136,2)" fg:x="4325" fg:w="43"/><text x="98.4785%" y="495.50"></text></g><g><title>colors`simd_adler32::imp::scalar::update (32 samples, 0.73%)</title><rect x="98.4783%" y="469" width="0.7268%" height="15" fill="rgb(239,18,37)" fg:x="4336" fg:w="32"/><text x="98.7283%" y="479.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (2 samples, 0.05%)</title><rect x="99.2051%" y="485" width="0.0454%" height="15" fill="rgb(218,185,22)" fg:x="4368" fg:w="2"/><text x="99.4551%" y="495.50"></text></g><g><title>colors`png::encoder::Writer&lt;W&gt;::write_image_data (47 samples, 1.07%)</title><rect x="98.2058%" y="501" width="1.0675%" height="15" fill="rgb(225,218,4)" fg:x="4324" fg:w="47"/><text x="98.4558%" y="511.50"></text></g><g><title>colors`png::filter::filter (1 samples, 0.02%)</title><rect x="99.2505%" y="485" width="0.0227%" height="15" fill="rgb(230,182,32)" fg:x="4370" fg:w="1"/><text x="99.5005%" y="495.50"></text></g><g><title>colors`png::filter::filter_internal (1 samples, 0.02%)</title><rect x="99.2505%" y="469" width="0.0227%" height="15" fill="rgb(242,56,43)" fg:x="4370" fg:w="1"/><text x="99.5005%" y="479.50"></text></g><g><title>colors`png::filter::filter (1 samples, 0.02%)</title><rect x="99.2732%" y="501" width="0.0227%" height="15" fill="rgb(233,99,24)" fg:x="4371" fg:w="1"/><text x="99.5232%" y="511.50"></text></g><g><title>colors`tiny_skia::pixmap::PixmapRef::encode_png (59 samples, 1.34%)</title><rect x="97.9787%" y="517" width="1.3400%" height="15" fill="rgb(234,209,42)" fg:x="4314" fg:w="59"/><text x="98.2287%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="99.2959%" y="501" width="0.0227%" height="15" fill="rgb(227,7,12)" fg:x="4372" fg:w="1"/><text x="99.5459%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="99.2959%" y="485" width="0.0227%" height="15" fill="rgb(245,203,43)" fg:x="4372" fg:w="1"/><text x="99.5459%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`close (2 samples, 0.05%)</title><rect x="99.3186%" y="517" width="0.0454%" height="15" fill="rgb(238,205,33)" fg:x="4373" fg:w="2"/><text x="99.5686%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.02%)</title><rect x="99.3641%" y="517" width="0.0227%" height="15" fill="rgb(231,56,7)" fg:x="4375" fg:w="1"/><text x="99.6141%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.05%)</title><rect x="99.3868%" y="517" width="0.0454%" height="15" fill="rgb(244,186,29)" fg:x="4376" fg:w="2"/><text x="99.6368%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.05%)</title><rect x="99.3868%" y="501" width="0.0454%" height="15" fill="rgb(234,111,31)" fg:x="4376" fg:w="2"/><text x="99.6368%" y="511.50"></text></g><g><title>colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw (4,385 samples, 99.59%)</title><rect x="0.0681%" y="533" width="99.5912%" height="15" fill="rgb(241,149,10)" fg:x="3" fg:w="4385"/><text x="0.3181%" y="543.50">colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw</text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.23%)</title><rect x="99.4322%" y="517" width="0.2271%" height="15" fill="rgb(249,206,44)" fg:x="4378" fg:w="10"/><text x="99.6822%" y="527.50"></text></g><g><title>colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw (4,388 samples, 99.66%)</title><rect x="0.0227%" y="549" width="99.6593%" height="15" fill="rgb(251,153,30)" fg:x="1" fg:w="4388"/><text x="0.2727%" y="559.50">colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw</text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (1 samples, 0.02%)</title><rect x="99.6593%" y="533" width="0.0227%" height="15" fill="rgb(239,152,38)" fg:x="4388" fg:w="1"/><text x="99.9093%" y="543.50"></text></g><g><title>colors`cosmic_text::font::Font::new (1 samples, 0.02%)</title><rect x="99.6820%" y="373" width="0.0227%" height="15" fill="rgb(249,139,47)" fg:x="4389" fg:w="1"/><text x="99.9320%" y="383.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::from_slice (1 samples, 0.02%)</title><rect x="99.6820%" y="357" width="0.0227%" height="15" fill="rgb(244,64,35)" fg:x="4389" fg:w="1"/><text x="99.9320%" y="367.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::from_face (1 samples, 0.02%)</title><rect x="99.6820%" y="341" width="0.0227%" height="15" fill="rgb(216,46,15)" fg:x="4389" fg:w="1"/><text x="99.9320%" y="351.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="99.6820%" y="325" width="0.0227%" height="15" fill="rgb(250,74,19)" fg:x="4389" fg:w="1"/><text x="99.9320%" y="335.50"></text></g><g><title>colors`rustybuzz::hb::glyph_set::GlyphSetBuilder::finish (1 samples, 0.02%)</title><rect x="99.6820%" y="309" width="0.0227%" height="15" fill="rgb(249,42,33)" fg:x="4389" fg:w="1"/><text x="99.9320%" y="319.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (2 samples, 0.05%)</title><rect x="99.6820%" y="533" width="0.0454%" height="15" fill="rgb(242,149,17)" fg:x="4389" fg:w="2"/><text x="99.9320%" y="543.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (2 samples, 0.05%)</title><rect x="99.6820%" y="517" width="0.0454%" height="15" fill="rgb(244,29,21)" fg:x="4389" fg:w="2"/><text x="99.9320%" y="527.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (2 samples, 0.05%)</title><rect x="99.6820%" y="501" width="0.0454%" height="15" fill="rgb(220,130,37)" fg:x="4389" fg:w="2"/><text x="99.9320%" y="511.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (2 samples, 0.05%)</title><rect x="99.6820%" y="485" width="0.0454%" height="15" fill="rgb(211,67,2)" fg:x="4389" fg:w="2"/><text x="99.9320%" y="495.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (2 samples, 0.05%)</title><rect x="99.6820%" y="469" width="0.0454%" height="15" fill="rgb(235,68,52)" fg:x="4389" fg:w="2"/><text x="99.9320%" y="479.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (2 samples, 0.05%)</title><rect x="99.6820%" y="453" width="0.0454%" height="15" fill="rgb(246,142,3)" fg:x="4389" fg:w="2"/><text x="99.9320%" y="463.50"></text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (2 samples, 0.05%)</title><rect x="99.6820%" y="437" width="0.0454%" height="15" fill="rgb(241,25,7)" fg:x="4389" fg:w="2"/><text x="99.9320%" y="447.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (2 samples, 0.05%)</title><rect x="99.6820%" y="421" width="0.0454%" height="15" fill="rgb(242,119,39)" fg:x="4389" fg:w="2"/><text x="99.9320%" y="431.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="99.6820%" y="405" width="0.0454%" height="15" fill="rgb(241,98,45)" fg:x="4389" fg:w="2"/><text x="99.9320%" y="415.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (2 samples, 0.05%)</title><rect x="99.6820%" y="389" width="0.0454%" height="15" fill="rgb(254,28,30)" fg:x="4389" fg:w="2"/><text x="99.9320%" y="399.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::from_slice (1 samples, 0.02%)</title><rect x="99.7047%" y="373" width="0.0227%" height="15" fill="rgb(241,142,54)" fg:x="4390" fg:w="1"/><text x="99.9547%" y="383.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_locale (1 samples, 0.02%)</title><rect x="99.7275%" y="517" width="0.0227%" height="15" fill="rgb(222,85,15)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="527.50"></text></g><g><title>colors`sys_locale::get_locale (1 samples, 0.02%)</title><rect x="99.7275%" y="501" width="0.0227%" height="15" fill="rgb(210,85,47)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="511.50"></text></g><g><title>CoreFoundation`CFLocaleCopyPreferredLanguages (1 samples, 0.02%)</title><rect x="99.7275%" y="485" width="0.0227%" height="15" fill="rgb(224,206,25)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="495.50"></text></g><g><title>Foundation`@objc static NSLocale._preferredLanguagesForCurrentUser(_:) (1 samples, 0.02%)</title><rect x="99.7275%" y="469" width="0.0227%" height="15" fill="rgb(243,201,19)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="479.50"></text></g><g><title>Foundation`LocaleCache.preferredLanguages(forCurrentUser:) (1 samples, 0.02%)</title><rect x="99.7275%" y="453" width="0.0227%" height="15" fill="rgb(236,59,4)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="463.50"></text></g><g><title>CoreFoundation`_CFPreferencesCopyAppValueWithContainerAndConfiguration (1 samples, 0.02%)</title><rect x="99.7275%" y="437" width="0.0227%" height="15" fill="rgb(254,179,45)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="447.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:] (1 samples, 0.02%)</title><rect x="99.7275%" y="421" width="0.0227%" height="15" fill="rgb(226,14,10)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="431.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchListForIdentifier:container:cloudConfigurationURL:perform:] (1 samples, 0.02%)</title><rect x="99.7275%" y="405" width="0.0227%" height="15" fill="rgb(244,27,41)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="415.50"></text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke (1 samples, 0.02%)</title><rect x="99.7275%" y="389" width="0.0227%" height="15" fill="rgb(235,35,32)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="399.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchLists:] (1 samples, 0.02%)</title><rect x="99.7275%" y="373" width="0.0227%" height="15" fill="rgb(218,68,31)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="383.50"></text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke.152 (1 samples, 0.02%)</title><rect x="99.7275%" y="357" width="0.0227%" height="15" fill="rgb(207,120,37)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="367.50"></text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource addSourceForIdentifier:user:byHost:container:] (1 samples, 0.02%)</title><rect x="99.7275%" y="341" width="0.0227%" height="15" fill="rgb(227,98,0)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="351.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSourceForIdentifier:user:byHost:container:cloud:perform:] (1 samples, 0.02%)</title><rect x="99.7275%" y="325" width="0.0227%" height="15" fill="rgb(207,7,3)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="335.50"></text></g><g><title>CoreFoundation`__96-[_CFXPreferences(SourceAdditions) withSourceForIdentifier:user:byHost:container:cloud:perform:]_block_invoke.213 (1 samples, 0.02%)</title><rect x="99.7275%" y="309" width="0.0227%" height="15" fill="rgb(206,98,19)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="319.50"></text></g><g><title>CoreFoundation`_CFCopyHomeDirURLForUser (1 samples, 0.02%)</title><rect x="99.7275%" y="293" width="0.0227%" height="15" fill="rgb(217,5,26)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="303.50"></text></g><g><title>libsystem_info.dylib`getpwuid (1 samples, 0.02%)</title><rect x="99.7275%" y="277" width="0.0227%" height="15" fill="rgb(235,190,38)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="287.50"></text></g><g><title>libsystem_info.dylib`si_module_with_name (1 samples, 0.02%)</title><rect x="99.7275%" y="261" width="0.0227%" height="15" fill="rgb(247,86,24)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="271.50"></text></g><g><title>libsystem_info.dylib`si_module_static_search (1 samples, 0.02%)</title><rect x="99.7275%" y="245" width="0.0227%" height="15" fill="rgb(205,101,16)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="255.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.02%)</title><rect x="99.7275%" y="229" width="0.0227%" height="15" fill="rgb(246,168,33)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="239.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.02%)</title><rect x="99.7275%" y="213" width="0.0227%" height="15" fill="rgb(231,114,1)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="223.50"></text></g><g><title>libsystem_info.dylib`__si_module_static_search_block_invoke (1 samples, 0.02%)</title><rect x="99.7275%" y="197" width="0.0227%" height="15" fill="rgb(207,184,53)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="207.50"></text></g><g><title>libsystem_info.dylib`si_module_config_modules_for_category (1 samples, 0.02%)</title><rect x="99.7275%" y="181" width="0.0227%" height="15" fill="rgb(224,95,51)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="191.50"></text></g><g><title>libsystem_info.dylib`si_module_with_name (1 samples, 0.02%)</title><rect x="99.7275%" y="165" width="0.0227%" height="15" fill="rgb(212,188,45)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="175.50"></text></g><g><title>libsystem_info.dylib`si_module_static_ds (1 samples, 0.02%)</title><rect x="99.7275%" y="149" width="0.0227%" height="15" fill="rgb(223,154,38)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="159.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.02%)</title><rect x="99.7275%" y="133" width="0.0227%" height="15" fill="rgb(251,22,52)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="143.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.02%)</title><rect x="99.7275%" y="117" width="0.0227%" height="15" fill="rgb(229,209,22)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="127.50"></text></g><g><title>libsystem_info.dylib`__si_module_static_ds_block_invoke (1 samples, 0.02%)</title><rect x="99.7275%" y="101" width="0.0227%" height="15" fill="rgb(234,138,34)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="111.50"></text></g><g><title>libsystem_notify.dylib`notify_register_check (1 samples, 0.02%)</title><rect x="99.7275%" y="85" width="0.0227%" height="15" fill="rgb(212,95,11)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (1 samples, 0.02%)</title><rect x="99.7275%" y="69" width="0.0227%" height="15" fill="rgb(240,179,47)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (1 samples, 0.02%)</title><rect x="99.7275%" y="53" width="0.0227%" height="15" fill="rgb(240,163,11)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (1 samples, 0.02%)</title><rect x="99.7275%" y="37" width="0.0227%" height="15" fill="rgb(236,37,12)" fg:x="4391" fg:w="1"/><text x="99.9775%" y="47.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::new_with_locale_and_db_and_fallback (1 samples, 0.02%)</title><rect x="99.7502%" y="517" width="0.0227%" height="15" fill="rgb(232,164,16)" fg:x="4392" fg:w="1"/><text x="100.0002%" y="527.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="99.7502%" y="501" width="0.0227%" height="15" fill="rgb(244,205,15)" fg:x="4392" fg:w="1"/><text x="100.0002%" y="511.50"></text></g><g><title>colors`fontdb::parse_face_info (1 samples, 0.02%)</title><rect x="99.7729%" y="469" width="0.0227%" height="15" fill="rgb(223,117,47)" fg:x="4393" fg:w="1"/><text x="100.0229%" y="479.50"></text></g><g><title>colors`fontdb::collect_families (1 samples, 0.02%)</title><rect x="99.7729%" y="453" width="0.0227%" height="15" fill="rgb(244,107,35)" fg:x="4393" fg:w="1"/><text x="100.0229%" y="463.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (2 samples, 0.05%)</title><rect x="99.7729%" y="485" width="0.0454%" height="15" fill="rgb(205,140,8)" fg:x="4393" fg:w="2"/><text x="100.0229%" y="495.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (1 samples, 0.02%)</title><rect x="99.7956%" y="469" width="0.0227%" height="15" fill="rgb(228,84,46)" fg:x="4394" fg:w="1"/><text x="100.0456%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.02%)</title><rect x="99.7956%" y="453" width="0.0227%" height="15" fill="rgb(254,188,9)" fg:x="4394" fg:w="1"/><text x="100.0456%" y="463.50"></text></g><g><title>colors`memmap2::os::file_len (1 samples, 0.02%)</title><rect x="99.8410%" y="453" width="0.0227%" height="15" fill="rgb(206,112,54)" fg:x="4396" fg:w="1"/><text x="100.0910%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`fstat (1 samples, 0.02%)</title><rect x="99.8410%" y="437" width="0.0227%" height="15" fill="rgb(216,84,49)" fg:x="4396" fg:w="1"/><text x="100.0910%" y="447.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::new (11 samples, 0.25%)</title><rect x="99.7275%" y="533" width="0.2498%" height="15" fill="rgb(214,194,35)" fg:x="4391" fg:w="11"/><text x="99.9775%" y="543.50"></text></g><g><title>colors`fontdb::Database::load_system_fonts (9 samples, 0.20%)</title><rect x="99.7729%" y="517" width="0.2044%" height="15" fill="rgb(249,28,3)" fg:x="4393" fg:w="9"/><text x="100.0229%" y="527.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (9 samples, 0.20%)</title><rect x="99.7729%" y="501" width="0.2044%" height="15" fill="rgb(222,56,52)" fg:x="4393" fg:w="9"/><text x="100.0229%" y="511.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (7 samples, 0.16%)</title><rect x="99.8183%" y="485" width="0.1590%" height="15" fill="rgb(245,217,50)" fg:x="4395" fg:w="7"/><text x="100.0683%" y="495.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (7 samples, 0.16%)</title><rect x="99.8183%" y="469" width="0.1590%" height="15" fill="rgb(213,201,24)" fg:x="4395" fg:w="7"/><text x="100.0683%" y="479.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (5 samples, 0.11%)</title><rect x="99.8637%" y="453" width="0.1136%" height="15" fill="rgb(248,116,28)" fg:x="4397" fg:w="5"/><text x="100.1137%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__open (5 samples, 0.11%)</title><rect x="99.8637%" y="437" width="0.1136%" height="15" fill="rgb(219,72,43)" fg:x="4397" fg:w="5"/><text x="100.1137%" y="447.50"></text></g><g><title>all (4,403 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(209,138,14)" fg:x="0" fg:w="4403"/><text x="0.2500%" y="671.50"></text></g><g><title>dyld`start (4,402 samples, 99.98%)</title><rect x="0.0227%" y="645" width="99.9773%" height="15" fill="rgb(222,18,33)" fg:x="1" fg:w="4402"/><text x="0.2727%" y="655.50">dyld`start</text></g><g><title>colors`main (4,402 samples, 99.98%)</title><rect x="0.0227%" y="629" width="99.9773%" height="15" fill="rgb(213,199,7)" fg:x="1" fg:w="4402"/><text x="0.2727%" y="639.50">colors`main</text></g><g><title>colors`std::rt::lang_start_internal (4,402 samples, 99.98%)</title><rect x="0.0227%" y="613" width="99.9773%" height="15" fill="rgb(250,110,10)" fg:x="1" fg:w="4402"/><text x="0.2727%" y="623.50">colors`std::rt::lang_start_internal</text></g><g><title>colors`std::rt::lang_start::_{{closure}} (4,402 samples, 99.98%)</title><rect x="0.0227%" y="597" width="99.9773%" height="15" fill="rgb(248,123,6)" fg:x="1" fg:w="4402"/><text x="0.2727%" y="607.50">colors`std::rt::lang_start::_{{closure}}</text></g><g><title>colors`std::sys::backtrace::__rust_begin_short_backtrace (4,402 samples, 99.98%)</title><rect x="0.0227%" y="581" width="99.9773%" height="15" fill="rgb(206,91,31)" fg:x="1" fg:w="4402"/><text x="0.2727%" y="591.50">colors`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>colors`colors::main (4,402 samples, 99.98%)</title><rect x="0.0227%" y="565" width="99.9773%" height="15" fill="rgb(211,154,13)" fg:x="1" fg:w="4402"/><text x="0.2727%" y="575.50">colors`colors::main</text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::new (14 samples, 0.32%)</title><rect x="99.6820%" y="549" width="0.3180%" height="15" fill="rgb(225,148,7)" fg:x="4389" fg:w="14"/><text x="99.9320%" y="559.50"></text></g><g><title>colors`cosmic_text::swash::SwashCache::get_image (1 samples, 0.02%)</title><rect x="99.9773%" y="533" width="0.0227%" height="15" fill="rgb(220,160,43)" fg:x="4402" fg:w="1"/><text x="100.2273%" y="543.50"></text></g><g><title>colors`cosmic_text::swash::swash_image (1 samples, 0.02%)</title><rect x="99.9773%" y="517" width="0.0227%" height="15" fill="rgb(213,52,39)" fg:x="4402" fg:w="1"/><text x="100.2273%" y="527.50"></text></g><g><title>colors`swash::scale::ScalerBuilder::new (1 samples, 0.02%)</title><rect x="99.9773%" y="501" width="0.0227%" height="15" fill="rgb(243,137,7)" fg:x="4402" fg:w="1"/><text x="100.2273%" y="511.50"></text></g><g><title>colors`skrifa::outline::glyf::Outlines::new (1 samples, 0.02%)</title><rect x="99.9773%" y="485" width="0.0227%" height="15" fill="rgb(230,79,13)" fg:x="4402" fg:w="1"/><text x="100.2273%" y="495.50"></text></g></svg></svg>
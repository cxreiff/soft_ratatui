<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="10828"><g><title>colors`ratatui::buffer::buffer::Buffer::index_of (2 samples, 0.02%)</title><rect x="0.0185%" y="357" width="0.0185%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="2"/><text x="0.2685%" y="367.50"></text></g><g><title>colors`&lt;&amp;mut colors::App as ratatui::widgets::Widget&gt;::render (5 samples, 0.05%)</title><rect x="0.0000%" y="373" width="0.0462%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="383.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (13 samples, 0.12%)</title><rect x="0.5634%" y="277" width="0.1201%" height="15" fill="rgb(221,193,54)" fg:x="61" fg:w="13"/><text x="0.8134%" y="287.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_data (548 samples, 5.06%)</title><rect x="0.1016%" y="293" width="5.0610%" height="15" fill="rgb(248,212,6)" fg:x="11" fg:w="548"/><text x="0.3516%" y="303.50">colors..</text></g><g><title>colors`simd_adler32::imp::scalar::update (485 samples, 4.48%)</title><rect x="0.6834%" y="277" width="4.4791%" height="15" fill="rgb(208,68,35)" fg:x="74" fg:w="485"/><text x="0.9334%" y="287.50">color..</text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (4 samples, 0.04%)</title><rect x="5.1625%" y="293" width="0.0369%" height="15" fill="rgb(232,128,0)" fg:x="559" fg:w="4"/><text x="5.4125%" y="303.50"></text></g><g><title>colors`crc32fast::Hasher::update (4 samples, 0.04%)</title><rect x="5.1995%" y="277" width="0.0369%" height="15" fill="rgb(207,160,47)" fg:x="563" fg:w="4"/><text x="5.4495%" y="287.50"></text></g><g><title>colors`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (3 samples, 0.03%)</title><rect x="5.2364%" y="245" width="0.0277%" height="15" fill="rgb(228,23,34)" fg:x="567" fg:w="3"/><text x="5.4864%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`write (3 samples, 0.03%)</title><rect x="5.2364%" y="229" width="0.0277%" height="15" fill="rgb(218,30,26)" fg:x="567" fg:w="3"/><text x="5.4864%" y="239.50"></text></g><g><title>colors`png::encoder::write_chunk (8 samples, 0.07%)</title><rect x="5.2364%" y="277" width="0.0739%" height="15" fill="rgb(220,122,19)" fg:x="567" fg:w="8"/><text x="5.4864%" y="287.50"></text></g><g><title>colors`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (8 samples, 0.07%)</title><rect x="5.2364%" y="261" width="0.0739%" height="15" fill="rgb(250,228,42)" fg:x="567" fg:w="8"/><text x="5.4864%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`write (5 samples, 0.05%)</title><rect x="5.2641%" y="245" width="0.0462%" height="15" fill="rgb(240,193,28)" fg:x="570" fg:w="5"/><text x="5.5141%" y="255.50"></text></g><g><title>colors`png::encoder::Writer&lt;W&gt;::write_zlib_encoded_idat (13 samples, 0.12%)</title><rect x="5.1995%" y="293" width="0.1201%" height="15" fill="rgb(216,20,37)" fg:x="563" fg:w="13"/><text x="5.4495%" y="303.50"></text></g><g><title>colors`png::filter::filter_internal (156 samples, 1.44%)</title><rect x="8.5519%" y="277" width="1.4407%" height="15" fill="rgb(206,188,39)" fg:x="926" fg:w="156"/><text x="8.8019%" y="287.50"></text></g><g><title>colors`image::codecs::png::PngEncoder&lt;W&gt;::encode_inner (1,073 samples, 9.91%)</title><rect x="0.0924%" y="325" width="9.9095%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="1073"/><text x="0.3424%" y="335.50">colors`image::..</text></g><g><title>colors`png::encoder::Writer&lt;W&gt;::write_image_data (1,072 samples, 9.90%)</title><rect x="0.1016%" y="309" width="9.9003%" height="15" fill="rgb(231,73,38)" fg:x="11" fg:w="1072"/><text x="0.3516%" y="319.50">colors`png::en..</text></g><g><title>colors`png::filter::filter (507 samples, 4.68%)</title><rect x="5.3195%" y="293" width="4.6823%" height="15" fill="rgb(225,20,46)" fg:x="576" fg:w="507"/><text x="5.5695%" y="303.50">color..</text></g><g><title>colors`image::image_reader::free_functions::save_buffer_with_format_impl (1,079 samples, 9.96%)</title><rect x="0.0831%" y="341" width="9.9649%" height="15" fill="rgb(210,31,41)" fg:x="9" fg:w="1079"/><text x="0.3331%" y="351.50">colors`image::..</text></g><g><title>colors`std::fs::OpenOptions::_open (5 samples, 0.05%)</title><rect x="10.0018%" y="325" width="0.0462%" height="15" fill="rgb(221,200,47)" fg:x="1083" fg:w="5"/><text x="10.2518%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__open (5 samples, 0.05%)</title><rect x="10.0018%" y="309" width="0.0462%" height="15" fill="rgb(226,26,5)" fg:x="1083" fg:w="5"/><text x="10.2518%" y="319.50"></text></g><g><title>colors`image::image_reader::free_functions::save_buffer_impl (1,089 samples, 10.06%)</title><rect x="0.0831%" y="357" width="10.0573%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="1089"/><text x="0.3331%" y="367.50">colors`image::i..</text></g><g><title>libsystem_kernel.dylib`close (10 samples, 0.09%)</title><rect x="10.0480%" y="341" width="0.0924%" height="15" fill="rgb(235,183,28)" fg:x="1088" fg:w="10"/><text x="10.2980%" y="351.50"></text></g><g><title>colors`&lt;cosmic_text::buffer::LayoutRunIter as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.12%)</title><rect x="13.1141%" y="341" width="0.1201%" height="15" fill="rgb(221,5,38)" fg:x="1420" fg:w="13"/><text x="13.3641%" y="351.50"></text></g><g><title>colors`cosmic_text::swash::SwashCache::get_image (3 samples, 0.03%)</title><rect x="15.3491%" y="309" width="0.0277%" height="15" fill="rgb(247,18,42)" fg:x="1662" fg:w="3"/><text x="15.5991%" y="319.50"></text></g><g><title>colors`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.02%)</title><rect x="15.3583%" y="293" width="0.0185%" height="15" fill="rgb(241,131,45)" fg:x="1663" fg:w="2"/><text x="15.6083%" y="303.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::draw (231 samples, 2.13%)</title><rect x="13.2527%" y="341" width="2.1334%" height="15" fill="rgb(249,31,29)" fg:x="1435" fg:w="231"/><text x="13.5027%" y="351.50">c..</text></g><g><title>colors`cosmic_text::swash::SwashCache::with_pixels (226 samples, 2.09%)</title><rect x="13.2989%" y="325" width="2.0872%" height="15" fill="rgb(225,111,53)" fg:x="1440" fg:w="226"/><text x="13.5489%" y="335.50">c..</text></g><g><title>colors`&lt;cosmic_text::line_ending::LineIter as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.10%)</title><rect x="15.4322%" y="325" width="0.1016%" height="15" fill="rgb(238,160,17)" fg:x="1671" fg:w="11"/><text x="15.6822%" y="335.50"></text></g><g><title>colors`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="15.5338%" y="325" width="0.0185%" height="15" fill="rgb(214,148,48)" fg:x="1682" fg:w="2"/><text x="15.7838%" y="335.50"></text></g><g><title>colors`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="15.5615%" y="309" width="0.0185%" height="15" fill="rgb(232,36,49)" fg:x="1685" fg:w="2"/><text x="15.8115%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.06%)</title><rect x="15.6169%" y="293" width="0.0554%" height="15" fill="rgb(209,103,24)" fg:x="1691" fg:w="6"/><text x="15.8669%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.15%)</title><rect x="15.6723%" y="293" width="0.1478%" height="15" fill="rgb(229,88,8)" fg:x="1697" fg:w="16"/><text x="15.9223%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.06%)</title><rect x="15.7554%" y="277" width="0.0646%" height="15" fill="rgb(213,181,19)" fg:x="1706" fg:w="7"/><text x="16.0054%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.02%)</title><rect x="15.8016%" y="261" width="0.0185%" height="15" fill="rgb(254,191,54)" fg:x="1711" fg:w="2"/><text x="16.0516%" y="271.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.02%)</title><rect x="15.8293%" y="293" width="0.0185%" height="15" fill="rgb(241,83,37)" fg:x="1714" fg:w="2"/><text x="16.0793%" y="303.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;cosmic_text::shape::ShapeLine&gt;&gt; (32 samples, 0.30%)</title><rect x="15.5892%" y="309" width="0.2955%" height="15" fill="rgb(233,36,39)" fg:x="1688" fg:w="32"/><text x="15.8392%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.04%)</title><rect x="15.8478%" y="293" width="0.0369%" height="15" fill="rgb(226,3,54)" fg:x="1716" fg:w="4"/><text x="16.0978%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.04%)</title><rect x="15.8940%" y="309" width="0.0369%" height="15" fill="rgb(245,192,40)" fg:x="1721" fg:w="4"/><text x="16.1440%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.06%)</title><rect x="15.9309%" y="309" width="0.0646%" height="15" fill="rgb(238,167,29)" fg:x="1725" fg:w="7"/><text x="16.1809%" y="319.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::buffer_line::BufferLine&gt; (51 samples, 0.47%)</title><rect x="15.5523%" y="325" width="0.4710%" height="15" fill="rgb(232,182,51)" fg:x="1684" fg:w="51"/><text x="15.8023%" y="335.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.02%)</title><rect x="16.0048%" y="309" width="0.0185%" height="15" fill="rgb(231,60,39)" fg:x="1733" fg:w="2"/><text x="16.2548%" y="319.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;alloc::vec::Vec&lt;cosmic_text::layout::LayoutLine&gt;&gt;&gt; (7 samples, 0.06%)</title><rect x="16.0233%" y="325" width="0.0646%" height="15" fill="rgb(208,69,12)" fg:x="1735" fg:w="7"/><text x="16.2733%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.06%)</title><rect x="16.0233%" y="309" width="0.0646%" height="15" fill="rgb(235,93,37)" fg:x="1735" fg:w="7"/><text x="16.2733%" y="319.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsOwned::new (3 samples, 0.03%)</title><rect x="16.0879%" y="325" width="0.0277%" height="15" fill="rgb(213,116,39)" fg:x="1742" fg:w="3"/><text x="16.3379%" y="335.50"></text></g><g><title>colors`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="16.1895%" y="277" width="0.0185%" height="15" fill="rgb(222,207,29)" fg:x="1753" fg:w="2"/><text x="16.4395%" y="287.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;cosmic_text::shape::ShapeLine&gt;&gt; (2 samples, 0.02%)</title><rect x="16.2172%" y="277" width="0.0185%" height="15" fill="rgb(206,96,30)" fg:x="1756" fg:w="2"/><text x="16.4672%" y="287.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::defaults (2 samples, 0.02%)</title><rect x="16.2357%" y="277" width="0.0185%" height="15" fill="rgb(218,138,4)" fg:x="1758" fg:w="2"/><text x="16.4857%" y="287.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.04%)</title><rect x="16.4296%" y="261" width="0.0369%" height="15" fill="rgb(250,191,14)" fg:x="1779" fg:w="4"/><text x="16.6796%" y="271.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4 samples, 0.04%)</title><rect x="16.5035%" y="261" width="0.0369%" height="15" fill="rgb(239,60,40)" fg:x="1787" fg:w="4"/><text x="16.7535%" y="271.50"></text></g><g><title>colors`__rdl_alloc (2 samples, 0.02%)</title><rect x="16.5774%" y="245" width="0.0185%" height="15" fill="rgb(206,27,48)" fg:x="1795" fg:w="2"/><text x="16.8274%" y="255.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="16.5959%" y="245" width="0.0185%" height="15" fill="rgb(225,35,8)" fg:x="1797" fg:w="2"/><text x="16.8459%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.02%)</title><rect x="16.5959%" y="229" width="0.0185%" height="15" fill="rgb(250,213,24)" fg:x="1797" fg:w="2"/><text x="16.8459%" y="239.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (10 samples, 0.09%)</title><rect x="16.5405%" y="261" width="0.0924%" height="15" fill="rgb(247,123,22)" fg:x="1791" fg:w="10"/><text x="16.7905%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="16.6143%" y="245" width="0.0185%" height="15" fill="rgb(231,138,38)" fg:x="1799" fg:w="2"/><text x="16.8643%" y="255.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 0.06%)</title><rect x="16.7529%" y="245" width="0.0554%" height="15" fill="rgb(231,145,46)" fg:x="1814" fg:w="6"/><text x="17.0029%" y="255.50"></text></g><g><title>colors`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.04%)</title><rect x="16.8175%" y="245" width="0.0369%" height="15" fill="rgb(251,118,11)" fg:x="1821" fg:w="4"/><text x="17.0675%" y="255.50"></text></g><g><title>colors`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.02%)</title><rect x="16.8360%" y="229" width="0.0185%" height="15" fill="rgb(217,147,25)" fg:x="1823" fg:w="2"/><text x="17.0860%" y="239.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (4 samples, 0.04%)</title><rect x="16.8914%" y="229" width="0.0369%" height="15" fill="rgb(247,81,37)" fg:x="1829" fg:w="4"/><text x="17.1414%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (4 samples, 0.04%)</title><rect x="16.8914%" y="213" width="0.0369%" height="15" fill="rgb(209,12,38)" fg:x="1829" fg:w="4"/><text x="17.1414%" y="223.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (9 samples, 0.08%)</title><rect x="16.8545%" y="245" width="0.0831%" height="15" fill="rgb(227,1,9)" fg:x="1825" fg:w="9"/><text x="17.1045%" y="255.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (3 samples, 0.03%)</title><rect x="17.2516%" y="229" width="0.0277%" height="15" fill="rgb(248,47,43)" fg:x="1868" fg:w="3"/><text x="17.5016%" y="239.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::defaults (2 samples, 0.02%)</title><rect x="17.2793%" y="229" width="0.0185%" height="15" fill="rgb(221,10,30)" fg:x="1871" fg:w="2"/><text x="17.5293%" y="239.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (5 samples, 0.05%)</title><rect x="17.2977%" y="229" width="0.0462%" height="15" fill="rgb(210,229,1)" fg:x="1873" fg:w="5"/><text x="17.5477%" y="239.50"></text></g><g><title>colors`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (2 samples, 0.02%)</title><rect x="17.3255%" y="213" width="0.0185%" height="15" fill="rgb(222,148,37)" fg:x="1876" fg:w="2"/><text x="17.5755%" y="223.50"></text></g><g><title>colors`__rdl_alloc (2 samples, 0.02%)</title><rect x="66.9930%" y="181" width="0.0185%" height="15" fill="rgb(234,67,33)" fg:x="7254" fg:w="2"/><text x="67.2430%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.06%)</title><rect x="67.2146%" y="133" width="0.0554%" height="15" fill="rgb(247,98,35)" fg:x="7278" fg:w="6"/><text x="67.4646%" y="143.50"></text></g><g><title>colors`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (33 samples, 0.30%)</title><rect x="67.0115%" y="181" width="0.3048%" height="15" fill="rgb(247,138,52)" fg:x="7256" fg:w="33"/><text x="67.2615%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.17%)</title><rect x="67.1500%" y="165" width="0.1662%" height="15" fill="rgb(213,79,30)" fg:x="7271" fg:w="18"/><text x="67.4000%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.16%)</title><rect x="67.1592%" y="149" width="0.1570%" height="15" fill="rgb(246,177,23)" fg:x="7272" fg:w="17"/><text x="67.4092%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.05%)</title><rect x="67.2700%" y="133" width="0.0462%" height="15" fill="rgb(230,62,27)" fg:x="7284" fg:w="5"/><text x="67.5200%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.03%)</title><rect x="67.2885%" y="117" width="0.0277%" height="15" fill="rgb(216,154,8)" fg:x="7286" fg:w="3"/><text x="67.5385%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="67.3162%" y="181" width="0.0185%" height="15" fill="rgb(244,35,45)" fg:x="7289" fg:w="2"/><text x="67.5662%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.02%)</title><rect x="67.3347%" y="181" width="0.0185%" height="15" fill="rgb(251,115,12)" fg:x="7291" fg:w="2"/><text x="67.5847%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.02%)</title><rect x="67.3809%" y="149" width="0.0185%" height="15" fill="rgb(240,54,50)" fg:x="7296" fg:w="2"/><text x="67.6309%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.15%)</title><rect x="67.3532%" y="181" width="0.1478%" height="15" fill="rgb(233,84,52)" fg:x="7293" fg:w="16"/><text x="67.6032%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.14%)</title><rect x="67.3624%" y="165" width="0.1385%" height="15" fill="rgb(207,117,47)" fg:x="7294" fg:w="15"/><text x="67.6124%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (10 samples, 0.09%)</title><rect x="67.4086%" y="149" width="0.0924%" height="15" fill="rgb(249,43,39)" fg:x="7299" fg:w="10"/><text x="67.6586%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.03%)</title><rect x="67.4732%" y="133" width="0.0277%" height="15" fill="rgb(209,38,44)" fg:x="7306" fg:w="3"/><text x="67.7232%" y="143.50"></text></g><g><title>colors`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (79 samples, 0.73%)</title><rect x="66.7806%" y="197" width="0.7296%" height="15" fill="rgb(236,212,23)" fg:x="7231" fg:w="79"/><text x="67.0306%" y="207.50"></text></g><g><title>colors`DYLD-STUB$$memmove (2 samples, 0.02%)</title><rect x="67.5286%" y="165" width="0.0185%" height="15" fill="rgb(242,79,21)" fg:x="7312" fg:w="2"/><text x="67.7786%" y="175.50"></text></g><g><title>colors`alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (7 samples, 0.06%)</title><rect x="67.5102%" y="197" width="0.0646%" height="15" fill="rgb(211,96,35)" fg:x="7310" fg:w="7"/><text x="67.7602%" y="207.50"></text></g><g><title>colors`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (6 samples, 0.06%)</title><rect x="67.5194%" y="181" width="0.0554%" height="15" fill="rgb(253,215,40)" fg:x="7311" fg:w="6"/><text x="67.7694%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="67.5471%" y="165" width="0.0277%" height="15" fill="rgb(211,81,21)" fg:x="7314" fg:w="3"/><text x="67.7971%" y="175.50"></text></g><g><title>colors`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (9 samples, 0.08%)</title><rect x="67.5748%" y="197" width="0.0831%" height="15" fill="rgb(208,190,38)" fg:x="7317" fg:w="9"/><text x="67.8248%" y="207.50"></text></g><g><title>colors`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (127 samples, 1.17%)</title><rect x="67.6579%" y="197" width="1.1729%" height="15" fill="rgb(235,213,38)" fg:x="7326" fg:w="127"/><text x="67.9079%" y="207.50"></text></g><g><title>colors`core::str::count::char_count_general_case (16 samples, 0.15%)</title><rect x="68.8308%" y="197" width="0.1478%" height="15" fill="rgb(237,122,38)" fg:x="7453" fg:w="16"/><text x="69.0808%" y="207.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (44 samples, 0.41%)</title><rect x="68.9786%" y="197" width="0.4064%" height="15" fill="rgb(244,218,35)" fg:x="7469" fg:w="44"/><text x="69.2286%" y="207.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_supported_codepoints_in_word::_{{closure}} (67 samples, 0.62%)</title><rect x="69.3849%" y="197" width="0.6188%" height="15" fill="rgb(240,68,47)" fg:x="7513" fg:w="67"/><text x="69.6349%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="70.0037%" y="197" width="0.0185%" height="15" fill="rgb(210,16,53)" fg:x="7580" fg:w="2"/><text x="70.2537%" y="207.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (5,701 samples, 52.65%)</title><rect x="17.3901%" y="213" width="52.6505%" height="15" fill="rgb(235,124,12)" fg:x="1883" fg:w="5701"/><text x="17.6401%" y="223.50">colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::..</text></g><g><title>colors`DYLD-STUB$$memcmp (11 samples, 0.10%)</title><rect x="70.0406%" y="213" width="0.1016%" height="15" fill="rgb(224,169,11)" fg:x="7584" fg:w="11"/><text x="70.2906%" y="223.50"></text></g><g><title>colors`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (6 samples, 0.06%)</title><rect x="70.1607%" y="213" width="0.0554%" height="15" fill="rgb(250,166,2)" fg:x="7597" fg:w="6"/><text x="70.4107%" y="223.50"></text></g><g><title>colors`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (3 samples, 0.03%)</title><rect x="70.2161%" y="213" width="0.0277%" height="15" fill="rgb(242,216,29)" fg:x="7603" fg:w="3"/><text x="70.4661%" y="223.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t&gt; (3 samples, 0.03%)</title><rect x="70.2438%" y="213" width="0.0277%" height="15" fill="rgb(230,116,27)" fg:x="7606" fg:w="3"/><text x="70.4938%" y="223.50"></text></g><g><title>colors`core::str::count::char_count_general_case (5 samples, 0.05%)</title><rect x="70.2715%" y="213" width="0.0462%" height="15" fill="rgb(228,99,48)" fg:x="7609" fg:w="5"/><text x="70.5215%" y="223.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (30 samples, 0.28%)</title><rect x="70.3177%" y="213" width="0.2771%" height="15" fill="rgb(253,11,6)" fg:x="7614" fg:w="30"/><text x="70.5677%" y="223.50"></text></g><g><title>colors`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (4 samples, 0.04%)</title><rect x="70.5578%" y="197" width="0.0369%" height="15" fill="rgb(247,143,39)" fg:x="7640" fg:w="4"/><text x="70.8078%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.03%)</title><rect x="70.6963%" y="181" width="0.0277%" height="15" fill="rgb(236,97,10)" fg:x="7655" fg:w="3"/><text x="70.9463%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (2 samples, 0.02%)</title><rect x="70.7702%" y="165" width="0.0185%" height="15" fill="rgb(233,208,19)" fg:x="7663" fg:w="2"/><text x="71.0202%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (25 samples, 0.23%)</title><rect x="70.7240%" y="181" width="0.2309%" height="15" fill="rgb(216,164,2)" fg:x="7658" fg:w="25"/><text x="70.9740%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (18 samples, 0.17%)</title><rect x="70.7887%" y="165" width="0.1662%" height="15" fill="rgb(220,129,5)" fg:x="7665" fg:w="18"/><text x="71.0387%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.06%)</title><rect x="70.8995%" y="149" width="0.0554%" height="15" fill="rgb(242,17,10)" fg:x="7677" fg:w="6"/><text x="71.1495%" y="159.50"></text></g><g><title>colors`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.40%)</title><rect x="70.6225%" y="197" width="0.3971%" height="15" fill="rgb(242,107,0)" fg:x="7647" fg:w="43"/><text x="70.8725%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.06%)</title><rect x="70.9642%" y="181" width="0.0554%" height="15" fill="rgb(251,28,31)" fg:x="7684" fg:w="6"/><text x="71.2142%" y="191.50"></text></g><g><title>colors`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="71.0196%" y="197" width="0.0185%" height="15" fill="rgb(233,223,10)" fg:x="7690" fg:w="2"/><text x="71.2696%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.02%)</title><rect x="71.0473%" y="197" width="0.0185%" height="15" fill="rgb(215,21,27)" fg:x="7693" fg:w="2"/><text x="71.2973%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="71.0658%" y="197" width="0.0185%" height="15" fill="rgb(232,23,21)" fg:x="7695" fg:w="2"/><text x="71.3158%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.02%)</title><rect x="71.0842%" y="197" width="0.0185%" height="15" fill="rgb(244,5,23)" fg:x="7697" fg:w="2"/><text x="71.3342%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.12%)</title><rect x="71.1027%" y="197" width="0.1201%" height="15" fill="rgb(226,81,46)" fg:x="7699" fg:w="13"/><text x="71.3527%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.07%)</title><rect x="71.1489%" y="181" width="0.0739%" height="15" fill="rgb(247,70,30)" fg:x="7704" fg:w="8"/><text x="71.3989%" y="191.50"></text></g><g><title>colors`cosmic_text::font::fallback::FontFallbackIter::new (71 samples, 0.66%)</title><rect x="70.6040%" y="213" width="0.6557%" height="15" fill="rgb(212,68,19)" fg:x="7645" fg:w="71"/><text x="70.8540%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.04%)</title><rect x="71.2228%" y="197" width="0.0369%" height="15" fill="rgb(240,187,13)" fg:x="7712" fg:w="4"/><text x="71.4728%" y="207.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (155 samples, 1.43%)</title><rect x="71.2597%" y="213" width="1.4315%" height="15" fill="rgb(223,113,26)" fg:x="7716" fg:w="155"/><text x="71.5097%" y="223.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_matches (13 samples, 0.12%)</title><rect x="72.6912%" y="213" width="0.1201%" height="15" fill="rgb(206,192,2)" fg:x="7871" fg:w="13"/><text x="72.9412%" y="223.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_supported_codepoints_in_word::_{{closure}} (6 samples, 0.06%)</title><rect x="72.8112%" y="213" width="0.0554%" height="15" fill="rgb(241,108,4)" fg:x="7884" fg:w="6"/><text x="73.0612%" y="223.50"></text></g><g><title>colors`DYLD-STUB$$free (6 samples, 0.06%)</title><rect x="73.0513%" y="197" width="0.0554%" height="15" fill="rgb(247,173,49)" fg:x="7910" fg:w="6"/><text x="73.3013%" y="207.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="73.1068%" y="197" width="0.0185%" height="15" fill="rgb(224,114,35)" fg:x="7916" fg:w="2"/><text x="73.3568%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.02%)</title><rect x="73.1714%" y="149" width="0.0185%" height="15" fill="rgb(245,159,27)" fg:x="7923" fg:w="2"/><text x="73.4214%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.02%)</title><rect x="73.1899%" y="149" width="0.0185%" height="15" fill="rgb(245,172,44)" fg:x="7925" fg:w="2"/><text x="73.4399%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.02%)</title><rect x="73.2176%" y="133" width="0.0185%" height="15" fill="rgb(236,23,11)" fg:x="7928" fg:w="2"/><text x="73.4676%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (25 samples, 0.23%)</title><rect x="73.1252%" y="197" width="0.2309%" height="15" fill="rgb(205,117,38)" fg:x="7918" fg:w="25"/><text x="73.3752%" y="207.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (21 samples, 0.19%)</title><rect x="73.1622%" y="181" width="0.1939%" height="15" fill="rgb(237,72,25)" fg:x="7922" fg:w="21"/><text x="73.4122%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.18%)</title><rect x="73.1714%" y="165" width="0.1847%" height="15" fill="rgb(244,70,9)" fg:x="7923" fg:w="20"/><text x="73.4214%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.15%)</title><rect x="73.2083%" y="149" width="0.1478%" height="15" fill="rgb(217,125,39)" fg:x="7927" fg:w="16"/><text x="73.4583%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (13 samples, 0.12%)</title><rect x="73.2361%" y="133" width="0.1201%" height="15" fill="rgb(235,36,10)" fg:x="7930" fg:w="13"/><text x="73.4861%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.04%)</title><rect x="73.3746%" y="181" width="0.0369%" height="15" fill="rgb(251,123,47)" fg:x="7945" fg:w="4"/><text x="73.6246%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.09%)</title><rect x="73.4115%" y="181" width="0.0924%" height="15" fill="rgb(221,13,13)" fg:x="7949" fg:w="10"/><text x="73.6615%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.06%)</title><rect x="73.4392%" y="165" width="0.0646%" height="15" fill="rgb(238,131,9)" fg:x="7952" fg:w="7"/><text x="73.6892%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.04%)</title><rect x="73.4669%" y="149" width="0.0369%" height="15" fill="rgb(211,50,8)" fg:x="7955" fg:w="4"/><text x="73.7169%" y="159.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t&gt; (25 samples, 0.23%)</title><rect x="73.3653%" y="197" width="0.2309%" height="15" fill="rgb(245,182,24)" fg:x="7944" fg:w="25"/><text x="73.6153%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.08%)</title><rect x="73.5131%" y="181" width="0.0831%" height="15" fill="rgb(242,14,37)" fg:x="7960" fg:w="9"/><text x="73.7631%" y="191.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (11 samples, 0.10%)</title><rect x="73.5962%" y="197" width="0.1016%" height="15" fill="rgb(246,228,12)" fg:x="7969" fg:w="11"/><text x="73.8462%" y="207.50"></text></g><g><title>colors`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (6 samples, 0.06%)</title><rect x="73.6424%" y="181" width="0.0554%" height="15" fill="rgb(213,55,15)" fg:x="7974" fg:w="6"/><text x="73.8924%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::clear (5 samples, 0.05%)</title><rect x="73.6978%" y="197" width="0.0462%" height="15" fill="rgb(209,9,3)" fg:x="7980" fg:w="5"/><text x="73.9478%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::guess_segment_properties (16 samples, 0.15%)</title><rect x="73.7440%" y="197" width="0.1478%" height="15" fill="rgb(230,59,30)" fg:x="7985" fg:w="16"/><text x="73.9940%" y="207.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (6 samples, 0.06%)</title><rect x="73.8364%" y="181" width="0.0554%" height="15" fill="rgb(209,121,21)" fg:x="7995" fg:w="6"/><text x="74.0864%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::push_str (7 samples, 0.06%)</title><rect x="73.8918%" y="197" width="0.0646%" height="15" fill="rgb(220,109,13)" fg:x="8001" fg:w="7"/><text x="74.1418%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::ot_layout::apply_layout_table (2 samples, 0.02%)</title><rect x="73.9656%" y="197" width="0.0185%" height="15" fill="rgb(232,18,1)" fg:x="8009" fg:w="2"/><text x="74.2156%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::collect_features (2 samples, 0.02%)</title><rect x="73.9841%" y="197" width="0.0185%" height="15" fill="rgb(215,41,42)" fg:x="8011" fg:w="2"/><text x="74.2341%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_complex::hb_ot_shape_complex_categorize (2 samples, 0.02%)</title><rect x="74.0118%" y="197" width="0.0185%" height="15" fill="rgb(224,123,36)" fg:x="8014" fg:w="2"/><text x="74.2618%" y="207.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::select_script (20 samples, 0.18%)</title><rect x="74.0395%" y="181" width="0.1847%" height="15" fill="rgb(240,125,3)" fg:x="8017" fg:w="20"/><text x="74.2895%" y="191.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::select_script_language (3 samples, 0.03%)</title><rect x="74.2242%" y="181" width="0.0277%" height="15" fill="rgb(205,98,50)" fg:x="8037" fg:w="3"/><text x="74.4742%" y="191.50"></text></g><g><title>colors`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="74.2519%" y="181" width="0.0185%" height="15" fill="rgb(205,185,37)" fg:x="8040" fg:w="2"/><text x="74.5019%" y="191.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Script as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (9 samples, 0.08%)</title><rect x="74.3720%" y="165" width="0.0831%" height="15" fill="rgb(238,207,15)" fg:x="8053" fg:w="9"/><text x="74.6220%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::new (58 samples, 0.54%)</title><rect x="74.2796%" y="181" width="0.5356%" height="15" fill="rgb(213,199,42)" fg:x="8043" fg:w="58"/><text x="74.5296%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::tag::tags_from_script_and_language (39 samples, 0.36%)</title><rect x="74.4551%" y="165" width="0.3602%" height="15" fill="rgb(235,201,11)" fg:x="8062" fg:w="39"/><text x="74.7051%" y="175.50"></text></g><g><title>colors`DYLD-STUB$$realloc (2 samples, 0.02%)</title><rect x="75.0554%" y="149" width="0.0185%" height="15" fill="rgb(207,46,11)" fg:x="8127" fg:w="2"/><text x="75.3054%" y="159.50"></text></g><g><title>colors`__rdl_realloc (4 samples, 0.04%)</title><rect x="75.0739%" y="149" width="0.0369%" height="15" fill="rgb(241,35,35)" fg:x="8129" fg:w="4"/><text x="75.3239%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.02%)</title><rect x="75.2124%" y="133" width="0.0185%" height="15" fill="rgb(243,32,47)" fg:x="8144" fg:w="2"/><text x="75.4624%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.03%)</title><rect x="75.3971%" y="85" width="0.0277%" height="15" fill="rgb(247,202,23)" fg:x="8164" fg:w="3"/><text x="75.6471%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.04%)</title><rect x="75.4433%" y="53" width="0.0369%" height="15" fill="rgb(219,102,11)" fg:x="8169" fg:w="4"/><text x="75.6933%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (22 samples, 0.20%)</title><rect x="75.3694%" y="101" width="0.2032%" height="15" fill="rgb(243,110,44)" fg:x="8161" fg:w="22"/><text x="75.6194%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.15%)</title><rect x="75.4248%" y="85" width="0.1478%" height="15" fill="rgb(222,74,54)" fg:x="8167" fg:w="16"/><text x="75.6748%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.13%)</title><rect x="75.4433%" y="69" width="0.1293%" height="15" fill="rgb(216,99,12)" fg:x="8169" fg:w="14"/><text x="75.6933%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (10 samples, 0.09%)</title><rect x="75.4802%" y="53" width="0.0924%" height="15" fill="rgb(226,22,26)" fg:x="8173" fg:w="10"/><text x="75.7302%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (2 samples, 0.02%)</title><rect x="75.5726%" y="101" width="0.0185%" height="15" fill="rgb(217,163,10)" fg:x="8183" fg:w="2"/><text x="75.8226%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.03%)</title><rect x="75.6095%" y="85" width="0.0277%" height="15" fill="rgb(213,25,53)" fg:x="8187" fg:w="3"/><text x="75.8595%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (18 samples, 0.17%)</title><rect x="75.6465%" y="85" width="0.1662%" height="15" fill="rgb(252,105,26)" fg:x="8191" fg:w="18"/><text x="75.8965%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.09%)</title><rect x="75.7204%" y="69" width="0.0924%" height="15" fill="rgb(220,39,43)" fg:x="8199" fg:w="10"/><text x="75.9704%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="75.8219%" y="85" width="0.0277%" height="15" fill="rgb(229,68,48)" fg:x="8210" fg:w="3"/><text x="76.0719%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.04%)</title><rect x="75.8496%" y="85" width="0.0369%" height="15" fill="rgb(252,8,32)" fg:x="8213" fg:w="4"/><text x="76.0996%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.04%)</title><rect x="75.8496%" y="69" width="0.0369%" height="15" fill="rgb(223,20,43)" fg:x="8213" fg:w="4"/><text x="76.0996%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (7 samples, 0.06%)</title><rect x="75.8958%" y="85" width="0.0646%" height="15" fill="rgb(229,81,49)" fg:x="8218" fg:w="7"/><text x="76.1458%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (4 samples, 0.04%)</title><rect x="75.9235%" y="69" width="0.0369%" height="15" fill="rgb(236,28,36)" fg:x="8221" fg:w="4"/><text x="76.1735%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (42 samples, 0.39%)</title><rect x="75.5911%" y="101" width="0.3879%" height="15" fill="rgb(249,185,26)" fg:x="8185" fg:w="42"/><text x="75.8411%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="75.9605%" y="85" width="0.0185%" height="15" fill="rgb(249,174,33)" fg:x="8225" fg:w="2"/><text x="76.2105%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (98 samples, 0.91%)</title><rect x="75.2863%" y="117" width="0.9051%" height="15" fill="rgb(233,201,37)" fg:x="8152" fg:w="98"/><text x="75.5363%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (22 samples, 0.20%)</title><rect x="75.9882%" y="101" width="0.2032%" height="15" fill="rgb(221,78,26)" fg:x="8228" fg:w="22"/><text x="76.2382%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.04%)</title><rect x="76.1914%" y="117" width="0.0369%" height="15" fill="rgb(250,127,30)" fg:x="8250" fg:w="4"/><text x="76.4414%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (121 samples, 1.12%)</title><rect x="75.2309%" y="133" width="1.1175%" height="15" fill="rgb(230,49,44)" fg:x="8146" fg:w="121"/><text x="75.4809%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (12 samples, 0.11%)</title><rect x="76.2375%" y="117" width="0.1108%" height="15" fill="rgb(229,67,23)" fg:x="8255" fg:w="12"/><text x="76.4875%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.08%)</title><rect x="76.2652%" y="101" width="0.0831%" height="15" fill="rgb(249,83,47)" fg:x="8258" fg:w="9"/><text x="76.5152%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (4 samples, 0.04%)</title><rect x="76.3484%" y="133" width="0.0369%" height="15" fill="rgb(215,43,3)" fg:x="8267" fg:w="4"/><text x="76.5984%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (139 samples, 1.28%)</title><rect x="75.1108%" y="149" width="1.2837%" height="15" fill="rgb(238,154,13)" fg:x="8133" fg:w="139"/><text x="75.3608%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.06%)</title><rect x="76.3945%" y="149" width="0.0554%" height="15" fill="rgb(219,56,2)" fg:x="8272" fg:w="6"/><text x="76.6445%" y="159.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (166 samples, 1.53%)</title><rect x="74.9446%" y="165" width="1.5331%" height="15" fill="rgb(233,0,4)" fg:x="8115" fg:w="166"/><text x="75.1946%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.03%)</title><rect x="76.4499%" y="149" width="0.0277%" height="15" fill="rgb(235,30,7)" fg:x="8278" fg:w="3"/><text x="76.6999%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::collect_features (182 samples, 1.68%)</title><rect x="74.8153%" y="181" width="1.6808%" height="15" fill="rgb(250,79,13)" fg:x="8101" fg:w="182"/><text x="75.0653%" y="191.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="76.4777%" y="165" width="0.0185%" height="15" fill="rgb(211,146,34)" fg:x="8281" fg:w="2"/><text x="76.7277%" y="175.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::find_language_feature (34 samples, 0.31%)</title><rect x="76.7178%" y="165" width="0.3140%" height="15" fill="rgb(228,22,38)" fg:x="8307" fg:w="34"/><text x="76.9678%" y="175.50"></text></g><g><title>colors`__rdl_dealloc (4 samples, 0.04%)</title><rect x="77.0318%" y="165" width="0.0369%" height="15" fill="rgb(235,168,5)" fg:x="8341" fg:w="4"/><text x="77.2818%" y="175.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::insert_tail (38 samples, 0.35%)</title><rect x="77.0779%" y="165" width="0.3509%" height="15" fill="rgb(221,155,16)" fg:x="8346" fg:w="38"/><text x="77.3279%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::add_lookups (6 samples, 0.06%)</title><rect x="77.4289%" y="165" width="0.0554%" height="15" fill="rgb(215,215,53)" fg:x="8384" fg:w="6"/><text x="77.6789%" y="175.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Feature as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (328 samples, 3.03%)</title><rect x="79.4052%" y="149" width="3.0292%" height="15" fill="rgb(223,4,10)" fg:x="8598" fg:w="328"/><text x="79.6552%" y="159.50">col..</text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::find_language_feature (569 samples, 5.25%)</title><rect x="82.4344%" y="149" width="5.2549%" height="15" fill="rgb(234,103,6)" fg:x="8926" fg:w="569"/><text x="82.6844%" y="159.50">colors..</text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::get_required_language_feature (7 samples, 0.06%)</title><rect x="87.6893%" y="149" width="0.0646%" height="15" fill="rgb(227,97,0)" fg:x="9495" fg:w="7"/><text x="87.9393%" y="159.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Script as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (85 samples, 0.79%)</title><rect x="87.7540%" y="149" width="0.7850%" height="15" fill="rgb(234,150,53)" fg:x="9502" fg:w="85"/><text x="88.0040%" y="159.50"></text></g><g><title>colors`DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="88.5851%" y="133" width="0.0185%" height="15" fill="rgb(228,201,54)" fg:x="9592" fg:w="2"/><text x="88.8351%" y="143.50"></text></g><g><title>colors`__rdl_alloc (3 samples, 0.03%)</title><rect x="88.6129%" y="133" width="0.0277%" height="15" fill="rgb(222,22,37)" fg:x="9595" fg:w="3"/><text x="88.8629%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.04%)</title><rect x="88.7329%" y="85" width="0.0369%" height="15" fill="rgb(237,53,32)" fg:x="9608" fg:w="4"/><text x="88.9829%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="88.7699%" y="69" width="0.0185%" height="15" fill="rgb(233,25,53)" fg:x="9612" fg:w="2"/><text x="89.0199%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.02%)</title><rect x="88.7883%" y="53" width="0.0185%" height="15" fill="rgb(210,40,34)" fg:x="9614" fg:w="2"/><text x="89.0383%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.02%)</title><rect x="88.8160%" y="37" width="0.0185%" height="15" fill="rgb(241,220,44)" fg:x="9617" fg:w="2"/><text x="89.0660%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.08%)</title><rect x="88.7883%" y="69" width="0.0831%" height="15" fill="rgb(235,28,35)" fg:x="9614" fg:w="9"/><text x="89.0383%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.06%)</title><rect x="88.8160%" y="53" width="0.0554%" height="15" fill="rgb(210,56,17)" fg:x="9617" fg:w="6"/><text x="89.0660%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.04%)</title><rect x="88.8345%" y="37" width="0.0369%" height="15" fill="rgb(224,130,29)" fg:x="9619" fg:w="4"/><text x="89.0845%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (12 samples, 0.11%)</title><rect x="88.7699%" y="85" width="0.1108%" height="15" fill="rgb(235,212,8)" fg:x="9612" fg:w="12"/><text x="89.0199%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (24 samples, 0.22%)</title><rect x="88.6867%" y="117" width="0.2216%" height="15" fill="rgb(223,33,50)" fg:x="9603" fg:w="24"/><text x="88.9367%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (21 samples, 0.19%)</title><rect x="88.7144%" y="101" width="0.1939%" height="15" fill="rgb(219,149,13)" fg:x="9606" fg:w="21"/><text x="88.9644%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="88.8899%" y="85" width="0.0185%" height="15" fill="rgb(250,156,29)" fg:x="9625" fg:w="2"/><text x="89.1399%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (7 samples, 0.06%)</title><rect x="88.9084%" y="117" width="0.0646%" height="15" fill="rgb(216,193,19)" fg:x="9627" fg:w="7"/><text x="89.1584%" y="127.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (38 samples, 0.35%)</title><rect x="88.6498%" y="133" width="0.3509%" height="15" fill="rgb(216,135,14)" fg:x="9599" fg:w="38"/><text x="88.8998%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.03%)</title><rect x="88.9730%" y="117" width="0.0277%" height="15" fill="rgb(241,47,5)" fg:x="9634" fg:w="3"/><text x="89.2230%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.06%)</title><rect x="89.0007%" y="133" width="0.0554%" height="15" fill="rgb(233,42,35)" fg:x="9637" fg:w="6"/><text x="89.2507%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (57 samples, 0.53%)</title><rect x="88.5390%" y="149" width="0.5264%" height="15" fill="rgb(231,13,6)" fg:x="9587" fg:w="57"/><text x="88.7890%" y="159.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="89.0654%" y="149" width="0.0277%" height="15" fill="rgb(207,181,40)" fg:x="9644" fg:w="3"/><text x="89.3154%" y="159.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (106 samples, 0.98%)</title><rect x="89.1762%" y="101" width="0.9789%" height="15" fill="rgb(254,173,49)" fg:x="9656" fg:w="106"/><text x="89.4262%" y="111.50"></text></g><g><title>colors`core::slice::sort::stable::driftsort_main (120 samples, 1.11%)</title><rect x="89.0931%" y="149" width="1.1082%" height="15" fill="rgb(221,1,38)" fg:x="9647" fg:w="120"/><text x="89.3431%" y="159.50"></text></g><g><title>colors`core::slice::sort::stable::drift::sort (117 samples, 1.08%)</title><rect x="89.1208%" y="133" width="1.0805%" height="15" fill="rgb(206,124,46)" fg:x="9650" fg:w="117"/><text x="89.3708%" y="143.50"></text></g><g><title>colors`core::slice::sort::stable::quicksort::quicksort (111 samples, 1.03%)</title><rect x="89.1762%" y="117" width="1.0251%" height="15" fill="rgb(249,21,11)" fg:x="9656" fg:w="111"/><text x="89.4262%" y="127.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::sort4_stable (5 samples, 0.05%)</title><rect x="90.1552%" y="101" width="0.0462%" height="15" fill="rgb(222,201,40)" fg:x="9762" fg:w="5"/><text x="90.4052%" y="111.50"></text></g><g><title>colors`__rdl_alloc (2 samples, 0.02%)</title><rect x="90.5430%" y="117" width="0.0185%" height="15" fill="rgb(235,61,29)" fg:x="9804" fg:w="2"/><text x="90.7930%" y="127.50"></text></g><g><title>colors`__rdl_realloc (3 samples, 0.03%)</title><rect x="90.5615%" y="117" width="0.0277%" height="15" fill="rgb(219,207,3)" fg:x="9806" fg:w="3"/><text x="90.8115%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (2 samples, 0.02%)</title><rect x="90.8201%" y="69" width="0.0185%" height="15" fill="rgb(222,56,46)" fg:x="9834" fg:w="2"/><text x="91.0701%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.04%)</title><rect x="90.8386%" y="69" width="0.0369%" height="15" fill="rgb(239,76,54)" fg:x="9836" fg:w="4"/><text x="91.0886%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.07%)</title><rect x="90.8755%" y="69" width="0.0739%" height="15" fill="rgb(231,124,27)" fg:x="9840" fg:w="8"/><text x="91.1255%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.02%)</title><rect x="90.9586%" y="53" width="0.0185%" height="15" fill="rgb(249,195,6)" fg:x="9849" fg:w="2"/><text x="91.2086%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (16 samples, 0.15%)</title><rect x="90.9771%" y="53" width="0.1478%" height="15" fill="rgb(237,174,47)" fg:x="9851" fg:w="16"/><text x="91.2271%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.10%)</title><rect x="91.1249%" y="53" width="0.1016%" height="15" fill="rgb(206,201,31)" fg:x="9867" fg:w="11"/><text x="91.3749%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (33 samples, 0.30%)</title><rect x="90.9494%" y="69" width="0.3048%" height="15" fill="rgb(231,57,52)" fg:x="9848" fg:w="33"/><text x="91.1994%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="91.2357%" y="53" width="0.0185%" height="15" fill="rgb(248,177,22)" fg:x="9879" fg:w="2"/><text x="91.4857%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (54 samples, 0.50%)</title><rect x="90.7832%" y="85" width="0.4987%" height="15" fill="rgb(215,211,37)" fg:x="9830" fg:w="54"/><text x="91.0332%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="91.2542%" y="69" width="0.0277%" height="15" fill="rgb(241,128,51)" fg:x="9881" fg:w="3"/><text x="91.5042%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (63 samples, 0.58%)</title><rect x="90.7462%" y="101" width="0.5818%" height="15" fill="rgb(227,165,31)" fg:x="9826" fg:w="63"/><text x="90.9962%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.04%)</title><rect x="91.2911%" y="85" width="0.0369%" height="15" fill="rgb(228,167,24)" fg:x="9885" fg:w="4"/><text x="91.5411%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (6 samples, 0.06%)</title><rect x="91.3280%" y="101" width="0.0554%" height="15" fill="rgb(228,143,12)" fg:x="9889" fg:w="6"/><text x="91.5780%" y="111.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (94 samples, 0.87%)</title><rect x="90.5892%" y="117" width="0.8681%" height="15" fill="rgb(249,149,8)" fg:x="9809" fg:w="94"/><text x="90.8392%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.07%)</title><rect x="91.3835%" y="101" width="0.0739%" height="15" fill="rgb(243,35,44)" fg:x="9895" fg:w="8"/><text x="91.6335%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.05%)</title><rect x="91.4573%" y="117" width="0.0462%" height="15" fill="rgb(246,89,9)" fg:x="9903" fg:w="5"/><text x="91.7073%" y="127.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (117 samples, 1.08%)</title><rect x="90.4692%" y="133" width="1.0805%" height="15" fill="rgb(233,213,13)" fg:x="9796" fg:w="117"/><text x="90.7192%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (5 samples, 0.05%)</title><rect x="91.5035%" y="117" width="0.0462%" height="15" fill="rgb(233,141,41)" fg:x="9908" fg:w="5"/><text x="91.7535%" y="127.50"></text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::compile (1,524 samples, 14.07%)</title><rect x="77.4843%" y="165" width="14.0746%" height="15" fill="rgb(239,167,4)" fg:x="8390" fg:w="1524"/><text x="77.7343%" y="175.50">colors`rustybuzz::hb:..</text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::add_lookups (147 samples, 1.36%)</title><rect x="90.2013%" y="149" width="1.3576%" height="15" fill="rgb(209,217,16)" fg:x="9767" fg:w="147"/><text x="90.4513%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.06%)</title><rect x="91.5589%" y="165" width="0.0554%" height="15" fill="rgb(219,88,35)" fg:x="9914" fg:w="6"/><text x="91.8089%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (6 samples, 0.06%)</title><rect x="91.6143%" y="165" width="0.0554%" height="15" fill="rgb(220,193,23)" fg:x="9920" fg:w="6"/><text x="91.8643%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.09%)</title><rect x="91.6697%" y="165" width="0.0924%" height="15" fill="rgb(230,90,52)" fg:x="9926" fg:w="10"/><text x="91.9197%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::compile (1,655 samples, 15.28%)</title><rect x="76.4961%" y="181" width="15.2844%" height="15" fill="rgb(252,106,19)" fg:x="8283" fg:w="1655"/><text x="76.7461%" y="191.50">colors`rustybuzz::hb::o..</text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="91.7621%" y="165" width="0.0185%" height="15" fill="rgb(206,74,20)" fg:x="9936" fg:w="2"/><text x="92.0121%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::tag::tags_from_script_and_language (3 samples, 0.03%)</title><rect x="91.7806%" y="181" width="0.0277%" height="15" fill="rgb(230,138,44)" fg:x="9938" fg:w="3"/><text x="92.0306%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.03%)</title><rect x="91.8083%" y="181" width="0.0277%" height="15" fill="rgb(235,182,43)" fg:x="9941" fg:w="3"/><text x="92.0583%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t::new (1,935 samples, 17.87%)</title><rect x="74.0395%" y="197" width="17.8703%" height="15" fill="rgb(242,16,51)" fg:x="8017" fg:w="1935"/><text x="74.2895%" y="207.50">colors`rustybuzz::hb::ot_sha..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.06%)</title><rect x="91.8452%" y="181" width="0.0646%" height="15" fill="rgb(248,9,4)" fg:x="9945" fg:w="7"/><text x="92.0952%" y="191.50"></text></g><g><title>colors`&lt;char as unicode_properties::general_category::UnicodeGeneralCategory&gt;::general_category (8 samples, 0.07%)</title><rect x="92.1038%" y="181" width="0.0739%" height="15" fill="rgb(210,31,22)" fg:x="9973" fg:w="8"/><text x="92.3538%" y="191.50"></text></g><g><title>colors`&lt;char as rustybuzz::hb::unicode::CharExt&gt;::script (2 samples, 0.02%)</title><rect x="92.2700%" y="165" width="0.0185%" height="15" fill="rgb(239,54,39)" fg:x="9991" fg:w="2"/><text x="92.5200%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::guess_segment_properties (16 samples, 0.15%)</title><rect x="92.1777%" y="181" width="0.1478%" height="15" fill="rgb(230,99,41)" fg:x="9981" fg:w="16"/><text x="92.4277%" y="191.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (4 samples, 0.04%)</title><rect x="92.2885%" y="165" width="0.0369%" height="15" fill="rgb(253,106,12)" fg:x="9993" fg:w="4"/><text x="92.5385%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::next_glyphs (2 samples, 0.02%)</title><rect x="92.3255%" y="181" width="0.0185%" height="15" fill="rgb(213,46,41)" fg:x="9997" fg:w="2"/><text x="92.5755%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::sync (18 samples, 0.17%)</title><rect x="92.3439%" y="181" width="0.1662%" height="15" fill="rgb(215,133,35)" fg:x="9999" fg:w="18"/><text x="92.5939%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_glyph_info_t::init_unicode_props (7 samples, 0.06%)</title><rect x="92.5102%" y="181" width="0.0646%" height="15" fill="rgb(213,28,5)" fg:x="10017" fg:w="7"/><text x="92.7602%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::glyph_advance (2 samples, 0.02%)</title><rect x="92.5840%" y="181" width="0.0185%" height="15" fill="rgb(215,77,49)" fg:x="10025" fg:w="2"/><text x="92.8340%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::next_glyphs (4 samples, 0.04%)</title><rect x="93.7107%" y="165" width="0.0369%" height="15" fill="rgb(248,100,22)" fg:x="10147" fg:w="4"/><text x="93.9607%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::ot_layout::apply_layout_table (145 samples, 1.34%)</title><rect x="92.6025%" y="181" width="1.3391%" height="15" fill="rgb(208,67,9)" fg:x="10027" fg:w="145"/><text x="92.8525%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::sync (21 samples, 0.19%)</title><rect x="93.7477%" y="165" width="0.1939%" height="15" fill="rgb(219,133,21)" fg:x="10151" fg:w="21"/><text x="93.9977%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::next_glyphs (4 samples, 0.04%)</title><rect x="93.9047%" y="149" width="0.0369%" height="15" fill="rgb(246,46,29)" fg:x="10168" fg:w="4"/><text x="94.1547%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::ot_layout::hb_ot_layout_substitute_start (3 samples, 0.03%)</title><rect x="93.9416%" y="181" width="0.0277%" height="15" fill="rgb(246,185,52)" fg:x="10172" fg:w="3"/><text x="94.1916%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::next_glyphs (2 samples, 0.02%)</title><rect x="94.0248%" y="165" width="0.0185%" height="15" fill="rgb(252,136,11)" fg:x="10181" fg:w="2"/><text x="94.2748%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::sync (5 samples, 0.05%)</title><rect x="94.0432%" y="165" width="0.0462%" height="15" fill="rgb(219,138,53)" fg:x="10183" fg:w="5"/><text x="94.2932%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::get_nominal_glyph (5 samples, 0.05%)</title><rect x="94.0894%" y="165" width="0.0462%" height="15" fill="rgb(211,51,23)" fg:x="10188" fg:w="5"/><text x="94.3394%" y="175.50"></text></g><g><title>colors`ttf_parser::tables::cmap::Subtables::get (5 samples, 0.05%)</title><rect x="94.0894%" y="149" width="0.0462%" height="15" fill="rgb(247,221,28)" fg:x="10188" fg:w="5"/><text x="94.3394%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_normalize::_hb_ot_shape_normalize (36 samples, 0.33%)</title><rect x="93.9693%" y="181" width="0.3325%" height="15" fill="rgb(251,222,45)" fg:x="10175" fg:w="36"/><text x="94.2193%" y="191.50"></text></g><g><title>colors`ttf_parser::tables::cmap::format12::Subtable12::glyph_index (18 samples, 0.17%)</title><rect x="94.1356%" y="165" width="0.1662%" height="15" fill="rgb(217,162,53)" fg:x="10193" fg:w="18"/><text x="94.3856%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::shape::shape_with_plan (274 samples, 2.53%)</title><rect x="91.9099%" y="197" width="2.5305%" height="15" fill="rgb(229,93,14)" fg:x="9952" fg:w="274"/><text x="92.1599%" y="207.50">co..</text></g><g><title>colors`ttf_parser::ggg::ClassDefinition::get (15 samples, 0.14%)</title><rect x="94.3018%" y="181" width="0.1385%" height="15" fill="rgb(209,67,49)" fg:x="10211" fg:w="15"/><text x="94.5518%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (6 samples, 0.06%)</title><rect x="94.4403%" y="197" width="0.0554%" height="15" fill="rgb(213,87,29)" fg:x="10226" fg:w="6"/><text x="94.6903%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="94.4958%" y="197" width="0.0185%" height="15" fill="rgb(205,151,52)" fg:x="10232" fg:w="2"/><text x="94.7458%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.02%)</title><rect x="94.5142%" y="197" width="0.0185%" height="15" fill="rgb(253,215,39)" fg:x="10234" fg:w="2"/><text x="94.7642%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.02%)</title><rect x="94.5327%" y="197" width="0.0185%" height="15" fill="rgb(221,220,41)" fg:x="10236" fg:w="2"/><text x="94.7827%" y="207.50"></text></g><g><title>colors`cosmic_text::shape::shape_fallback (2,350 samples, 21.70%)</title><rect x="72.8666%" y="213" width="21.7030%" height="15" fill="rgb(218,133,21)" fg:x="7890" fg:w="2350"/><text x="73.1166%" y="223.50">colors`cosmic_text::shape::shape_f..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="94.5512%" y="197" width="0.0185%" height="15" fill="rgb(221,193,43)" fg:x="10238" fg:w="2"/><text x="94.8012%" y="207.50"></text></g><g><title>colors`fontdb::Database::face (228 samples, 2.11%)</title><rect x="94.5696%" y="213" width="2.1057%" height="15" fill="rgb(240,128,52)" fg:x="10240" fg:w="228"/><text x="94.8196%" y="223.50">c..</text></g><g><title>colors`rustybuzz::hb::shape::shape_with_plan (3 samples, 0.03%)</title><rect x="96.6845%" y="213" width="0.0277%" height="15" fill="rgb(253,114,12)" fg:x="10469" fg:w="3"/><text x="96.9345%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.02%)</title><rect x="96.7122%" y="213" width="0.0185%" height="15" fill="rgb(215,223,47)" fg:x="10472" fg:w="2"/><text x="96.9622%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (42 samples, 0.39%)</title><rect x="96.7399%" y="213" width="0.3879%" height="15" fill="rgb(248,225,23)" fg:x="10475" fg:w="42"/><text x="96.9899%" y="223.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (8,639 samples, 79.78%)</title><rect x="17.3532%" y="229" width="79.7839%" height="15" fill="rgb(250,108,0)" fg:x="1879" fg:w="8639"/><text x="17.6032%" y="239.50">colors`cosmic_text::shape::Shaping::run</text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (8,689 samples, 80.25%)</title><rect x="16.9468%" y="245" width="80.2457%" height="15" fill="rgb(228,208,7)" fg:x="1835" fg:w="8689"/><text x="17.1968%" y="255.50">colors`cosmic_text::shape::ShapeWord::build</text></g><g><title>colors`unicode_segmentation::grapheme::GraphemeCursor::grapheme_category (5 samples, 0.05%)</title><rect x="97.1463%" y="229" width="0.0462%" height="15" fill="rgb(244,45,10)" fg:x="10519" fg:w="5"/><text x="97.3963%" y="239.50"></text></g><g><title>colors`unicode_segmentation::tables::grapheme::grapheme_category (3 samples, 0.03%)</title><rect x="97.1648%" y="213" width="0.0277%" height="15" fill="rgb(207,125,25)" fg:x="10521" fg:w="3"/><text x="97.4148%" y="223.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (8,724 samples, 80.57%)</title><rect x="16.6420%" y="261" width="80.5689%" height="15" fill="rgb(210,195,18)" fg:x="1802" fg:w="8724"/><text x="16.8920%" y="271.50">colors`cosmic_text::shape::ShapeSpan::build</text></g><g><title>colors`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="97.5065%" y="229" width="0.0277%" height="15" fill="rgb(249,80,12)" fg:x="10558" fg:w="3"/><text x="97.7565%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.02%)</title><rect x="97.5157%" y="213" width="0.0185%" height="15" fill="rgb(221,65,9)" fg:x="10559" fg:w="2"/><text x="97.7657%" y="223.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (11 samples, 0.10%)</title><rect x="97.4788%" y="245" width="0.1016%" height="15" fill="rgb(235,49,36)" fg:x="10555" fg:w="11"/><text x="97.7288%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.05%)</title><rect x="97.5342%" y="229" width="0.0462%" height="15" fill="rgb(225,32,20)" fg:x="10561" fg:w="5"/><text x="97.7842%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.06%)</title><rect x="97.5803%" y="245" width="0.0646%" height="15" fill="rgb(215,141,46)" fg:x="10566" fg:w="7"/><text x="97.8303%" y="255.50"></text></g><g><title>colors`unicode_bidi::BidiInfo::new_with_data_source (75 samples, 0.69%)</title><rect x="97.2109%" y="261" width="0.6926%" height="15" fill="rgb(250,160,47)" fg:x="10526" fg:w="75"/><text x="97.4609%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (28 samples, 0.26%)</title><rect x="97.6450%" y="245" width="0.2586%" height="15" fill="rgb(216,222,40)" fg:x="10573" fg:w="28"/><text x="97.8950%" y="255.50"></text></g><g><title>colors`unicode_bidi::char_data::bsearch_range_value_table (6 samples, 0.06%)</title><rect x="97.9036%" y="261" width="0.0554%" height="15" fill="rgb(234,217,39)" fg:x="10601" fg:w="6"/><text x="98.1536%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.03%)</title><rect x="97.9590%" y="261" width="0.0277%" height="15" fill="rgb(207,178,40)" fg:x="10607" fg:w="3"/><text x="98.2090%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.08%)</title><rect x="97.9867%" y="261" width="0.0831%" height="15" fill="rgb(221,136,13)" fg:x="10610" fg:w="9"/><text x="98.2367%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13 samples, 0.12%)</title><rect x="98.0698%" y="261" width="0.1201%" height="15" fill="rgb(249,199,10)" fg:x="10619" fg:w="13"/><text x="98.3198%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.02%)</title><rect x="98.1899%" y="261" width="0.0185%" height="15" fill="rgb(249,222,13)" fg:x="10632" fg:w="2"/><text x="98.4399%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (4 samples, 0.04%)</title><rect x="98.2083%" y="261" width="0.0369%" height="15" fill="rgb(244,185,38)" fg:x="10634" fg:w="4"/><text x="98.4583%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="98.2545%" y="261" width="0.0185%" height="15" fill="rgb(236,202,9)" fg:x="10639" fg:w="2"/><text x="98.5045%" y="271.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (8,886 samples, 82.07%)</title><rect x="16.2542%" y="277" width="82.0650%" height="15" fill="rgb(250,229,37)" fg:x="1760" fg:w="8886"/><text x="16.5042%" y="287.50">colors`cosmic_text::shape::ShapeLine::build</text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.05%)</title><rect x="98.2730%" y="261" width="0.0462%" height="15" fill="rgb(206,174,23)" fg:x="10641" fg:w="5"/><text x="98.5230%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (12 samples, 0.11%)</title><rect x="98.3376%" y="277" width="0.1108%" height="15" fill="rgb(211,33,43)" fg:x="10648" fg:w="12"/><text x="98.5876%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.03%)</title><rect x="98.4485%" y="277" width="0.0277%" height="15" fill="rgb(245,58,50)" fg:x="10660" fg:w="3"/><text x="98.6985%" y="287.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (8,913 samples, 82.31%)</title><rect x="16.1803%" y="293" width="82.3144%" height="15" fill="rgb(244,68,36)" fg:x="1752" fg:w="8913"/><text x="16.4303%" y="303.50">colors`cosmic_text::buffer_line::BufferLine::shape</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="98.4762%" y="277" width="0.0185%" height="15" fill="rgb(232,229,15)" fg:x="10663" fg:w="2"/><text x="98.7262%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer (25 samples, 0.23%)</title><rect x="98.5039%" y="293" width="0.2309%" height="15" fill="rgb(254,30,23)" fg:x="10666" fg:w="25"/><text x="98.7539%" y="303.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer::_{{closure}} (4 samples, 0.04%)</title><rect x="98.7348%" y="293" width="0.0369%" height="15" fill="rgb(235,160,14)" fg:x="10691" fg:w="4"/><text x="98.9848%" y="303.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (5 samples, 0.05%)</title><rect x="98.7902%" y="261" width="0.0462%" height="15" fill="rgb(212,155,44)" fg:x="10697" fg:w="5"/><text x="99.0402%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.03%)</title><rect x="98.8086%" y="245" width="0.0277%" height="15" fill="rgb(226,2,50)" fg:x="10699" fg:w="3"/><text x="99.0586%" y="255.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (7 samples, 0.06%)</title><rect x="98.7809%" y="277" width="0.0646%" height="15" fill="rgb(234,177,6)" fg:x="10696" fg:w="7"/><text x="99.0309%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer::_{{closure}} (11 samples, 0.10%)</title><rect x="98.8548%" y="277" width="0.1016%" height="15" fill="rgb(217,24,9)" fg:x="10704" fg:w="11"/><text x="99.1048%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.06%)</title><rect x="98.9564%" y="277" width="0.0554%" height="15" fill="rgb(220,13,46)" fg:x="10715" fg:w="6"/><text x="99.2064%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (7 samples, 0.06%)</title><rect x="99.0118%" y="277" width="0.0646%" height="15" fill="rgb(239,221,27)" fg:x="10721" fg:w="7"/><text x="99.2618%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer (34 samples, 0.31%)</title><rect x="98.7717%" y="293" width="0.3140%" height="15" fill="rgb(222,198,25)" fg:x="10695" fg:w="34"/><text x="99.0217%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_free (7 samples, 0.06%)</title><rect x="99.0857%" y="293" width="0.0646%" height="15" fill="rgb(211,99,13)" fg:x="10729" fg:w="7"/><text x="99.3357%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.03%)</title><rect x="99.1504%" y="293" width="0.0277%" height="15" fill="rgb(232,111,31)" fg:x="10736" fg:w="3"/><text x="99.4004%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.02%)</title><rect x="99.1873%" y="293" width="0.0185%" height="15" fill="rgb(245,82,37)" fg:x="10740" fg:w="2"/><text x="99.4373%" y="303.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (8,994 samples, 83.06%)</title><rect x="16.1526%" y="309" width="83.0624%" height="15" fill="rgb(227,149,46)" fg:x="1749" fg:w="8994"/><text x="16.4026%" y="319.50">colors`cosmic_text::buffer_line::BufferLine::layout</text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (9,000 samples, 83.12%)</title><rect x="16.1156%" y="325" width="83.1178%" height="15" fill="rgb(218,36,50)" fg:x="1745" fg:w="9000"/><text x="16.3656%" y="335.50">colors`cosmic_text::buffer::Buffer::shape_until_scroll</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="99.2150%" y="309" width="0.0185%" height="15" fill="rgb(226,80,48)" fg:x="10743" fg:w="2"/><text x="99.4650%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.04%)</title><rect x="99.2427%" y="325" width="0.0369%" height="15" fill="rgb(238,224,15)" fg:x="10746" fg:w="4"/><text x="99.4927%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.06%)</title><rect x="99.2796%" y="325" width="0.0646%" height="15" fill="rgb(241,136,10)" fg:x="10750" fg:w="7"/><text x="99.5296%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.03%)</title><rect x="99.3443%" y="325" width="0.0277%" height="15" fill="rgb(208,32,45)" fg:x="10757" fg:w="3"/><text x="99.5943%" y="335.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (9,098 samples, 84.02%)</title><rect x="15.3860%" y="341" width="84.0229%" height="15" fill="rgb(207,135,9)" fg:x="1666" fg:w="9098"/><text x="15.6360%" y="351.50">colors`cosmic_text::buffer::Buffer::set_text</text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.03%)</title><rect x="99.3812%" y="325" width="0.0277%" height="15" fill="rgb(206,86,44)" fg:x="10761" fg:w="3"/><text x="99.6312%" y="335.50"></text></g><g><title>colors`cosmic_text::layout::LayoutGlyph::physical (3 samples, 0.03%)</title><rect x="99.4089%" y="341" width="0.0277%" height="15" fill="rgb(245,177,15)" fg:x="10764" fg:w="3"/><text x="99.6589%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.03%)</title><rect x="99.4459%" y="341" width="0.0277%" height="15" fill="rgb(206,64,50)" fg:x="10768" fg:w="3"/><text x="99.6959%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.04%)</title><rect x="99.4828%" y="341" width="0.0369%" height="15" fill="rgb(234,36,40)" fg:x="10772" fg:w="4"/><text x="99.7328%" y="351.50"></text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::draw_cell (9,682 samples, 89.42%)</title><rect x="10.1588%" y="357" width="89.4163%" height="15" fill="rgb(213,64,8)" fg:x="1100" fg:w="9682"/><text x="10.4088%" y="367.50">colors`soft_ratatui::soft_backend::SoftBackend::draw_cell</text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.06%)</title><rect x="99.5198%" y="341" width="0.0554%" height="15" fill="rgb(210,75,36)" fg:x="10776" fg:w="6"/><text x="99.7698%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.03%)</title><rect x="99.5752%" y="357" width="0.0277%" height="15" fill="rgb(229,88,21)" fg:x="10782" fg:w="3"/><text x="99.8252%" y="367.50"></text></g><g><title>colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw (10,782 samples, 99.58%)</title><rect x="0.0462%" y="373" width="99.5752%" height="15" fill="rgb(252,204,47)" fg:x="5" fg:w="10782"/><text x="0.2962%" y="383.50">colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw</text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (4 samples, 0.04%)</title><rect x="99.6306%" y="373" width="0.0369%" height="15" fill="rgb(208,77,27)" fg:x="10788" fg:w="4"/><text x="99.8806%" y="383.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::diff (12 samples, 0.11%)</title><rect x="99.6675%" y="373" width="0.1108%" height="15" fill="rgb(221,76,26)" fg:x="10792" fg:w="12"/><text x="99.9175%" y="383.50"></text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (6 samples, 0.06%)</title><rect x="99.7229%" y="357" width="0.0554%" height="15" fill="rgb(225,139,18)" fg:x="10798" fg:w="6"/><text x="99.9729%" y="367.50"></text></g><g><title>colors`unicode_width::tables::lookup_width (4 samples, 0.04%)</title><rect x="99.7414%" y="341" width="0.0369%" height="15" fill="rgb(230,137,11)" fg:x="10800" fg:w="4"/><text x="99.9914%" y="351.50"></text></g><g><title>colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw (10,807 samples, 99.81%)</title><rect x="0.0000%" y="389" width="99.8061%" height="15" fill="rgb(212,28,1)" fg:x="0" fg:w="10807"/><text x="0.2500%" y="399.50">colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw</text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (3 samples, 0.03%)</title><rect x="99.8153%" y="373" width="0.0277%" height="15" fill="rgb(248,164,17)" fg:x="10808" fg:w="3"/><text x="100.0653%" y="383.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (3 samples, 0.03%)</title><rect x="99.8153%" y="357" width="0.0277%" height="15" fill="rgb(222,171,42)" fg:x="10808" fg:w="3"/><text x="100.0653%" y="367.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (3 samples, 0.03%)</title><rect x="99.8153%" y="341" width="0.0277%" height="15" fill="rgb(243,84,45)" fg:x="10808" fg:w="3"/><text x="100.0653%" y="351.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (3 samples, 0.03%)</title><rect x="99.8153%" y="325" width="0.0277%" height="15" fill="rgb(252,49,23)" fg:x="10808" fg:w="3"/><text x="100.0653%" y="335.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (3 samples, 0.03%)</title><rect x="99.8153%" y="309" width="0.0277%" height="15" fill="rgb(215,19,7)" fg:x="10808" fg:w="3"/><text x="100.0653%" y="319.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (3 samples, 0.03%)</title><rect x="99.8153%" y="293" width="0.0277%" height="15" fill="rgb(238,81,41)" fg:x="10808" fg:w="3"/><text x="100.0653%" y="303.50"></text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (3 samples, 0.03%)</title><rect x="99.8153%" y="277" width="0.0277%" height="15" fill="rgb(210,199,37)" fg:x="10808" fg:w="3"/><text x="100.0653%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (2 samples, 0.02%)</title><rect x="99.8245%" y="261" width="0.0185%" height="15" fill="rgb(244,192,49)" fg:x="10809" fg:w="2"/><text x="100.0745%" y="271.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="99.8245%" y="245" width="0.0185%" height="15" fill="rgb(226,211,11)" fg:x="10809" fg:w="2"/><text x="100.0745%" y="255.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (2 samples, 0.02%)</title><rect x="99.8245%" y="229" width="0.0185%" height="15" fill="rgb(236,162,54)" fg:x="10809" fg:w="2"/><text x="100.0745%" y="239.50"></text></g><g><title>colors`fontdb::Database::make_shared_face_data (2 samples, 0.02%)</title><rect x="99.8245%" y="213" width="0.0185%" height="15" fill="rgb(220,229,9)" fg:x="10809" fg:w="2"/><text x="100.0745%" y="223.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (2 samples, 0.02%)</title><rect x="99.8522%" y="325" width="0.0185%" height="15" fill="rgb(250,87,22)" fg:x="10812" fg:w="2"/><text x="100.1022%" y="335.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (10 samples, 0.09%)</title><rect x="99.8799%" y="309" width="0.0924%" height="15" fill="rgb(239,43,17)" fg:x="10815" fg:w="10"/><text x="100.1299%" y="319.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (10 samples, 0.09%)</title><rect x="99.8799%" y="293" width="0.0924%" height="15" fill="rgb(231,177,25)" fg:x="10815" fg:w="10"/><text x="100.1299%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__open (10 samples, 0.09%)</title><rect x="99.8799%" y="277" width="0.0924%" height="15" fill="rgb(219,179,1)" fg:x="10815" fg:w="10"/><text x="100.1299%" y="287.50"></text></g><g><title>all (10,828 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(238,219,53)" fg:x="0" fg:w="10828"/><text x="0.2500%" y="511.50"></text></g><g><title>dyld`start (10,828 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(232,167,36)" fg:x="0" fg:w="10828"/><text x="0.2500%" y="495.50">dyld`start</text></g><g><title>colors`main (10,828 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(244,19,51)" fg:x="0" fg:w="10828"/><text x="0.2500%" y="479.50">colors`main</text></g><g><title>colors`std::rt::lang_start_internal (10,828 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(224,6,22)" fg:x="0" fg:w="10828"/><text x="0.2500%" y="463.50">colors`std::rt::lang_start_internal</text></g><g><title>colors`std::rt::lang_start::_{{closure}} (10,828 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(224,145,5)" fg:x="0" fg:w="10828"/><text x="0.2500%" y="447.50">colors`std::rt::lang_start::_{{closure}}</text></g><g><title>colors`std::sys::backtrace::__rust_begin_short_backtrace (10,828 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(234,130,49)" fg:x="0" fg:w="10828"/><text x="0.2500%" y="431.50">colors`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>colors`colors::main (10,828 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(254,6,2)" fg:x="0" fg:w="10828"/><text x="0.2500%" y="415.50">colors`colors::main</text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::new (21 samples, 0.19%)</title><rect x="99.8061%" y="389" width="0.1939%" height="15" fill="rgb(208,96,46)" fg:x="10807" fg:w="21"/><text x="100.0561%" y="399.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::new (17 samples, 0.16%)</title><rect x="99.8430%" y="373" width="0.1570%" height="15" fill="rgb(239,3,39)" fg:x="10811" fg:w="17"/><text x="100.0930%" y="383.50"></text></g><g><title>colors`fontdb::Database::load_system_fonts (16 samples, 0.15%)</title><rect x="99.8522%" y="357" width="0.1478%" height="15" fill="rgb(233,210,1)" fg:x="10812" fg:w="16"/><text x="100.1022%" y="367.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (16 samples, 0.15%)</title><rect x="99.8522%" y="341" width="0.1478%" height="15" fill="rgb(244,137,37)" fg:x="10812" fg:w="16"/><text x="100.1022%" y="351.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (14 samples, 0.13%)</title><rect x="99.8707%" y="325" width="0.1293%" height="15" fill="rgb(240,136,2)" fg:x="10814" fg:w="14"/><text x="100.1207%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`stat (2 samples, 0.02%)</title><rect x="99.9815%" y="309" width="0.0185%" height="15" fill="rgb(239,18,37)" fg:x="10826" fg:w="2"/><text x="100.2315%" y="319.50"></text></g></svg></svg>
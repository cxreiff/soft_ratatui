<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="3398"><g><title>canvas`fontdue::hash::hash (2 samples, 0.06%)</title><rect x="0.0000%" y="325" width="0.0589%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="335.50"></text></g><g><title>canvas`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="0.0589%" y="165" width="0.0589%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="2"/><text x="0.3089%" y="175.50"></text></g><g><title>canvas`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (2 samples, 0.06%)</title><rect x="0.0589%" y="149" width="0.0589%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="2"/><text x="0.3089%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.06%)</title><rect x="0.0589%" y="133" width="0.0589%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="2"/><text x="0.3089%" y="143.50"></text></g><g><title>canvas`fdeflate::compress::Compressor&lt;W&gt;::write_run (40 samples, 1.18%)</title><rect x="6.6215%" y="117" width="1.1772%" height="15" fill="rgb(208,68,35)" fg:x="225" fg:w="40"/><text x="6.8715%" y="127.50"></text></g><g><title>canvas`simd_adler32::Adler32::write (1 samples, 0.03%)</title><rect x="7.7987%" y="117" width="0.0294%" height="15" fill="rgb(232,128,0)" fg:x="265" fg:w="1"/><text x="8.0487%" y="127.50"></text></g><g><title>canvas`fdeflate::compress::Compressor&lt;W&gt;::write_data (1,427 samples, 42.00%)</title><rect x="0.1471%" y="133" width="41.9953%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1427"/><text x="0.3971%" y="143.50">canvas`fdeflate::compress::Compressor&lt;W&gt;::write_data</text></g><g><title>canvas`simd_adler32::imp::scalar::update (1,166 samples, 34.31%)</title><rect x="7.8281%" y="117" width="34.3143%" height="15" fill="rgb(228,23,34)" fg:x="266" fg:w="1166"/><text x="8.0781%" y="127.50">canvas`simd_adler32::imp::scalar::update</text></g><g><title>canvas`fdeflate::compress::Compressor&lt;W&gt;::write_run (20 samples, 0.59%)</title><rect x="42.1424%" y="133" width="0.5886%" height="15" fill="rgb(218,30,26)" fg:x="1432" fg:w="20"/><text x="42.3924%" y="143.50"></text></g><g><title>canvas`crc32fast::Hasher::update (19 samples, 0.56%)</title><rect x="42.7310%" y="117" width="0.5592%" height="15" fill="rgb(220,122,19)" fg:x="1452" fg:w="19"/><text x="42.9810%" y="127.50"></text></g><g><title>canvas`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (23 samples, 0.68%)</title><rect x="43.2902%" y="85" width="0.6769%" height="15" fill="rgb(250,228,42)" fg:x="1471" fg:w="23"/><text x="43.5402%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`write (23 samples, 0.68%)</title><rect x="43.2902%" y="69" width="0.6769%" height="15" fill="rgb(240,193,28)" fg:x="1471" fg:w="23"/><text x="43.5402%" y="79.50"></text></g><g><title>canvas`png::encoder::Writer&lt;W&gt;::write_zlib_encoded_idat (64 samples, 1.88%)</title><rect x="42.7310%" y="133" width="1.8835%" height="15" fill="rgb(216,20,37)" fg:x="1452" fg:w="64"/><text x="42.9810%" y="143.50">c..</text></g><g><title>canvas`png::encoder::write_chunk (45 samples, 1.32%)</title><rect x="43.2902%" y="117" width="1.3243%" height="15" fill="rgb(206,188,39)" fg:x="1471" fg:w="45"/><text x="43.5402%" y="127.50"></text></g><g><title>canvas`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (45 samples, 1.32%)</title><rect x="43.2902%" y="101" width="1.3243%" height="15" fill="rgb(217,207,13)" fg:x="1471" fg:w="45"/><text x="43.5402%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`write (22 samples, 0.65%)</title><rect x="43.9670%" y="85" width="0.6474%" height="15" fill="rgb(231,73,38)" fg:x="1494" fg:w="22"/><text x="44.2170%" y="95.50"></text></g><g><title>canvas`DYLD-STUB$$memcpy (4 samples, 0.12%)</title><rect x="70.9535%" y="117" width="0.1177%" height="15" fill="rgb(225,20,46)" fg:x="2411" fg:w="4"/><text x="71.2035%" y="127.50"></text></g><g><title>canvas`png::filter::filter_internal (448 samples, 13.18%)</title><rect x="71.0712%" y="117" width="13.1842%" height="15" fill="rgb(210,31,41)" fg:x="2415" fg:w="448"/><text x="71.3212%" y="127.50">canvas`png::filter::..</text></g><g><title>canvas`png::filter::filter (1,348 samples, 39.67%)</title><rect x="44.6145%" y="133" width="39.6704%" height="15" fill="rgb(221,200,47)" fg:x="1516" fg:w="1348"/><text x="44.8645%" y="143.50">canvas`png::filter::filter</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="84.2554%" y="117" width="0.0294%" height="15" fill="rgb(226,26,5)" fg:x="2863" fg:w="1"/><text x="84.5054%" y="127.50"></text></g><g><title>canvas`png::filter::filter_internal (4 samples, 0.12%)</title><rect x="84.2849%" y="133" width="0.1177%" height="15" fill="rgb(249,33,26)" fg:x="2864" fg:w="4"/><text x="84.5349%" y="143.50"></text></g><g><title>canvas`image::codecs::png::PngEncoder&lt;W&gt;::encode_inner (2,865 samples, 84.31%)</title><rect x="0.1177%" y="165" width="84.3143%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="2865"/><text x="0.3677%" y="175.50">canvas`image::codecs::png::PngEncoder&lt;W&gt;::encode_inner</text></g><g><title>canvas`png::encoder::Writer&lt;W&gt;::write_image_data (2,864 samples, 84.28%)</title><rect x="0.1471%" y="149" width="84.2849%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="2864"/><text x="0.3971%" y="159.50">canvas`png::encoder::Writer&lt;W&gt;::write_image_data</text></g><g><title>libsystem_malloc.dylib`medium_region_for_ptr_no_lock (1 samples, 0.03%)</title><rect x="84.4026%" y="133" width="0.0294%" height="15" fill="rgb(247,18,42)" fg:x="2868" fg:w="1"/><text x="84.6526%" y="143.50"></text></g><g><title>canvas`image::image_reader::free_functions::save_buffer_with_format_impl (2,891 samples, 85.08%)</title><rect x="0.0589%" y="181" width="85.0795%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="2891"/><text x="0.3089%" y="191.50">canvas`image::image_reader::free_functions::save_buffer_with_format_impl</text></g><g><title>canvas`std::fs::OpenOptions::_open (24 samples, 0.71%)</title><rect x="84.4320%" y="165" width="0.7063%" height="15" fill="rgb(249,31,29)" fg:x="2869" fg:w="24"/><text x="84.6820%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__open (24 samples, 0.71%)</title><rect x="84.4320%" y="149" width="0.7063%" height="15" fill="rgb(225,111,53)" fg:x="2869" fg:w="24"/><text x="84.6820%" y="159.50"></text></g><g><title>canvas`image::image_reader::free_functions::save_buffer_impl (2,935 samples, 86.37%)</title><rect x="0.0589%" y="197" width="86.3743%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="2935"/><text x="0.3089%" y="207.50">canvas`image::image_reader::free_functions::save_buffer_impl</text></g><g><title>libsystem_kernel.dylib`close (44 samples, 1.29%)</title><rect x="85.1383%" y="181" width="1.2949%" height="15" fill="rgb(214,148,48)" fg:x="2893" fg:w="44"/><text x="85.3883%" y="191.50"></text></g><g><title>canvas`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw (2,937 samples, 86.43%)</title><rect x="0.0589%" y="213" width="86.4332%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="2937"/><text x="0.3089%" y="223.50">canvas`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw</text></g><g><title>canvas`soft_ratatui::soft_backend::SoftBackend::draw_cell (2 samples, 0.06%)</title><rect x="86.4332%" y="197" width="0.0589%" height="15" fill="rgb(209,103,24)" fg:x="2937" fg:w="2"/><text x="86.6832%" y="207.50"></text></g><g><title>canvas`fontdue::font::Font::rasterize_indexed (1 samples, 0.03%)</title><rect x="86.4626%" y="181" width="0.0294%" height="15" fill="rgb(229,88,8)" fg:x="2938" fg:w="1"/><text x="86.7126%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="86.4626%" y="165" width="0.0294%" height="15" fill="rgb(213,181,19)" fg:x="2938" fg:w="1"/><text x="86.7126%" y="175.50"></text></g><g><title>canvas`DYLD-STUB$$memcmp (2 samples, 0.06%)</title><rect x="86.4921%" y="213" width="0.0589%" height="15" fill="rgb(254,191,54)" fg:x="2939" fg:w="2"/><text x="86.7421%" y="223.50"></text></g><g><title>canvas`ratatui::text::line::Line::render_with_alignment (1 samples, 0.03%)</title><rect x="86.5509%" y="165" width="0.0294%" height="15" fill="rgb(241,83,37)" fg:x="2941" fg:w="1"/><text x="86.8009%" y="175.50"></text></g><g><title>canvas`ratatui::buffer::buffer::Buffer::set_style (1 samples, 0.03%)</title><rect x="86.5509%" y="149" width="0.0294%" height="15" fill="rgb(233,36,39)" fg:x="2941" fg:w="1"/><text x="86.8009%" y="159.50"></text></g><g><title>canvas`&lt;ratatui::text::text::Text as ratatui::widgets::Widget&gt;::render (3 samples, 0.09%)</title><rect x="86.5509%" y="197" width="0.0883%" height="15" fill="rgb(226,3,54)" fg:x="2941" fg:w="3"/><text x="86.8009%" y="207.50"></text></g><g><title>canvas`&lt;ratatui::text::text::Text as ratatui::widgets::WidgetRef&gt;::render_ref (3 samples, 0.09%)</title><rect x="86.5509%" y="181" width="0.0883%" height="15" fill="rgb(245,192,40)" fg:x="2941" fg:w="3"/><text x="86.8009%" y="191.50"></text></g><g><title>canvas`ratatui::text::line::render_spans (2 samples, 0.06%)</title><rect x="86.5803%" y="165" width="0.0589%" height="15" fill="rgb(238,167,29)" fg:x="2942" fg:w="2"/><text x="86.8303%" y="175.50"></text></g><g><title>canvas`&lt;ratatui::text::span::Span as ratatui::widgets::WidgetRef&gt;::render_ref (2 samples, 0.06%)</title><rect x="86.5803%" y="149" width="0.0589%" height="15" fill="rgb(232,182,51)" fg:x="2942" fg:w="2"/><text x="86.8303%" y="159.50"></text></g><g><title>canvas`&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="87.1395%" y="149" width="0.0294%" height="15" fill="rgb(231,60,39)" fg:x="2961" fg:w="1"/><text x="87.3895%" y="159.50"></text></g><g><title>canvas`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.18%)</title><rect x="87.1395%" y="165" width="0.1766%" height="15" fill="rgb(208,69,12)" fg:x="2961" fg:w="6"/><text x="87.3895%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (5 samples, 0.15%)</title><rect x="87.1689%" y="149" width="0.1471%" height="15" fill="rgb(235,93,37)" fg:x="2962" fg:w="5"/><text x="87.4189%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.06%)</title><rect x="87.2572%" y="133" width="0.0589%" height="15" fill="rgb(213,116,39)" fg:x="2965" fg:w="2"/><text x="87.5072%" y="143.50"></text></g><g><title>canvas`&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="87.3161%" y="165" width="0.0589%" height="15" fill="rgb(222,207,29)" fg:x="2967" fg:w="2"/><text x="87.5661%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="87.3749%" y="165" width="0.0589%" height="15" fill="rgb(206,96,30)" fg:x="2969" fg:w="2"/><text x="87.6249%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="87.4338%" y="165" width="0.0294%" height="15" fill="rgb(218,138,4)" fg:x="2971" fg:w="1"/><text x="87.6838%" y="175.50"></text></g><g><title>canvas`&lt;ratatui::text::line::Line as core::convert::From&lt;alloc::string::String&gt;&gt;::from (13 samples, 0.38%)</title><rect x="87.1101%" y="181" width="0.3826%" height="15" fill="rgb(250,191,14)" fg:x="2960" fg:w="13"/><text x="87.3601%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="87.4632%" y="165" width="0.0294%" height="15" fill="rgb(239,60,40)" fg:x="2972" fg:w="1"/><text x="87.7132%" y="175.50"></text></g><g><title>canvas`ratatui::buffer::buffer::Buffer::set_style (17 samples, 0.50%)</title><rect x="87.5809%" y="165" width="0.5003%" height="15" fill="rgb(206,27,48)" fg:x="2976" fg:w="17"/><text x="87.8309%" y="175.50"></text></g><g><title>canvas`ratatui::buffer::cell::Cell::set_symbol (1 samples, 0.03%)</title><rect x="88.0812%" y="165" width="0.0294%" height="15" fill="rgb(225,35,8)" fg:x="2993" fg:w="1"/><text x="88.3312%" y="175.50"></text></g><g><title>canvas`&lt;ratatui::text::span::Span as ratatui::widgets::WidgetRef&gt;::render_ref (2 samples, 0.06%)</title><rect x="88.1107%" y="133" width="0.0589%" height="15" fill="rgb(250,213,24)" fg:x="2994" fg:w="2"/><text x="88.3607%" y="143.50"></text></g><g><title>canvas`core::iter::traits::double_ended::DoubleEndedIterator::rfold (1 samples, 0.03%)</title><rect x="88.1401%" y="117" width="0.0294%" height="15" fill="rgb(247,123,22)" fg:x="2995" fg:w="1"/><text x="88.3901%" y="127.50"></text></g><g><title>canvas`ratatui::widgets::block::Block::render_title_position (3 samples, 0.09%)</title><rect x="88.1107%" y="165" width="0.0883%" height="15" fill="rgb(231,138,38)" fg:x="2994" fg:w="3"/><text x="88.3607%" y="175.50"></text></g><g><title>canvas`ratatui::text::line::render_spans (3 samples, 0.09%)</title><rect x="88.1107%" y="149" width="0.0883%" height="15" fill="rgb(231,145,46)" fg:x="2994" fg:w="3"/><text x="88.3607%" y="159.50"></text></g><g><title>canvas`unicode_segmentation::grapheme::GraphemeCursor::grapheme_category (1 samples, 0.03%)</title><rect x="88.1695%" y="133" width="0.0294%" height="15" fill="rgb(251,118,11)" fg:x="2996" fg:w="1"/><text x="88.4195%" y="143.50"></text></g><g><title>canvas`&lt;ratatui::widgets::block::Block as ratatui::widgets::WidgetRef&gt;::render_ref (25 samples, 0.74%)</title><rect x="87.4926%" y="181" width="0.7357%" height="15" fill="rgb(217,147,25)" fg:x="2973" fg:w="25"/><text x="87.7426%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="88.1989%" y="165" width="0.0294%" height="15" fill="rgb(247,81,37)" fg:x="2997" fg:w="1"/><text x="88.4489%" y="175.50"></text></g><g><title>canvas`&lt;ratatui::widgets::canvas::CharGrid as ratatui::widgets::canvas::Grid&gt;::paint (5 samples, 0.15%)</title><rect x="88.2284%" y="181" width="0.1471%" height="15" fill="rgb(209,12,38)" fg:x="2998" fg:w="5"/><text x="88.4784%" y="191.50"></text></g><g><title>libsystem_m.dylib`0x00000001978799e4 (1 samples, 0.03%)</title><rect x="88.4344%" y="165" width="0.0294%" height="15" fill="rgb(227,1,9)" fg:x="3005" fg:w="1"/><text x="88.6844%" y="175.50"></text></g><g><title>canvas`&lt;ratatui::widgets::canvas::circle::Circle as ratatui::widgets::canvas::Shape&gt;::draw (5 samples, 0.15%)</title><rect x="88.3755%" y="181" width="0.1471%" height="15" fill="rgb(248,47,43)" fg:x="3003" fg:w="5"/><text x="88.6255%" y="191.50"></text></g><g><title>libsystem_m.dylib`0x0000000197879afc (2 samples, 0.06%)</title><rect x="88.4638%" y="165" width="0.0589%" height="15" fill="rgb(221,10,30)" fg:x="3006" fg:w="2"/><text x="88.7138%" y="175.50"></text></g><g><title>canvas`&lt;ratatui::widgets::canvas::line::Line as ratatui::widgets::canvas::Shape&gt;::draw (1 samples, 0.03%)</title><rect x="88.5227%" y="181" width="0.0294%" height="15" fill="rgb(210,229,1)" fg:x="3008" fg:w="1"/><text x="88.7727%" y="191.50"></text></g><g><title>canvas`&lt;ratatui::widgets::canvas::map::Map as ratatui::widgets::canvas::Shape&gt;::draw (27 samples, 0.79%)</title><rect x="88.5521%" y="181" width="0.7946%" height="15" fill="rgb(222,148,37)" fg:x="3009" fg:w="27"/><text x="88.8021%" y="191.50"></text></g><g><title>canvas`&lt;ratatui::widgets::canvas::rectangle::Rectangle as ratatui::widgets::canvas::Shape&gt;::draw (1 samples, 0.03%)</title><rect x="89.3467%" y="181" width="0.0294%" height="15" fill="rgb(234,67,33)" fg:x="3036" fg:w="1"/><text x="89.5967%" y="191.50"></text></g><g><title>canvas`&lt;ratatui::widgets::canvas::line::Line as ratatui::widgets::canvas::Shape&gt;::draw (1 samples, 0.03%)</title><rect x="89.3467%" y="165" width="0.0294%" height="15" fill="rgb(247,98,35)" fg:x="3036" fg:w="1"/><text x="89.5967%" y="175.50"></text></g><g><title>canvas`DYLD-STUB$$memcpy (1 samples, 0.03%)</title><rect x="89.3761%" y="181" width="0.0294%" height="15" fill="rgb(247,138,52)" fg:x="3037" fg:w="1"/><text x="89.6261%" y="191.50"></text></g><g><title>canvas`core::fmt::Formatter::pad_integral (2 samples, 0.06%)</title><rect x="89.4350%" y="149" width="0.0589%" height="15" fill="rgb(213,79,30)" fg:x="3039" fg:w="2"/><text x="89.6850%" y="159.50"></text></g><g><title>canvas`alloc::raw_vec::finish_grow (3 samples, 0.09%)</title><rect x="89.4938%" y="101" width="0.0883%" height="15" fill="rgb(246,177,23)" fg:x="3041" fg:w="3"/><text x="89.7438%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.09%)</title><rect x="89.4938%" y="85" width="0.0883%" height="15" fill="rgb(230,62,27)" fg:x="3041" fg:w="3"/><text x="89.7438%" y="95.50"></text></g><g><title>canvas`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.12%)</title><rect x="89.4938%" y="133" width="0.1177%" height="15" fill="rgb(216,154,8)" fg:x="3041" fg:w="4"/><text x="89.7438%" y="143.50"></text></g><g><title>canvas`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4 samples, 0.12%)</title><rect x="89.4938%" y="117" width="0.1177%" height="15" fill="rgb(244,35,45)" fg:x="3041" fg:w="4"/><text x="89.7438%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="89.5821%" y="101" width="0.0294%" height="15" fill="rgb(251,115,12)" fg:x="3044" fg:w="1"/><text x="89.8321%" y="111.50"></text></g><g><title>canvas`alloc::fmt::format::format_inner (8 samples, 0.24%)</title><rect x="89.4055%" y="181" width="0.2354%" height="15" fill="rgb(240,54,50)" fg:x="3038" fg:w="8"/><text x="89.6555%" y="191.50"></text></g><g><title>canvas`core::fmt::write (7 samples, 0.21%)</title><rect x="89.4350%" y="165" width="0.2060%" height="15" fill="rgb(233,84,52)" fg:x="3039" fg:w="7"/><text x="89.6850%" y="175.50"></text></g><g><title>canvas`core::fmt::num::imp::_&lt;impl core::fmt::Display for i32&gt;::fmt (5 samples, 0.15%)</title><rect x="89.4938%" y="149" width="0.1471%" height="15" fill="rgb(207,117,47)" fg:x="3041" fg:w="5"/><text x="89.7438%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="89.6115%" y="133" width="0.0294%" height="15" fill="rgb(249,43,39)" fg:x="3045" fg:w="1"/><text x="89.8615%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.03%)</title><rect x="89.6410%" y="117" width="0.0294%" height="15" fill="rgb(209,38,44)" fg:x="3046" fg:w="1"/><text x="89.8910%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.03%)</title><rect x="89.6410%" y="101" width="0.0294%" height="15" fill="rgb(236,212,23)" fg:x="3046" fg:w="1"/><text x="89.8910%" y="111.50"></text></g><g><title>canvas`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.06%)</title><rect x="89.6410%" y="181" width="0.0589%" height="15" fill="rgb(242,79,21)" fg:x="3046" fg:w="2"/><text x="89.8910%" y="191.50"></text></g><g><title>canvas`alloc::raw_vec::finish_grow (2 samples, 0.06%)</title><rect x="89.6410%" y="165" width="0.0589%" height="15" fill="rgb(211,96,35)" fg:x="3046" fg:w="2"/><text x="89.8910%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.06%)</title><rect x="89.6410%" y="149" width="0.0589%" height="15" fill="rgb(253,215,40)" fg:x="3046" fg:w="2"/><text x="89.8910%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.06%)</title><rect x="89.6410%" y="133" width="0.0589%" height="15" fill="rgb(211,81,21)" fg:x="3046" fg:w="2"/><text x="89.8910%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="89.6704%" y="117" width="0.0294%" height="15" fill="rgb(208,190,38)" fg:x="3047" fg:w="1"/><text x="89.9204%" y="127.50"></text></g><g><title>canvas`ratatui::buffer::buffer::Buffer::index_of (8 samples, 0.24%)</title><rect x="89.6998%" y="181" width="0.2354%" height="15" fill="rgb(235,213,38)" fg:x="3048" fg:w="8"/><text x="89.9498%" y="191.50"></text></g><g><title>canvas`core::iter::traits::double_ended::DoubleEndedIterator::rfold (1 samples, 0.03%)</title><rect x="89.9941%" y="149" width="0.0294%" height="15" fill="rgb(237,122,38)" fg:x="3058" fg:w="1"/><text x="90.2441%" y="159.50"></text></g><g><title>canvas`ratatui::buffer::cell::Cell::set_symbol (1 samples, 0.03%)</title><rect x="90.0235%" y="149" width="0.0294%" height="15" fill="rgb(244,218,35)" fg:x="3059" fg:w="1"/><text x="90.2735%" y="159.50"></text></g><g><title>canvas`ratatui::buffer::buffer::Buffer::set_line (5 samples, 0.15%)</title><rect x="89.9353%" y="181" width="0.1471%" height="15" fill="rgb(240,68,47)" fg:x="3056" fg:w="5"/><text x="90.1853%" y="191.50"></text></g><g><title>canvas`ratatui::buffer::buffer::Buffer::set_stringn (5 samples, 0.15%)</title><rect x="89.9353%" y="165" width="0.1471%" height="15" fill="rgb(210,16,53)" fg:x="3056" fg:w="5"/><text x="90.1853%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="90.0530%" y="149" width="0.0294%" height="15" fill="rgb(235,124,12)" fg:x="3060" fg:w="1"/><text x="90.3030%" y="159.50"></text></g><g><title>canvas`ratatui::buffer::buffer::Buffer::set_style (19 samples, 0.56%)</title><rect x="90.0824%" y="181" width="0.5592%" height="15" fill="rgb(224,169,11)" fg:x="3061" fg:w="19"/><text x="90.3324%" y="191.50"></text></g><g><title>canvas`ratatui::buffer::buffer::Buffer::index_of (15 samples, 0.44%)</title><rect x="90.2001%" y="165" width="0.4414%" height="15" fill="rgb(250,166,2)" fg:x="3065" fg:w="15"/><text x="90.4501%" y="175.50"></text></g><g><title>canvas`ratatui::buffer::cell::Cell::set_char (7 samples, 0.21%)</title><rect x="90.6416%" y="181" width="0.2060%" height="15" fill="rgb(242,216,29)" fg:x="3080" fg:w="7"/><text x="90.8916%" y="191.50"></text></g><g><title>canvas`ratatui::buffer::cell::Cell::set_symbol (2 samples, 0.06%)</title><rect x="90.8476%" y="181" width="0.0589%" height="15" fill="rgb(230,116,27)" fg:x="3087" fg:w="2"/><text x="91.0976%" y="191.50"></text></g><g><title>canvas`&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.32%)</title><rect x="90.9064%" y="149" width="0.3237%" height="15" fill="rgb(228,99,48)" fg:x="3089" fg:w="11"/><text x="91.1564%" y="159.50"></text></g><g><title>canvas`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.03%)</title><rect x="91.2007%" y="133" width="0.0294%" height="15" fill="rgb(253,11,6)" fg:x="3099" fg:w="1"/><text x="91.4507%" y="143.50"></text></g><g><title>canvas`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="91.2007%" y="117" width="0.0294%" height="15" fill="rgb(247,143,39)" fg:x="3099" fg:w="1"/><text x="91.4507%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.03%)</title><rect x="91.2007%" y="101" width="0.0294%" height="15" fill="rgb(236,97,10)" fg:x="3099" fg:w="1"/><text x="91.4507%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.03%)</title><rect x="91.2007%" y="85" width="0.0294%" height="15" fill="rgb(233,208,19)" fg:x="3099" fg:w="1"/><text x="91.4507%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.03%)</title><rect x="91.2007%" y="69" width="0.0294%" height="15" fill="rgb(216,164,2)" fg:x="3099" fg:w="1"/><text x="91.4507%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.03%)</title><rect x="91.2007%" y="53" width="0.0294%" height="15" fill="rgb(220,129,5)" fg:x="3099" fg:w="1"/><text x="91.4507%" y="63.50"></text></g><g><title>canvas`DYLD-STUB$$memcpy (1 samples, 0.03%)</title><rect x="91.2301%" y="149" width="0.0294%" height="15" fill="rgb(242,17,10)" fg:x="3100" fg:w="1"/><text x="91.4801%" y="159.50"></text></g><g><title>canvas`&lt;ratatui::widgets::canvas::CharGrid as ratatui::widgets::canvas::Grid&gt;::save (13 samples, 0.38%)</title><rect x="90.9064%" y="165" width="0.3826%" height="15" fill="rgb(242,107,0)" fg:x="3089" fg:w="13"/><text x="91.1564%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="91.2596%" y="149" width="0.0294%" height="15" fill="rgb(251,28,31)" fg:x="3101" fg:w="1"/><text x="91.5096%" y="159.50"></text></g><g><title>canvas`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.03%)</title><rect x="91.2890%" y="165" width="0.0294%" height="15" fill="rgb(233,223,10)" fg:x="3102" fg:w="1"/><text x="91.5390%" y="175.50"></text></g><g><title>canvas`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="91.2890%" y="149" width="0.0294%" height="15" fill="rgb(215,21,27)" fg:x="3102" fg:w="1"/><text x="91.5390%" y="159.50"></text></g><g><title>canvas`ratatui::widgets::canvas::Context::finish (15 samples, 0.44%)</title><rect x="90.9064%" y="181" width="0.4414%" height="15" fill="rgb(232,23,21)" fg:x="3089" fg:w="15"/><text x="91.1564%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (1 samples, 0.03%)</title><rect x="91.3184%" y="165" width="0.0294%" height="15" fill="rgb(244,5,23)" fg:x="3103" fg:w="1"/><text x="91.5684%" y="175.50"></text></g><g><title>canvas`__rdl_alloc (1 samples, 0.03%)</title><rect x="91.3479%" y="165" width="0.0294%" height="15" fill="rgb(226,81,46)" fg:x="3104" fg:w="1"/><text x="91.5979%" y="175.50"></text></g><g><title>canvas`ratatui::widgets::canvas::CharGrid::new (1 samples, 0.03%)</title><rect x="91.3773%" y="165" width="0.0294%" height="15" fill="rgb(247,70,30)" fg:x="3105" fg:w="1"/><text x="91.6273%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="91.3773%" y="149" width="0.0294%" height="15" fill="rgb(212,68,19)" fg:x="3105" fg:w="1"/><text x="91.6273%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.03%)</title><rect x="91.3773%" y="133" width="0.0294%" height="15" fill="rgb(240,187,13)" fg:x="3105" fg:w="1"/><text x="91.6273%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="91.4067%" y="165" width="0.0294%" height="15" fill="rgb(223,113,26)" fg:x="3106" fg:w="1"/><text x="91.6567%" y="175.50"></text></g><g><title>canvas`ratatui::widgets::canvas::Context::new (4 samples, 0.12%)</title><rect x="91.3479%" y="181" width="0.1177%" height="15" fill="rgb(206,192,2)" fg:x="3104" fg:w="4"/><text x="91.5979%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (1 samples, 0.03%)</title><rect x="91.4361%" y="165" width="0.0294%" height="15" fill="rgb(241,108,4)" fg:x="3107" fg:w="1"/><text x="91.6861%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.03%)</title><rect x="91.4656%" y="181" width="0.0294%" height="15" fill="rgb(247,173,49)" fg:x="3108" fg:w="1"/><text x="91.7156%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="91.4950%" y="181" width="0.0294%" height="15" fill="rgb(224,114,35)" fg:x="3109" fg:w="1"/><text x="91.7450%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.09%)</title><rect x="91.5244%" y="149" width="0.0883%" height="15" fill="rgb(245,159,27)" fg:x="3110" fg:w="3"/><text x="91.7744%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (5 samples, 0.15%)</title><rect x="91.5244%" y="181" width="0.1471%" height="15" fill="rgb(245,172,44)" fg:x="3110" fg:w="5"/><text x="91.7744%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (5 samples, 0.15%)</title><rect x="91.5244%" y="165" width="0.1471%" height="15" fill="rgb(236,23,11)" fg:x="3110" fg:w="5"/><text x="91.7744%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$madvise (2 samples, 0.06%)</title><rect x="91.6127%" y="149" width="0.0589%" height="15" fill="rgb(205,117,38)" fg:x="3113" fg:w="2"/><text x="91.8627%" y="159.50"></text></g><g><title>canvas`&lt;ratatui::widgets::canvas::Canvas&lt;F&gt; as ratatui::widgets::Widget&gt;::render (173 samples, 5.09%)</title><rect x="86.6392%" y="197" width="5.0912%" height="15" fill="rgb(237,72,25)" fg:x="2944" fg:w="173"/><text x="86.8892%" y="207.50">canvas..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.06%)</title><rect x="91.6716%" y="181" width="0.0589%" height="15" fill="rgb(244,70,9)" fg:x="3115" fg:w="2"/><text x="91.9216%" y="191.50"></text></g><g><title>canvas`ratatui::buffer::buffer::Buffer::index_of (1 samples, 0.03%)</title><rect x="91.7304%" y="197" width="0.0294%" height="15" fill="rgb(217,125,39)" fg:x="3117" fg:w="1"/><text x="91.9804%" y="207.50"></text></g><g><title>canvas`ratatui::buffer::cell::Cell::set_char (1 samples, 0.03%)</title><rect x="91.7599%" y="197" width="0.0294%" height="15" fill="rgb(235,36,10)" fg:x="3118" fg:w="1"/><text x="92.0099%" y="207.50"></text></g><g><title>canvas`ratatui::layout::layout::Layout::areas (2 samples, 0.06%)</title><rect x="91.7893%" y="197" width="0.0589%" height="15" fill="rgb(251,123,47)" fg:x="3119" fg:w="2"/><text x="92.0393%" y="207.50"></text></g><g><title>canvas`ratatui::layout::layout::Layout::split_with_spacers (2 samples, 0.06%)</title><rect x="91.7893%" y="181" width="0.0589%" height="15" fill="rgb(221,13,13)" fg:x="3119" fg:w="2"/><text x="92.0393%" y="191.50"></text></g><g><title>canvas`lru::LruCache&lt;K,V,S&gt;::get_or_insert (2 samples, 0.06%)</title><rect x="91.7893%" y="165" width="0.0589%" height="15" fill="rgb(238,131,9)" fg:x="3119" fg:w="2"/><text x="92.0393%" y="175.50"></text></g><g><title>canvas`&lt;lru::KeyRef&lt;K&gt; as core::hash::Hash&gt;::hash (1 samples, 0.03%)</title><rect x="91.8187%" y="149" width="0.0294%" height="15" fill="rgb(211,50,8)" fg:x="3120" fg:w="1"/><text x="92.0687%" y="159.50"></text></g><g><title>canvas`ratatui::widgets::block::Block::title (1 samples, 0.03%)</title><rect x="91.8481%" y="197" width="0.0294%" height="15" fill="rgb(245,182,24)" fg:x="3121" fg:w="1"/><text x="92.0981%" y="207.50"></text></g><g><title>canvas`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.03%)</title><rect x="91.8481%" y="181" width="0.0294%" height="15" fill="rgb(242,14,37)" fg:x="3121" fg:w="1"/><text x="92.0981%" y="191.50"></text></g><g><title>canvas`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="91.8481%" y="165" width="0.0294%" height="15" fill="rgb(246,228,12)" fg:x="3121" fg:w="1"/><text x="92.0981%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.03%)</title><rect x="91.8481%" y="149" width="0.0294%" height="15" fill="rgb(213,55,15)" fg:x="3121" fg:w="1"/><text x="92.0981%" y="159.50"></text></g><g><title>canvas`canvas::App::draw (183 samples, 5.39%)</title><rect x="86.5509%" y="213" width="5.3855%" height="15" fill="rgb(209,9,3)" fg:x="2941" fg:w="183"/><text x="86.8009%" y="223.50">canvas`..</text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.06%)</title><rect x="91.8776%" y="197" width="0.0589%" height="15" fill="rgb(230,59,30)" fg:x="3122" fg:w="2"/><text x="92.1276%" y="207.50"></text></g><g><title>canvas`core::iter::traits::double_ended::DoubleEndedIterator::rfold (35 samples, 1.03%)</title><rect x="91.9364%" y="213" width="1.0300%" height="15" fill="rgb(209,121,21)" fg:x="3124" fg:w="35"/><text x="92.1864%" y="223.50"></text></g><g><title>canvas`ratatui::buffer::buffer::Buffer::diff (105 samples, 3.09%)</title><rect x="92.9665%" y="213" width="3.0901%" height="15" fill="rgb(220,109,13)" fg:x="3159" fg:w="105"/><text x="93.2165%" y="223.50">can..</text></g><g><title>canvas`core::iter::traits::double_ended::DoubleEndedIterator::rfold (66 samples, 1.94%)</title><rect x="94.1142%" y="197" width="1.9423%" height="15" fill="rgb(232,18,1)" fg:x="3198" fg:w="66"/><text x="94.3642%" y="207.50">c..</text></g><g><title>canvas`unicode_width::tables::lookup_width (9 samples, 0.26%)</title><rect x="95.7916%" y="181" width="0.2649%" height="15" fill="rgb(215,41,42)" fg:x="3255" fg:w="9"/><text x="96.0416%" y="191.50"></text></g><g><title>canvas`ratatui::buffer::buffer::Buffer::reset (15 samples, 0.44%)</title><rect x="96.0565%" y="213" width="0.4414%" height="15" fill="rgb(224,123,36)" fg:x="3264" fg:w="15"/><text x="96.3065%" y="223.50"></text></g><g><title>canvas`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw (3,301 samples, 97.15%)</title><rect x="0.0589%" y="229" width="97.1454%" height="15" fill="rgb(240,125,3)" fg:x="2" fg:w="3301"/><text x="0.3089%" y="239.50">canvas`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (24 samples, 0.71%)</title><rect x="96.4979%" y="213" width="0.7063%" height="15" fill="rgb(205,98,50)" fg:x="3279" fg:w="24"/><text x="96.7479%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.06%)</title><rect x="97.2925%" y="165" width="0.0589%" height="15" fill="rgb(205,185,37)" fg:x="3306" fg:w="2"/><text x="97.5425%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="97.3220%" y="149" width="0.0294%" height="15" fill="rgb(238,207,15)" fg:x="3307" fg:w="1"/><text x="97.5720%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="97.3220%" y="133" width="0.0294%" height="15" fill="rgb(213,199,42)" fg:x="3307" fg:w="1"/><text x="97.5720%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="97.3220%" y="117" width="0.0294%" height="15" fill="rgb(235,201,11)" fg:x="3307" fg:w="1"/><text x="97.5720%" y="127.50"></text></g><g><title>canvas`fontdue::math::Geometry::finalize (5 samples, 0.15%)</title><rect x="97.2337%" y="197" width="0.1471%" height="15" fill="rgb(207,46,11)" fg:x="3304" fg:w="5"/><text x="97.4837%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.09%)</title><rect x="97.2925%" y="181" width="0.0883%" height="15" fill="rgb(241,35,35)" fg:x="3306" fg:w="3"/><text x="97.5425%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.03%)</title><rect x="97.3514%" y="165" width="0.0294%" height="15" fill="rgb(243,32,47)" fg:x="3308" fg:w="1"/><text x="97.6014%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.03%)</title><rect x="97.3514%" y="149" width="0.0294%" height="15" fill="rgb(247,202,23)" fg:x="3308" fg:w="1"/><text x="97.6014%" y="159.50"></text></g><g><title>canvas`ttf_parser::tables::cmap::Subtable::codepoints (1 samples, 0.03%)</title><rect x="97.3808%" y="197" width="0.0294%" height="15" fill="rgb(219,102,11)" fg:x="3309" fg:w="1"/><text x="97.6308%" y="207.50"></text></g><g><title>canvas`ttf_parser::tables::cmap::format12::Subtable12::glyph_index (1 samples, 0.03%)</title><rect x="97.3808%" y="181" width="0.0294%" height="15" fill="rgb(243,110,44)" fg:x="3309" fg:w="1"/><text x="97.6308%" y="191.50"></text></g><g><title>canvas`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::line_to (4 samples, 0.12%)</title><rect x="97.7634%" y="181" width="0.1177%" height="15" fill="rgb(222,74,54)" fg:x="3322" fg:w="4"/><text x="98.0134%" y="191.50"></text></g><g><title>canvas`fontdue::math::Geometry::push (4 samples, 0.12%)</title><rect x="97.7634%" y="165" width="0.1177%" height="15" fill="rgb(216,99,12)" fg:x="3322" fg:w="4"/><text x="98.0134%" y="175.50"></text></g><g><title>canvas`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.03%)</title><rect x="97.8517%" y="149" width="0.0294%" height="15" fill="rgb(226,22,26)" fg:x="3325" fg:w="1"/><text x="98.1017%" y="159.50"></text></g><g><title>canvas`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.06%)</title><rect x="97.9400%" y="165" width="0.0589%" height="15" fill="rgb(217,163,10)" fg:x="3328" fg:w="2"/><text x="98.1900%" y="175.50"></text></g><g><title>canvas`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="97.9694%" y="149" width="0.0294%" height="15" fill="rgb(213,25,53)" fg:x="3329" fg:w="1"/><text x="98.2194%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.03%)</title><rect x="97.9694%" y="133" width="0.0294%" height="15" fill="rgb(252,105,26)" fg:x="3329" fg:w="1"/><text x="98.2194%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.03%)</title><rect x="97.9694%" y="117" width="0.0294%" height="15" fill="rgb(220,39,43)" fg:x="3329" fg:w="1"/><text x="98.2194%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="97.9694%" y="101" width="0.0294%" height="15" fill="rgb(229,68,48)" fg:x="3329" fg:w="1"/><text x="98.2194%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="98.2048%" y="85" width="0.0294%" height="15" fill="rgb(252,8,32)" fg:x="3337" fg:w="1"/><text x="98.4548%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="98.2048%" y="69" width="0.0294%" height="15" fill="rgb(223,20,43)" fg:x="3337" fg:w="1"/><text x="98.4548%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="98.2048%" y="53" width="0.0294%" height="15" fill="rgb(229,81,49)" fg:x="3337" fg:w="1"/><text x="98.4548%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.03%)</title><rect x="98.2343%" y="85" width="0.0294%" height="15" fill="rgb(236,28,36)" fg:x="3338" fg:w="1"/><text x="98.4843%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="98.2343%" y="69" width="0.0294%" height="15" fill="rgb(249,185,26)" fg:x="3338" fg:w="1"/><text x="98.4843%" y="79.50"></text></g><g><title>canvas`fontdue::math::Geometry::push (10 samples, 0.29%)</title><rect x="97.9988%" y="165" width="0.2943%" height="15" fill="rgb(249,174,33)" fg:x="3330" fg:w="10"/><text x="98.2488%" y="175.50"></text></g><g><title>canvas`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4 samples, 0.12%)</title><rect x="98.1754%" y="149" width="0.1177%" height="15" fill="rgb(233,201,37)" fg:x="3336" fg:w="4"/><text x="98.4254%" y="159.50"></text></g><g><title>canvas`alloc::raw_vec::finish_grow (3 samples, 0.09%)</title><rect x="98.2048%" y="133" width="0.0883%" height="15" fill="rgb(221,78,26)" fg:x="3337" fg:w="3"/><text x="98.4548%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.09%)</title><rect x="98.2048%" y="117" width="0.0883%" height="15" fill="rgb(250,127,30)" fg:x="3337" fg:w="3"/><text x="98.4548%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.09%)</title><rect x="98.2048%" y="101" width="0.0883%" height="15" fill="rgb(230,49,44)" fg:x="3337" fg:w="3"/><text x="98.4548%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="98.2637%" y="85" width="0.0294%" height="15" fill="rgb(229,67,23)" fg:x="3339" fg:w="1"/><text x="98.5137%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="98.2931%" y="165" width="0.0294%" height="15" fill="rgb(249,83,47)" fg:x="3340" fg:w="1"/><text x="98.5431%" y="175.50"></text></g><g><title>canvas`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::quad_to (18 samples, 0.53%)</title><rect x="97.8811%" y="181" width="0.5297%" height="15" fill="rgb(215,43,3)" fg:x="3326" fg:w="18"/><text x="98.1311%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.09%)</title><rect x="98.3225%" y="165" width="0.0883%" height="15" fill="rgb(238,154,13)" fg:x="3341" fg:w="3"/><text x="98.5725%" y="175.50"></text></g><g><title>canvas`__rdl_alloc (2 samples, 0.06%)</title><rect x="98.4108%" y="181" width="0.0589%" height="15" fill="rgb(219,56,2)" fg:x="3344" fg:w="2"/><text x="98.6608%" y="191.50"></text></g><g><title>canvas`__rust_alloc (1 samples, 0.03%)</title><rect x="98.4697%" y="181" width="0.0294%" height="15" fill="rgb(233,0,4)" fg:x="3346" fg:w="1"/><text x="98.7197%" y="191.50"></text></g><g><title>canvas`fontdue::math::Geometry::push (9 samples, 0.26%)</title><rect x="98.4991%" y="181" width="0.2649%" height="15" fill="rgb(235,30,7)" fg:x="3347" fg:w="9"/><text x="98.7491%" y="191.50"></text></g><g><title>canvas`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::line_to (1 samples, 0.03%)</title><rect x="98.9700%" y="165" width="0.0294%" height="15" fill="rgb(250,79,13)" fg:x="3363" fg:w="1"/><text x="99.2200%" y="175.50"></text></g><g><title>canvas`fontdue::math::Geometry::push (1 samples, 0.03%)</title><rect x="98.9700%" y="149" width="0.0294%" height="15" fill="rgb(211,146,34)" fg:x="3363" fg:w="1"/><text x="99.2200%" y="159.50"></text></g><g><title>canvas`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.03%)</title><rect x="98.9700%" y="133" width="0.0294%" height="15" fill="rgb(228,22,38)" fg:x="3363" fg:w="1"/><text x="99.2200%" y="143.50"></text></g><g><title>canvas`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="98.9700%" y="117" width="0.0294%" height="15" fill="rgb(235,168,5)" fg:x="3363" fg:w="1"/><text x="99.2200%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.03%)</title><rect x="98.9700%" y="101" width="0.0294%" height="15" fill="rgb(221,155,16)" fg:x="3363" fg:w="1"/><text x="99.2200%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.03%)</title><rect x="98.9700%" y="85" width="0.0294%" height="15" fill="rgb(215,215,53)" fg:x="3363" fg:w="1"/><text x="99.2200%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.03%)</title><rect x="98.9700%" y="69" width="0.0294%" height="15" fill="rgb(223,4,10)" fg:x="3363" fg:w="1"/><text x="99.2200%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="98.9700%" y="53" width="0.0294%" height="15" fill="rgb(234,103,6)" fg:x="3363" fg:w="1"/><text x="99.2200%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="98.9700%" y="37" width="0.0294%" height="15" fill="rgb(227,97,0)" fg:x="3363" fg:w="1"/><text x="99.2200%" y="47.50"></text></g><g><title>canvas`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.03%)</title><rect x="99.0288%" y="149" width="0.0294%" height="15" fill="rgb(234,150,53)" fg:x="3365" fg:w="1"/><text x="99.2788%" y="159.50"></text></g><g><title>canvas`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="99.0288%" y="133" width="0.0294%" height="15" fill="rgb(228,201,54)" fg:x="3365" fg:w="1"/><text x="99.2788%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.03%)</title><rect x="99.0288%" y="117" width="0.0294%" height="15" fill="rgb(222,22,37)" fg:x="3365" fg:w="1"/><text x="99.2788%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.03%)</title><rect x="99.0288%" y="101" width="0.0294%" height="15" fill="rgb(237,53,32)" fg:x="3365" fg:w="1"/><text x="99.2788%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="99.0288%" y="85" width="0.0294%" height="15" fill="rgb(233,25,53)" fg:x="3365" fg:w="1"/><text x="99.2788%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="99.0288%" y="69" width="0.0294%" height="15" fill="rgb(210,40,34)" fg:x="3365" fg:w="1"/><text x="99.2788%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.03%)</title><rect x="99.1171%" y="101" width="0.0294%" height="15" fill="rgb(241,220,44)" fg:x="3368" fg:w="1"/><text x="99.3671%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.03%)</title><rect x="99.1171%" y="85" width="0.0294%" height="15" fill="rgb(235,28,35)" fg:x="3368" fg:w="1"/><text x="99.3671%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.03%)</title><rect x="99.1171%" y="69" width="0.0294%" height="15" fill="rgb(210,56,17)" fg:x="3368" fg:w="1"/><text x="99.3671%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="99.1171%" y="53" width="0.0294%" height="15" fill="rgb(224,130,29)" fg:x="3368" fg:w="1"/><text x="99.3671%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="99.1171%" y="37" width="0.0294%" height="15" fill="rgb(235,212,8)" fg:x="3368" fg:w="1"/><text x="99.3671%" y="47.50"></text></g><g><title>canvas`fontdue::math::Geometry::push (4 samples, 0.12%)</title><rect x="99.0583%" y="149" width="0.1177%" height="15" fill="rgb(223,33,50)" fg:x="3366" fg:w="4"/><text x="99.3083%" y="159.50"></text></g><g><title>canvas`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.06%)</title><rect x="99.1171%" y="133" width="0.0589%" height="15" fill="rgb(219,149,13)" fg:x="3368" fg:w="2"/><text x="99.3671%" y="143.50"></text></g><g><title>canvas`alloc::raw_vec::finish_grow (2 samples, 0.06%)</title><rect x="99.1171%" y="117" width="0.0589%" height="15" fill="rgb(250,156,29)" fg:x="3368" fg:w="2"/><text x="99.3671%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="99.1466%" y="101" width="0.0294%" height="15" fill="rgb(216,193,19)" fg:x="3369" fg:w="1"/><text x="99.3966%" y="111.50"></text></g><g><title>canvas`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::quad_to (7 samples, 0.21%)</title><rect x="98.9994%" y="165" width="0.2060%" height="15" fill="rgb(216,135,14)" fg:x="3364" fg:w="7"/><text x="99.2494%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="99.1760%" y="149" width="0.0294%" height="15" fill="rgb(241,47,5)" fg:x="3370" fg:w="1"/><text x="99.4260%" y="159.50"></text></g><g><title>canvas`fontdue::math::Geometry::push (4 samples, 0.12%)</title><rect x="99.2054%" y="165" width="0.1177%" height="15" fill="rgb(233,42,35)" fg:x="3371" fg:w="4"/><text x="99.4554%" y="175.50"></text></g><g><title>canvas`fontdue::math::Geometry::push (1 samples, 0.03%)</title><rect x="99.3231%" y="133" width="0.0294%" height="15" fill="rgb(231,13,6)" fg:x="3375" fg:w="1"/><text x="99.5731%" y="143.50"></text></g><g><title>canvas`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::quad_to (2 samples, 0.06%)</title><rect x="99.3231%" y="149" width="0.0589%" height="15" fill="rgb(207,181,40)" fg:x="3375" fg:w="2"/><text x="99.5731%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.03%)</title><rect x="99.3526%" y="133" width="0.0294%" height="15" fill="rgb(254,173,49)" fg:x="3376" fg:w="1"/><text x="99.6026%" y="143.50"></text></g><g><title>canvas`ttf_parser::tables::glyf::outline_impl (3 samples, 0.09%)</title><rect x="99.3231%" y="165" width="0.0883%" height="15" fill="rgb(221,1,38)" fg:x="3375" fg:w="3"/><text x="99.5731%" y="175.50"></text></g><g><title>canvas`fontdue::math::Geometry::push (1 samples, 0.03%)</title><rect x="99.3820%" y="149" width="0.0294%" height="15" fill="rgb(206,124,46)" fg:x="3377" fg:w="1"/><text x="99.6320%" y="159.50"></text></g><g><title>canvas`ttf_parser::tables::glyf::outline_impl (24 samples, 0.71%)</title><rect x="98.7640%" y="181" width="0.7063%" height="15" fill="rgb(249,21,11)" fg:x="3356" fg:w="24"/><text x="99.0140%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="99.4114%" y="165" width="0.0589%" height="15" fill="rgb(222,201,40)" fg:x="3378" fg:w="2"/><text x="99.6614%" y="175.50"></text></g><g><title>canvas`ttf_parser::tables::glyf::resolve_coords_len (1 samples, 0.03%)</title><rect x="99.4703%" y="181" width="0.0294%" height="15" fill="rgb(235,61,29)" fg:x="3380" fg:w="1"/><text x="99.7203%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.03%)</title><rect x="99.4997%" y="181" width="0.0294%" height="15" fill="rgb(219,207,3)" fg:x="3381" fg:w="1"/><text x="99.7497%" y="191.50"></text></g><g><title>canvas`ttf_parser::tables::glyf::outline_impl (73 samples, 2.15%)</title><rect x="97.4102%" y="197" width="2.1483%" height="15" fill="rgb(222,56,46)" fg:x="3310" fg:w="73"/><text x="97.6602%" y="207.50">c..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="99.5291%" y="181" width="0.0294%" height="15" fill="rgb(239,76,54)" fg:x="3382" fg:w="1"/><text x="99.7791%" y="191.50"></text></g><g><title>canvas`fontdue::font::Font::from_bytes (86 samples, 2.53%)</title><rect x="97.2042%" y="213" width="2.5309%" height="15" fill="rgb(231,124,27)" fg:x="3303" fg:w="86"/><text x="97.4542%" y="223.50">ca..</text></g><g><title>canvas`ttf_parser::tables::glyf::resolve_coords_len (6 samples, 0.18%)</title><rect x="99.5586%" y="197" width="0.1766%" height="15" fill="rgb(249,195,6)" fg:x="3383" fg:w="6"/><text x="99.8086%" y="207.50"></text></g><g><title>canvas`fontdue::hash::hash (7 samples, 0.21%)</title><rect x="99.7351%" y="213" width="0.2060%" height="15" fill="rgb(237,174,47)" fg:x="3389" fg:w="7"/><text x="99.9851%" y="223.50"></text></g><g><title>canvas`std::io::stdio::_print (1 samples, 0.03%)</title><rect x="99.9411%" y="213" width="0.0294%" height="15" fill="rgb(206,201,31)" fg:x="3396" fg:w="1"/><text x="100.1911%" y="223.50"></text></g><g><title>canvas`core::fmt::write (1 samples, 0.03%)</title><rect x="99.9411%" y="197" width="0.0294%" height="15" fill="rgb(231,57,52)" fg:x="3396" fg:w="1"/><text x="100.1911%" y="207.50"></text></g><g><title>all (3,398 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(248,177,22)" fg:x="0" fg:w="3398"/><text x="0.2500%" y="351.50"></text></g><g><title>dyld`start (3,396 samples, 99.94%)</title><rect x="0.0589%" y="325" width="99.9411%" height="15" fill="rgb(215,211,37)" fg:x="2" fg:w="3396"/><text x="0.3089%" y="335.50">dyld`start</text></g><g><title>canvas`main (3,396 samples, 99.94%)</title><rect x="0.0589%" y="309" width="99.9411%" height="15" fill="rgb(241,128,51)" fg:x="2" fg:w="3396"/><text x="0.3089%" y="319.50">canvas`main</text></g><g><title>canvas`std::rt::lang_start_internal (3,396 samples, 99.94%)</title><rect x="0.0589%" y="293" width="99.9411%" height="15" fill="rgb(227,165,31)" fg:x="2" fg:w="3396"/><text x="0.3089%" y="303.50">canvas`std::rt::lang_start_internal</text></g><g><title>canvas`std::rt::lang_start::_{{closure}} (3,396 samples, 99.94%)</title><rect x="0.0589%" y="277" width="99.9411%" height="15" fill="rgb(228,167,24)" fg:x="2" fg:w="3396"/><text x="0.3089%" y="287.50">canvas`std::rt::lang_start::_{{closure}}</text></g><g><title>canvas`std::sys::backtrace::__rust_begin_short_backtrace (3,396 samples, 99.94%)</title><rect x="0.0589%" y="261" width="99.9411%" height="15" fill="rgb(228,143,12)" fg:x="2" fg:w="3396"/><text x="0.3089%" y="271.50">canvas`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>canvas`canvas::main (3,396 samples, 99.94%)</title><rect x="0.0589%" y="245" width="99.9411%" height="15" fill="rgb(249,149,8)" fg:x="2" fg:w="3396"/><text x="0.3089%" y="255.50">canvas`canvas::main</text></g><g><title>canvas`soft_ratatui::soft_backend::SoftBackend::new (95 samples, 2.80%)</title><rect x="97.2042%" y="229" width="2.7958%" height="15" fill="rgb(243,35,44)" fg:x="3303" fg:w="95"/><text x="97.4542%" y="239.50">ca..</text></g><g><title>canvas`ttf_parser::tables::glyf::outline_impl (1 samples, 0.03%)</title><rect x="99.9706%" y="213" width="0.0294%" height="15" fill="rgb(246,89,9)" fg:x="3397" fg:w="1"/><text x="100.2206%" y="223.50"></text></g></svg></svg>
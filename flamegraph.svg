<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="3679"><g><title>colors`&lt;ratatui::text::text::Text as ratatui::widgets::Widget&gt;::render (1 samples, 0.03%)</title><rect x="0.0544%" y="245" width="0.0272%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="1"/><text x="0.3044%" y="255.50"></text></g><g><title>colors`&lt;ratatui::text::text::Text as ratatui::widgets::WidgetRef&gt;::render_ref (1 samples, 0.03%)</title><rect x="0.0544%" y="229" width="0.0272%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.3044%" y="239.50"></text></g><g><title>colors`ratatui::text::line::Line::render_with_alignment (1 samples, 0.03%)</title><rect x="0.0544%" y="213" width="0.0272%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.3044%" y="223.50"></text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (1 samples, 0.03%)</title><rect x="0.0544%" y="197" width="0.0272%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.3044%" y="207.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.03%)</title><rect x="0.0815%" y="245" width="0.0272%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.3315%" y="255.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::index_of (3 samples, 0.08%)</title><rect x="0.1087%" y="245" width="0.0815%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="3"/><text x="0.3587%" y="255.50"></text></g><g><title>colors`ratatui::buffer::cell::Cell::set_char (6 samples, 0.16%)</title><rect x="0.1903%" y="245" width="0.1631%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="6"/><text x="0.4403%" y="255.50"></text></g><g><title>colors`&lt;&amp;mut colors::App as ratatui::widgets::Widget&gt;::render (18 samples, 0.49%)</title><rect x="0.0000%" y="261" width="0.4893%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="18"/><text x="0.2500%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.14%)</title><rect x="0.3534%" y="245" width="0.1359%" height="15" fill="rgb(218,30,26)" fg:x="13" fg:w="5"/><text x="0.6034%" y="255.50"></text></g><g><title>colors`fontdue::font::Font::rasterize_indexed (1 samples, 0.03%)</title><rect x="0.6524%" y="245" width="0.0272%" height="15" fill="rgb(220,122,19)" fg:x="24" fg:w="1"/><text x="0.9024%" y="255.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (32 samples, 0.87%)</title><rect x="3.8869%" y="165" width="0.8698%" height="15" fill="rgb(250,228,42)" fg:x="143" fg:w="32"/><text x="4.1369%" y="175.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.05%)</title><rect x="4.7024%" y="149" width="0.0544%" height="15" fill="rgb(240,193,28)" fg:x="173" fg:w="2"/><text x="4.9524%" y="159.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="4.7295%" y="133" width="0.0272%" height="15" fill="rgb(216,20,37)" fg:x="174" fg:w="1"/><text x="4.9795%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.03%)</title><rect x="4.7295%" y="117" width="0.0272%" height="15" fill="rgb(206,188,39)" fg:x="174" fg:w="1"/><text x="4.9795%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.03%)</title><rect x="4.7295%" y="101" width="0.0272%" height="15" fill="rgb(217,207,13)" fg:x="174" fg:w="1"/><text x="4.9795%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="4.7295%" y="85" width="0.0272%" height="15" fill="rgb(231,73,38)" fg:x="174" fg:w="1"/><text x="4.9795%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="4.7295%" y="69" width="0.0272%" height="15" fill="rgb(225,20,46)" fg:x="174" fg:w="1"/><text x="4.9795%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="4.7295%" y="53" width="0.0272%" height="15" fill="rgb(210,31,41)" fg:x="174" fg:w="1"/><text x="4.9795%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="4.7295%" y="37" width="0.0272%" height="15" fill="rgb(221,200,47)" fg:x="174" fg:w="1"/><text x="4.9795%" y="47.50"></text></g><g><title>colors`simd_adler32::Adler32::write (1 samples, 0.03%)</title><rect x="4.7567%" y="165" width="0.0272%" height="15" fill="rgb(226,26,5)" fg:x="175" fg:w="1"/><text x="5.0067%" y="175.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_data (984 samples, 26.75%)</title><rect x="0.6795%" y="181" width="26.7464%" height="15" fill="rgb(249,33,26)" fg:x="25" fg:w="984"/><text x="0.9295%" y="191.50">colors`fdeflate::compress::Compressor&lt;W&gt;::w..</text></g><g><title>colors`simd_adler32::imp::scalar::update (833 samples, 22.64%)</title><rect x="4.7839%" y="165" width="22.6420%" height="15" fill="rgb(235,183,28)" fg:x="176" fg:w="833"/><text x="5.0339%" y="175.50">colors`simd_adler32::imp::scalar::up..</text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (7 samples, 0.19%)</title><rect x="27.4259%" y="181" width="0.1903%" height="15" fill="rgb(221,5,38)" fg:x="1009" fg:w="7"/><text x="27.6759%" y="191.50"></text></g><g><title>colors`png::encoder::PartialInfo::raw_row_length_from_width (1 samples, 0.03%)</title><rect x="27.6162%" y="181" width="0.0272%" height="15" fill="rgb(247,18,42)" fg:x="1016" fg:w="1"/><text x="27.8662%" y="191.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;png::common::Info&gt; (1 samples, 0.03%)</title><rect x="27.6162%" y="165" width="0.0272%" height="15" fill="rgb(241,131,45)" fg:x="1016" fg:w="1"/><text x="27.8662%" y="175.50"></text></g><g><title>colors`crc32fast::Hasher::update (5 samples, 0.14%)</title><rect x="27.6434%" y="165" width="0.1359%" height="15" fill="rgb(249,31,29)" fg:x="1017" fg:w="5"/><text x="27.8934%" y="175.50"></text></g><g><title>colors`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.03%)</title><rect x="27.7793%" y="133" width="0.0272%" height="15" fill="rgb(225,111,53)" fg:x="1022" fg:w="1"/><text x="28.0293%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.03%)</title><rect x="27.7793%" y="117" width="0.0272%" height="15" fill="rgb(238,160,17)" fg:x="1022" fg:w="1"/><text x="28.0293%" y="127.50"></text></g><g><title>colors`png::encoder::Writer&lt;W&gt;::write_zlib_encoded_idat (13 samples, 0.35%)</title><rect x="27.6434%" y="181" width="0.3534%" height="15" fill="rgb(214,148,48)" fg:x="1017" fg:w="13"/><text x="27.8934%" y="191.50"></text></g><g><title>colors`png::encoder::write_chunk (8 samples, 0.22%)</title><rect x="27.7793%" y="165" width="0.2175%" height="15" fill="rgb(232,36,49)" fg:x="1022" fg:w="8"/><text x="28.0293%" y="175.50"></text></g><g><title>colors`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (8 samples, 0.22%)</title><rect x="27.7793%" y="149" width="0.2175%" height="15" fill="rgb(209,103,24)" fg:x="1022" fg:w="8"/><text x="28.0293%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`write (7 samples, 0.19%)</title><rect x="27.8065%" y="133" width="0.1903%" height="15" fill="rgb(229,88,8)" fg:x="1023" fg:w="7"/><text x="28.0565%" y="143.50"></text></g><g><title>colors`png::filter::filter_internal (321 samples, 8.73%)</title><rect x="45.5015%" y="165" width="8.7252%" height="15" fill="rgb(213,181,19)" fg:x="1674" fg:w="321"/><text x="45.7515%" y="175.50">colors`png::..</text></g><g><title>colors`png::filter::filter (969 samples, 26.34%)</title><rect x="27.9967%" y="181" width="26.3387%" height="15" fill="rgb(254,191,54)" fg:x="1030" fg:w="969"/><text x="28.2467%" y="191.50">colors`png::filter::filter</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.11%)</title><rect x="54.2267%" y="165" width="0.1087%" height="15" fill="rgb(241,83,37)" fg:x="1995" fg:w="4"/><text x="54.4767%" y="175.50"></text></g><g><title>colors`png::filter::filter_internal (5 samples, 0.14%)</title><rect x="54.3354%" y="181" width="0.1359%" height="15" fill="rgb(233,36,39)" fg:x="1999" fg:w="5"/><text x="54.5854%" y="191.50"></text></g><g><title>colors`image::codecs::png::PngEncoder&lt;W&gt;::encode_inner (1,980 samples, 53.82%)</title><rect x="0.6795%" y="213" width="53.8190%" height="15" fill="rgb(226,3,54)" fg:x="25" fg:w="1980"/><text x="0.9295%" y="223.50">colors`image::codecs::png::PngEncoder&lt;W&gt;::encode_inner</text></g><g><title>colors`png::encoder::Writer&lt;W&gt;::write_image_data (1,980 samples, 53.82%)</title><rect x="0.6795%" y="197" width="53.8190%" height="15" fill="rgb(245,192,40)" fg:x="25" fg:w="1980"/><text x="0.9295%" y="207.50">colors`png::encoder::Writer&lt;W&gt;::write_image_data</text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.03%)</title><rect x="54.4713%" y="181" width="0.0272%" height="15" fill="rgb(238,167,29)" fg:x="2004" fg:w="1"/><text x="54.7213%" y="191.50"></text></g><g><title>colors`image::image_reader::free_functions::save_buffer_with_format_impl (1,992 samples, 54.15%)</title><rect x="0.6795%" y="229" width="54.1451%" height="15" fill="rgb(232,182,51)" fg:x="25" fg:w="1992"/><text x="0.9295%" y="239.50">colors`image::image_reader::free_functions::save_buffer_with_format_impl</text></g><g><title>colors`std::fs::OpenOptions::_open (12 samples, 0.33%)</title><rect x="54.4985%" y="213" width="0.3262%" height="15" fill="rgb(231,60,39)" fg:x="2005" fg:w="12"/><text x="54.7485%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__open (12 samples, 0.33%)</title><rect x="54.4985%" y="197" width="0.3262%" height="15" fill="rgb(208,69,12)" fg:x="2005" fg:w="12"/><text x="54.7485%" y="207.50"></text></g><g><title>colors`image::image_reader::free_functions::save_buffer_impl (1,999 samples, 54.34%)</title><rect x="0.6795%" y="245" width="54.3354%" height="15" fill="rgb(235,93,37)" fg:x="25" fg:w="1999"/><text x="0.9295%" y="255.50">colors`image::image_reader::free_functions::save_buffer_impl</text></g><g><title>libsystem_kernel.dylib`close (7 samples, 0.19%)</title><rect x="54.8247%" y="229" width="0.1903%" height="15" fill="rgb(213,116,39)" fg:x="2017" fg:w="7"/><text x="55.0747%" y="239.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::index_of (5 samples, 0.14%)</title><rect x="55.0149%" y="245" width="0.1359%" height="15" fill="rgb(222,207,29)" fg:x="2024" fg:w="5"/><text x="55.2649%" y="255.50"></text></g><g><title>colors`ratatui::buffer::cell::Cell::symbol (1 samples, 0.03%)</title><rect x="55.1509%" y="245" width="0.0272%" height="15" fill="rgb(206,96,30)" fg:x="2029" fg:w="1"/><text x="55.4009%" y="255.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="81.8429%" y="229" width="0.0272%" height="15" fill="rgb(218,138,4)" fg:x="3011" fg:w="1"/><text x="82.0929%" y="239.50"></text></g><g><title>colors`__rdl_alloc_zeroed (1 samples, 0.03%)</title><rect x="81.8701%" y="229" width="0.0272%" height="15" fill="rgb(250,191,14)" fg:x="3012" fg:w="1"/><text x="82.1201%" y="239.50"></text></g><g><title>colors`fontdue::font::Font::metrics_raw (12 samples, 0.33%)</title><rect x="81.8973%" y="229" width="0.3262%" height="15" fill="rgb(239,60,40)" fg:x="3013" fg:w="12"/><text x="82.1473%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.03%)</title><rect x="90.0788%" y="213" width="0.0272%" height="15" fill="rgb(206,27,48)" fg:x="3314" fg:w="1"/><text x="90.3288%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.05%)</title><rect x="90.1060%" y="213" width="0.0544%" height="15" fill="rgb(225,35,8)" fg:x="3315" fg:w="2"/><text x="90.3560%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.22%)</title><rect x="90.7584%" y="181" width="0.2175%" height="15" fill="rgb(250,213,24)" fg:x="3339" fg:w="8"/><text x="91.0084%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (35 samples, 0.95%)</title><rect x="90.1604%" y="213" width="0.9513%" height="15" fill="rgb(247,123,22)" fg:x="3317" fg:w="35"/><text x="90.4104%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (25 samples, 0.68%)</title><rect x="90.4322%" y="197" width="0.6795%" height="15" fill="rgb(231,138,38)" fg:x="3327" fg:w="25"/><text x="90.6822%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5 samples, 0.14%)</title><rect x="90.9758%" y="181" width="0.1359%" height="15" fill="rgb(231,145,46)" fg:x="3347" fg:w="5"/><text x="91.2258%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (8 samples, 0.22%)</title><rect x="91.1117%" y="213" width="0.2175%" height="15" fill="rgb(251,118,11)" fg:x="3352" fg:w="8"/><text x="91.3617%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.05%)</title><rect x="91.4651%" y="197" width="0.0544%" height="15" fill="rgb(217,147,25)" fg:x="3365" fg:w="2"/><text x="91.7151%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.08%)</title><rect x="91.5194%" y="197" width="0.0815%" height="15" fill="rgb(247,81,37)" fg:x="3367" fg:w="3"/><text x="91.7694%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.16%)</title><rect x="91.8184%" y="181" width="0.1631%" height="15" fill="rgb(209,12,38)" fg:x="3378" fg:w="6"/><text x="92.0684%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (5 samples, 0.14%)</title><rect x="92.3621%" y="165" width="0.1359%" height="15" fill="rgb(227,1,9)" fg:x="3398" fg:w="5"/><text x="92.6121%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (45 samples, 1.22%)</title><rect x="91.3292%" y="213" width="1.2232%" height="15" fill="rgb(248,47,43)" fg:x="3360" fg:w="45"/><text x="91.5792%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (35 samples, 0.95%)</title><rect x="91.6010%" y="197" width="0.9513%" height="15" fill="rgb(221,10,30)" fg:x="3370" fg:w="35"/><text x="91.8510%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (21 samples, 0.57%)</title><rect x="91.9815%" y="181" width="0.5708%" height="15" fill="rgb(210,229,1)" fg:x="3384" fg:w="21"/><text x="92.2315%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.05%)</title><rect x="92.4980%" y="165" width="0.0544%" height="15" fill="rgb(222,148,37)" fg:x="3403" fg:w="2"/><text x="92.7480%" y="175.50"></text></g><g><title>colors`fontdue::font::Font::rasterize_indexed (387 samples, 10.52%)</title><rect x="82.2234%" y="229" width="10.5192%" height="15" fill="rgb(234,67,33)" fg:x="3025" fg:w="387"/><text x="82.4734%" y="239.50">colors`fontdue:..</text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.19%)</title><rect x="92.5523%" y="213" width="0.1903%" height="15" fill="rgb(247,98,35)" fg:x="3405" fg:w="7"/><text x="92.8023%" y="223.50"></text></g><g><title>colors`fontdue::raster::Raster::draw (67 samples, 1.82%)</title><rect x="92.7426%" y="229" width="1.8211%" height="15" fill="rgb(247,138,52)" fg:x="3412" fg:w="67"/><text x="92.9926%" y="239.50">c..</text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.08%)</title><rect x="94.5637%" y="229" width="0.0815%" height="15" fill="rgb(213,79,30)" fg:x="3479" fg:w="3"/><text x="94.8137%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (5 samples, 0.14%)</title><rect x="94.6453%" y="229" width="0.1359%" height="15" fill="rgb(246,177,23)" fg:x="3482" fg:w="5"/><text x="94.8953%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="94.7812%" y="229" width="0.0272%" height="15" fill="rgb(230,62,27)" fg:x="3487" fg:w="1"/><text x="95.0312%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.03%)</title><rect x="94.8084%" y="229" width="0.0272%" height="15" fill="rgb(216,154,8)" fg:x="3488" fg:w="1"/><text x="95.0584%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.11%)</title><rect x="94.8356%" y="229" width="0.1087%" height="15" fill="rgb(244,35,45)" fg:x="3489" fg:w="4"/><text x="95.0856%" y="239.50"></text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::draw_cell (1,464 samples, 39.79%)</title><rect x="55.1780%" y="245" width="39.7934%" height="15" fill="rgb(251,115,12)" fg:x="2030" fg:w="1464"/><text x="55.4280%" y="255.50">colors`soft_ratatui::soft_backend::SoftBackend::draw_cell</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="94.9443%" y="229" width="0.0272%" height="15" fill="rgb(240,54,50)" fg:x="3493" fg:w="1"/><text x="95.1943%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11 samples, 0.30%)</title><rect x="94.9715%" y="245" width="0.2990%" height="15" fill="rgb(233,84,52)" fg:x="3494" fg:w="11"/><text x="95.2215%" y="255.50"></text></g><g><title>colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw (3,488 samples, 94.81%)</title><rect x="0.4893%" y="261" width="94.8084%" height="15" fill="rgb(207,117,47)" fg:x="18" fg:w="3488"/><text x="0.7393%" y="271.50">colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="95.2705%" y="245" width="0.0272%" height="15" fill="rgb(249,43,39)" fg:x="3505" fg:w="1"/><text x="95.5205%" y="255.50"></text></g><g><title>colors`DYLD-STUB$$free (4 samples, 0.11%)</title><rect x="95.2976%" y="261" width="0.1087%" height="15" fill="rgb(209,38,44)" fg:x="3506" fg:w="4"/><text x="95.5476%" y="271.50"></text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (12 samples, 0.33%)</title><rect x="95.4064%" y="261" width="0.3262%" height="15" fill="rgb(236,212,23)" fg:x="3510" fg:w="12"/><text x="95.6564%" y="271.50"></text></g><g><title>colors`palette::ok_utils::LC&lt;T&gt;::find_cusp (1 samples, 0.03%)</title><rect x="95.7325%" y="261" width="0.0272%" height="15" fill="rgb(242,79,21)" fg:x="3522" fg:w="1"/><text x="95.9825%" y="271.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.03%)</title><rect x="96.2490%" y="245" width="0.0272%" height="15" fill="rgb(211,96,35)" fg:x="3541" fg:w="1"/><text x="96.4990%" y="255.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="96.2490%" y="229" width="0.0272%" height="15" fill="rgb(253,215,40)" fg:x="3541" fg:w="1"/><text x="96.4990%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.03%)</title><rect x="96.2490%" y="213" width="0.0272%" height="15" fill="rgb(211,81,21)" fg:x="3541" fg:w="1"/><text x="96.4990%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.03%)</title><rect x="96.2490%" y="197" width="0.0272%" height="15" fill="rgb(208,190,38)" fg:x="3541" fg:w="1"/><text x="96.4990%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="96.2490%" y="181" width="0.0272%" height="15" fill="rgb(235,213,38)" fg:x="3541" fg:w="1"/><text x="96.4990%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="96.2490%" y="165" width="0.0272%" height="15" fill="rgb(237,122,38)" fg:x="3541" fg:w="1"/><text x="96.4990%" y="175.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::diff (42 samples, 1.14%)</title><rect x="95.7597%" y="261" width="1.1416%" height="15" fill="rgb(244,218,35)" fg:x="3523" fg:w="42"/><text x="96.0097%" y="271.50"></text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (23 samples, 0.63%)</title><rect x="96.2762%" y="245" width="0.6252%" height="15" fill="rgb(240,68,47)" fg:x="3542" fg:w="23"/><text x="96.5262%" y="255.50"></text></g><g><title>colors`unicode_width::tables::lookup_width (10 samples, 0.27%)</title><rect x="96.6295%" y="229" width="0.2718%" height="15" fill="rgb(210,16,53)" fg:x="3555" fg:w="10"/><text x="96.8795%" y="239.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::index_of (1 samples, 0.03%)</title><rect x="96.9013%" y="261" width="0.0272%" height="15" fill="rgb(235,124,12)" fg:x="3565" fg:w="1"/><text x="97.1513%" y="271.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::reset (5 samples, 0.14%)</title><rect x="96.9285%" y="261" width="0.1359%" height="15" fill="rgb(224,169,11)" fg:x="3566" fg:w="5"/><text x="97.1785%" y="271.50"></text></g><g><title>colors`ratatui::buffer::cell::Cell::set_char (1 samples, 0.03%)</title><rect x="97.0644%" y="261" width="0.0272%" height="15" fill="rgb(250,166,2)" fg:x="3571" fg:w="1"/><text x="97.3144%" y="271.50"></text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::draw_cell (2 samples, 0.05%)</title><rect x="97.0916%" y="261" width="0.0544%" height="15" fill="rgb(242,216,29)" fg:x="3572" fg:w="2"/><text x="97.3416%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.05%)</title><rect x="97.1460%" y="261" width="0.0544%" height="15" fill="rgb(230,116,27)" fg:x="3574" fg:w="2"/><text x="97.3960%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.05%)</title><rect x="97.2003%" y="261" width="0.0544%" height="15" fill="rgb(228,99,48)" fg:x="3576" fg:w="2"/><text x="97.4503%" y="271.50"></text></g><g><title>colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw (3,579 samples, 97.28%)</title><rect x="0.0000%" y="277" width="97.2819%" height="15" fill="rgb(253,11,6)" fg:x="0" fg:w="3579"/><text x="0.2500%" y="287.50">colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.03%)</title><rect x="97.2547%" y="261" width="0.0272%" height="15" fill="rgb(247,143,39)" fg:x="3578" fg:w="1"/><text x="97.5047%" y="271.50"></text></g><g><title>colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::clear (1 samples, 0.03%)</title><rect x="97.2819%" y="261" width="0.0272%" height="15" fill="rgb(236,97,10)" fg:x="3579" fg:w="1"/><text x="97.5319%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="97.2819%" y="245" width="0.0272%" height="15" fill="rgb(233,208,19)" fg:x="3579" fg:w="1"/><text x="97.5319%" y="255.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.03%)</title><rect x="97.2819%" y="229" width="0.0272%" height="15" fill="rgb(216,164,2)" fg:x="3579" fg:w="1"/><text x="97.5319%" y="239.50"></text></g><g><title>colors`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::line_to (1 samples, 0.03%)</title><rect x="97.3091%" y="245" width="0.0272%" height="15" fill="rgb(220,129,5)" fg:x="3580" fg:w="1"/><text x="97.5591%" y="255.50"></text></g><g><title>colors`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::quad_to (1 samples, 0.03%)</title><rect x="97.3362%" y="245" width="0.0272%" height="15" fill="rgb(242,17,10)" fg:x="3581" fg:w="1"/><text x="97.5862%" y="255.50"></text></g><g><title>colors`alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.03%)</title><rect x="97.3634%" y="245" width="0.0272%" height="15" fill="rgb(242,107,0)" fg:x="3582" fg:w="1"/><text x="97.6134%" y="255.50"></text></g><g><title>colors`fontdue::math::Geometry::finalize (10 samples, 0.27%)</title><rect x="97.3906%" y="245" width="0.2718%" height="15" fill="rgb(251,28,31)" fg:x="3583" fg:w="10"/><text x="97.6406%" y="255.50"></text></g><g><title>colors`ttf_parser::tables::cmap::Subtable::codepoints (1 samples, 0.03%)</title><rect x="97.6624%" y="245" width="0.0272%" height="15" fill="rgb(233,223,10)" fg:x="3593" fg:w="1"/><text x="97.9124%" y="255.50"></text></g><g><title>colors`ttf_parser::tables::cmap::format4::Subtable4::codepoints (1 samples, 0.03%)</title><rect x="97.6624%" y="229" width="0.0272%" height="15" fill="rgb(215,21,27)" fg:x="3593" fg:w="1"/><text x="97.9124%" y="239.50"></text></g><g><title>colors`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::line_to (1 samples, 0.03%)</title><rect x="98.0158%" y="229" width="0.0272%" height="15" fill="rgb(232,23,21)" fg:x="3606" fg:w="1"/><text x="98.2658%" y="239.50"></text></g><g><title>colors`fontdue::math::Geometry::push (1 samples, 0.03%)</title><rect x="98.0158%" y="213" width="0.0272%" height="15" fill="rgb(244,5,23)" fg:x="3606" fg:w="1"/><text x="98.2658%" y="223.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.03%)</title><rect x="98.0158%" y="197" width="0.0272%" height="15" fill="rgb(226,81,46)" fg:x="3606" fg:w="1"/><text x="98.2658%" y="207.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="98.0158%" y="181" width="0.0272%" height="15" fill="rgb(247,70,30)" fg:x="3606" fg:w="1"/><text x="98.2658%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.03%)</title><rect x="98.0158%" y="165" width="0.0272%" height="15" fill="rgb(212,68,19)" fg:x="3606" fg:w="1"/><text x="98.2658%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.03%)</title><rect x="98.0158%" y="149" width="0.0272%" height="15" fill="rgb(240,187,13)" fg:x="3606" fg:w="1"/><text x="98.2658%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="98.0158%" y="133" width="0.0272%" height="15" fill="rgb(223,113,26)" fg:x="3606" fg:w="1"/><text x="98.2658%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.03%)</title><rect x="98.0158%" y="117" width="0.0272%" height="15" fill="rgb(206,192,2)" fg:x="3606" fg:w="1"/><text x="98.2658%" y="127.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="98.2060%" y="197" width="0.0272%" height="15" fill="rgb(241,108,4)" fg:x="3613" fg:w="1"/><text x="98.4560%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.03%)</title><rect x="98.2060%" y="181" width="0.0272%" height="15" fill="rgb(247,173,49)" fg:x="3613" fg:w="1"/><text x="98.4560%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.03%)</title><rect x="98.2060%" y="165" width="0.0272%" height="15" fill="rgb(224,114,35)" fg:x="3613" fg:w="1"/><text x="98.4560%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="98.2060%" y="149" width="0.0272%" height="15" fill="rgb(245,159,27)" fg:x="3613" fg:w="1"/><text x="98.4560%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="98.2060%" y="133" width="0.0272%" height="15" fill="rgb(245,172,44)" fg:x="3613" fg:w="1"/><text x="98.4560%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.05%)</title><rect x="98.2060%" y="213" width="0.0544%" height="15" fill="rgb(236,23,11)" fg:x="3613" fg:w="2"/><text x="98.4560%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.03%)</title><rect x="98.2332%" y="197" width="0.0272%" height="15" fill="rgb(205,117,38)" fg:x="3614" fg:w="1"/><text x="98.4832%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.03%)</title><rect x="98.4507%" y="165" width="0.0272%" height="15" fill="rgb(237,72,25)" fg:x="3622" fg:w="1"/><text x="98.7007%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.03%)</title><rect x="98.4778%" y="133" width="0.0272%" height="15" fill="rgb(244,70,9)" fg:x="3623" fg:w="1"/><text x="98.7278%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.03%)</title><rect x="98.4778%" y="117" width="0.0272%" height="15" fill="rgb(217,125,39)" fg:x="3623" fg:w="1"/><text x="98.7278%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.08%)</title><rect x="98.4778%" y="165" width="0.0815%" height="15" fill="rgb(235,36,10)" fg:x="3623" fg:w="3"/><text x="98.7278%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.08%)</title><rect x="98.4778%" y="149" width="0.0815%" height="15" fill="rgb(251,123,47)" fg:x="3623" fg:w="3"/><text x="98.7278%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.05%)</title><rect x="98.5050%" y="133" width="0.0544%" height="15" fill="rgb(221,13,13)" fg:x="3624" fg:w="2"/><text x="98.7550%" y="143.50"></text></g><g><title>colors`fontdue::math::Geometry::push (12 samples, 0.33%)</title><rect x="98.2604%" y="213" width="0.3262%" height="15" fill="rgb(238,131,9)" fg:x="3615" fg:w="12"/><text x="98.5104%" y="223.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.14%)</title><rect x="98.4507%" y="197" width="0.1359%" height="15" fill="rgb(211,50,8)" fg:x="3622" fg:w="5"/><text x="98.7007%" y="207.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (5 samples, 0.14%)</title><rect x="98.4507%" y="181" width="0.1359%" height="15" fill="rgb(245,182,24)" fg:x="3622" fg:w="5"/><text x="98.7007%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="98.5594%" y="165" width="0.0272%" height="15" fill="rgb(242,14,37)" fg:x="3626" fg:w="1"/><text x="98.8094%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.16%)</title><rect x="98.5866%" y="213" width="0.1631%" height="15" fill="rgb(246,228,12)" fg:x="3627" fg:w="6"/><text x="98.8366%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.03%)</title><rect x="98.7497%" y="213" width="0.0272%" height="15" fill="rgb(213,55,15)" fg:x="3633" fg:w="1"/><text x="98.9997%" y="223.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.03%)</title><rect x="98.7768%" y="213" width="0.0272%" height="15" fill="rgb(209,9,3)" fg:x="3634" fg:w="1"/><text x="99.0268%" y="223.50"></text></g><g><title>colors`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::quad_to (29 samples, 0.79%)</title><rect x="98.0429%" y="229" width="0.7883%" height="15" fill="rgb(230,59,30)" fg:x="3607" fg:w="29"/><text x="98.2929%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="98.8040%" y="213" width="0.0272%" height="15" fill="rgb(209,121,21)" fg:x="3635" fg:w="1"/><text x="99.0540%" y="223.50"></text></g><g><title>colors`fontdue::math::Geometry::push (4 samples, 0.11%)</title><rect x="98.8312%" y="229" width="0.1087%" height="15" fill="rgb(220,109,13)" fg:x="3636" fg:w="4"/><text x="99.0812%" y="239.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.08%)</title><rect x="99.1302%" y="197" width="0.0815%" height="15" fill="rgb(232,18,1)" fg:x="3647" fg:w="3"/><text x="99.3802%" y="207.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="99.1574%" y="181" width="0.0544%" height="15" fill="rgb(215,41,42)" fg:x="3648" fg:w="2"/><text x="99.4074%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.05%)</title><rect x="99.1574%" y="165" width="0.0544%" height="15" fill="rgb(224,123,36)" fg:x="3648" fg:w="2"/><text x="99.4074%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.03%)</title><rect x="99.1846%" y="149" width="0.0272%" height="15" fill="rgb(240,125,3)" fg:x="3649" fg:w="1"/><text x="99.4346%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="99.1846%" y="133" width="0.0272%" height="15" fill="rgb(205,98,50)" fg:x="3649" fg:w="1"/><text x="99.4346%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="99.1846%" y="117" width="0.0272%" height="15" fill="rgb(205,185,37)" fg:x="3649" fg:w="1"/><text x="99.4346%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.03%)</title><rect x="99.2389%" y="149" width="0.0272%" height="15" fill="rgb(238,207,15)" fg:x="3651" fg:w="1"/><text x="99.4889%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.03%)</title><rect x="99.2661%" y="117" width="0.0272%" height="15" fill="rgb(213,199,42)" fg:x="3652" fg:w="1"/><text x="99.5161%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="99.2661%" y="101" width="0.0272%" height="15" fill="rgb(235,201,11)" fg:x="3652" fg:w="1"/><text x="99.5161%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="99.2661%" y="85" width="0.0272%" height="15" fill="rgb(207,46,11)" fg:x="3652" fg:w="1"/><text x="99.5161%" y="95.50"></text></g><g><title>colors`fontdue::math::Geometry::push (4 samples, 0.11%)</title><rect x="99.2117%" y="197" width="0.1087%" height="15" fill="rgb(241,35,35)" fg:x="3650" fg:w="4"/><text x="99.4617%" y="207.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.08%)</title><rect x="99.2389%" y="181" width="0.0815%" height="15" fill="rgb(243,32,47)" fg:x="3651" fg:w="3"/><text x="99.4889%" y="191.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (3 samples, 0.08%)</title><rect x="99.2389%" y="165" width="0.0815%" height="15" fill="rgb(247,202,23)" fg:x="3651" fg:w="3"/><text x="99.4889%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.05%)</title><rect x="99.2661%" y="149" width="0.0544%" height="15" fill="rgb(219,102,11)" fg:x="3652" fg:w="2"/><text x="99.5161%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.05%)</title><rect x="99.2661%" y="133" width="0.0544%" height="15" fill="rgb(243,110,44)" fg:x="3652" fg:w="2"/><text x="99.5161%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="99.2933%" y="117" width="0.0272%" height="15" fill="rgb(222,74,54)" fg:x="3653" fg:w="1"/><text x="99.5433%" y="127.50"></text></g><g><title>colors`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::quad_to (10 samples, 0.27%)</title><rect x="99.0758%" y="213" width="0.2718%" height="15" fill="rgb(216,99,12)" fg:x="3645" fg:w="10"/><text x="99.3258%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="99.3205%" y="197" width="0.0272%" height="15" fill="rgb(226,22,26)" fg:x="3654" fg:w="1"/><text x="99.5705%" y="207.50"></text></g><g><title>colors`__rust_alloc (1 samples, 0.03%)</title><rect x="99.3476%" y="213" width="0.0272%" height="15" fill="rgb(217,163,10)" fg:x="3655" fg:w="1"/><text x="99.5976%" y="223.50"></text></g><g><title>colors`ttf_parser::tables::glyf::outline_impl (18 samples, 0.49%)</title><rect x="98.9399%" y="229" width="0.4893%" height="15" fill="rgb(213,25,53)" fg:x="3640" fg:w="18"/><text x="99.1899%" y="239.50"></text></g><g><title>colors`fontdue::math::Geometry::push (2 samples, 0.05%)</title><rect x="99.3748%" y="213" width="0.0544%" height="15" fill="rgb(252,105,26)" fg:x="3656" fg:w="2"/><text x="99.6248%" y="223.50"></text></g><g><title>colors`ttf_parser::tables::glyf::resolve_coords_len (1 samples, 0.03%)</title><rect x="99.4292%" y="229" width="0.0272%" height="15" fill="rgb(220,39,43)" fg:x="3658" fg:w="1"/><text x="99.6792%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.05%)</title><rect x="99.4564%" y="229" width="0.0544%" height="15" fill="rgb(229,68,48)" fg:x="3659" fg:w="2"/><text x="99.7064%" y="239.50"></text></g><g><title>colors`ttf_parser::tables::glyf::outline_impl (69 samples, 1.88%)</title><rect x="97.6896%" y="245" width="1.8755%" height="15" fill="rgb(252,8,32)" fg:x="3594" fg:w="69"/><text x="97.9396%" y="255.50">c..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="99.5107%" y="229" width="0.0544%" height="15" fill="rgb(223,20,43)" fg:x="3661" fg:w="2"/><text x="99.7607%" y="239.50"></text></g><g><title>colors`fontdue::font::Font::from_bytes (88 samples, 2.39%)</title><rect x="97.3091%" y="261" width="2.3920%" height="15" fill="rgb(229,81,49)" fg:x="3580" fg:w="88"/><text x="97.5591%" y="271.50">co..</text></g><g><title>colors`ttf_parser::tables::glyf::resolve_coords_len (5 samples, 0.14%)</title><rect x="99.5651%" y="245" width="0.1359%" height="15" fill="rgb(236,28,36)" fg:x="3663" fg:w="5"/><text x="99.8151%" y="255.50"></text></g><g><title>all (3,679 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(249,185,26)" fg:x="0" fg:w="3679"/><text x="0.2500%" y="399.50"></text></g><g><title>dyld`start (3,679 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="3679"/><text x="0.2500%" y="383.50">dyld`start</text></g><g><title>colors`main (3,679 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="3679"/><text x="0.2500%" y="367.50">colors`main</text></g><g><title>colors`std::rt::lang_start_internal (3,679 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="3679"/><text x="0.2500%" y="351.50">colors`std::rt::lang_start_internal</text></g><g><title>colors`std::rt::lang_start::_{{closure}} (3,679 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="3679"/><text x="0.2500%" y="335.50">colors`std::rt::lang_start::_{{closure}}</text></g><g><title>colors`std::sys::backtrace::__rust_begin_short_backtrace (3,679 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(230,49,44)" fg:x="0" fg:w="3679"/><text x="0.2500%" y="319.50">colors`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>colors`colors::main (3,679 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="3679"/><text x="0.2500%" y="303.50">colors`colors::main</text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::new (100 samples, 2.72%)</title><rect x="97.2819%" y="277" width="2.7181%" height="15" fill="rgb(249,83,47)" fg:x="3579" fg:w="100"/><text x="97.5319%" y="287.50">co..</text></g><g><title>colors`fontdue::hash::hash (11 samples, 0.30%)</title><rect x="99.7010%" y="261" width="0.2990%" height="15" fill="rgb(215,43,3)" fg:x="3668" fg:w="11"/><text x="99.9510%" y="271.50"></text></g></svg></svg>
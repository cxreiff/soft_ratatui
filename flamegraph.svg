<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="2079"><g><title>colors`ratatui::buffer::buffer::Buffer::index_of (4 samples, 0.19%)</title><rect x="0.0481%" y="181" width="0.1924%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="4"/><text x="0.2981%" y="191.50"></text></g><g><title>colors`ratatui::buffer::cell::Cell::set_char (1 samples, 0.05%)</title><rect x="0.2405%" y="181" width="0.0481%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="1"/><text x="0.4905%" y="191.50"></text></g><g><title>colors`ratatui::layout::layout::Layout::areas (1 samples, 0.05%)</title><rect x="0.2886%" y="181" width="0.0481%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="1"/><text x="0.5386%" y="191.50"></text></g><g><title>colors`ratatui::layout::layout::Layout::split_with_spacers (1 samples, 0.05%)</title><rect x="0.2886%" y="165" width="0.0481%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="1"/><text x="0.5386%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.05%)</title><rect x="0.2886%" y="149" width="0.0481%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="1"/><text x="0.5386%" y="159.50"></text></g><g><title>colors`std::time::Instant::elapsed (1 samples, 0.05%)</title><rect x="0.3367%" y="181" width="0.0481%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="1"/><text x="0.5867%" y="191.50"></text></g><g><title>colors`std::sys::pal::unix::time::Timespec::now (1 samples, 0.05%)</title><rect x="0.3367%" y="165" width="0.0481%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="1"/><text x="0.5867%" y="175.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (1 samples, 0.05%)</title><rect x="0.3367%" y="149" width="0.0481%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="1"/><text x="0.5867%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.05%)</title><rect x="0.3367%" y="133" width="0.0481%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="1"/><text x="0.5867%" y="143.50"></text></g><g><title>colors`&lt;&amp;mut colors::App as ratatui::widgets::Widget&gt;::render (9 samples, 0.43%)</title><rect x="0.0000%" y="197" width="0.4329%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="9"/><text x="0.2500%" y="207.50"></text></g><g><title>libsystem_m.dylib`cbrtf (1 samples, 0.05%)</title><rect x="0.3848%" y="181" width="0.0481%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="1"/><text x="0.6348%" y="191.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_data (2 samples, 0.10%)</title><rect x="0.5291%" y="133" width="0.0962%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="2"/><text x="0.7791%" y="143.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (19 samples, 0.91%)</title><rect x="3.8961%" y="101" width="0.9139%" height="15" fill="rgb(216,20,37)" fg:x="81" fg:w="19"/><text x="4.1461%" y="111.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.05%)</title><rect x="4.7619%" y="85" width="0.0481%" height="15" fill="rgb(206,188,39)" fg:x="99" fg:w="1"/><text x="5.0119%" y="95.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="4.7619%" y="69" width="0.0481%" height="15" fill="rgb(217,207,13)" fg:x="99" fg:w="1"/><text x="5.0119%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.05%)</title><rect x="4.7619%" y="53" width="0.0481%" height="15" fill="rgb(231,73,38)" fg:x="99" fg:w="1"/><text x="5.0119%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.05%)</title><rect x="4.7619%" y="37" width="0.0481%" height="15" fill="rgb(225,20,46)" fg:x="99" fg:w="1"/><text x="5.0119%" y="47.50"></text></g><g><title>colors`simd_adler32::Adler32::write (1 samples, 0.05%)</title><rect x="4.8100%" y="101" width="0.0481%" height="15" fill="rgb(210,31,41)" fg:x="100" fg:w="1"/><text x="5.0600%" y="111.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_data (587 samples, 28.23%)</title><rect x="0.6253%" y="117" width="28.2347%" height="15" fill="rgb(221,200,47)" fg:x="13" fg:w="587"/><text x="0.8753%" y="127.50">colors`fdeflate::compress::Compressor&lt;W&gt;::wri..</text></g><g><title>colors`simd_adler32::imp::scalar::update (499 samples, 24.00%)</title><rect x="4.8581%" y="101" width="24.0019%" height="15" fill="rgb(226,26,5)" fg:x="101" fg:w="499"/><text x="5.1081%" y="111.50">colors`simd_adler32::imp::scalar::upda..</text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (4 samples, 0.19%)</title><rect x="28.8600%" y="117" width="0.1924%" height="15" fill="rgb(249,33,26)" fg:x="600" fg:w="4"/><text x="29.1100%" y="127.50"></text></g><g><title>colors`crc32fast::Hasher::update (6 samples, 0.29%)</title><rect x="29.0524%" y="101" width="0.2886%" height="15" fill="rgb(235,183,28)" fg:x="604" fg:w="6"/><text x="29.3024%" y="111.50"></text></g><g><title>colors`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (4 samples, 0.19%)</title><rect x="29.3410%" y="69" width="0.1924%" height="15" fill="rgb(221,5,38)" fg:x="610" fg:w="4"/><text x="29.5910%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`write (4 samples, 0.19%)</title><rect x="29.3410%" y="53" width="0.1924%" height="15" fill="rgb(247,18,42)" fg:x="610" fg:w="4"/><text x="29.5910%" y="63.50"></text></g><g><title>colors`png::encoder::Writer&lt;W&gt;::write_zlib_encoded_idat (12 samples, 0.58%)</title><rect x="29.0524%" y="117" width="0.5772%" height="15" fill="rgb(241,131,45)" fg:x="604" fg:w="12"/><text x="29.3024%" y="127.50"></text></g><g><title>colors`png::encoder::write_chunk (6 samples, 0.29%)</title><rect x="29.3410%" y="101" width="0.2886%" height="15" fill="rgb(249,31,29)" fg:x="610" fg:w="6"/><text x="29.5910%" y="111.50"></text></g><g><title>colors`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (6 samples, 0.29%)</title><rect x="29.3410%" y="85" width="0.2886%" height="15" fill="rgb(225,111,53)" fg:x="610" fg:w="6"/><text x="29.5910%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.10%)</title><rect x="29.5334%" y="69" width="0.0962%" height="15" fill="rgb(238,160,17)" fg:x="614" fg:w="2"/><text x="29.7834%" y="79.50"></text></g><g><title>colors`png::filter::filter (507 samples, 24.39%)</title><rect x="29.6296%" y="117" width="24.3867%" height="15" fill="rgb(214,148,48)" fg:x="616" fg:w="507"/><text x="29.8796%" y="127.50">colors`png::filter::filter</text></g><g><title>colors`png::filter::filter_internal (174 samples, 8.37%)</title><rect x="45.6469%" y="101" width="8.3694%" height="15" fill="rgb(232,36,49)" fg:x="949" fg:w="174"/><text x="45.8969%" y="111.50">colors`png::..</text></g><g><title>colors`png::encoder::Writer&lt;W&gt;::write_image_data (1,111 samples, 53.44%)</title><rect x="0.6253%" y="133" width="53.4392%" height="15" fill="rgb(209,103,24)" fg:x="13" fg:w="1111"/><text x="0.8753%" y="143.50">colors`png::encoder::Writer&lt;W&gt;::write_image_data</text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.05%)</title><rect x="54.0164%" y="117" width="0.0481%" height="15" fill="rgb(229,88,8)" fg:x="1123" fg:w="1"/><text x="54.2664%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.05%)</title><rect x="54.0164%" y="101" width="0.0481%" height="15" fill="rgb(213,181,19)" fg:x="1123" fg:w="1"/><text x="54.2664%" y="111.50"></text></g><g><title>colors`image::codecs::png::PngEncoder&lt;W&gt;::encode_inner (1,114 samples, 53.58%)</title><rect x="0.5291%" y="149" width="53.5835%" height="15" fill="rgb(254,191,54)" fg:x="11" fg:w="1114"/><text x="0.7791%" y="159.50">colors`image::codecs::png::PngEncoder&lt;W&gt;::encode_inner</text></g><g><title>colors`png::filter::filter (1 samples, 0.05%)</title><rect x="54.0645%" y="133" width="0.0481%" height="15" fill="rgb(241,83,37)" fg:x="1124" fg:w="1"/><text x="54.3145%" y="143.50"></text></g><g><title>colors`image::image_reader::free_functions::save_buffer_with_format_impl (1,120 samples, 53.87%)</title><rect x="0.5291%" y="165" width="53.8721%" height="15" fill="rgb(233,36,39)" fg:x="11" fg:w="1120"/><text x="0.7791%" y="175.50">colors`image::image_reader::free_functions::save_buffer_with_format_impl</text></g><g><title>colors`std::fs::OpenOptions::_open (6 samples, 0.29%)</title><rect x="54.1126%" y="149" width="0.2886%" height="15" fill="rgb(226,3,54)" fg:x="1125" fg:w="6"/><text x="54.3626%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__open (6 samples, 0.29%)</title><rect x="54.1126%" y="133" width="0.2886%" height="15" fill="rgb(245,192,40)" fg:x="1125" fg:w="6"/><text x="54.3626%" y="143.50"></text></g><g><title>colors`image::image_reader::free_functions::save_buffer_impl (1,134 samples, 54.55%)</title><rect x="0.5291%" y="181" width="54.5455%" height="15" fill="rgb(238,167,29)" fg:x="11" fg:w="1134"/><text x="0.7791%" y="191.50">colors`image::image_reader::free_functions::save_buffer_impl</text></g><g><title>libsystem_kernel.dylib`close (14 samples, 0.67%)</title><rect x="54.4012%" y="165" width="0.6734%" height="15" fill="rgb(232,182,51)" fg:x="1131" fg:w="14"/><text x="54.6512%" y="175.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::index_of (1 samples, 0.05%)</title><rect x="55.0746%" y="181" width="0.0481%" height="15" fill="rgb(231,60,39)" fg:x="1145" fg:w="1"/><text x="55.3246%" y="191.50"></text></g><g><title>colors`ratatui::buffer::cell::Cell::symbol (2 samples, 0.10%)</title><rect x="55.1227%" y="181" width="0.0962%" height="15" fill="rgb(208,69,12)" fg:x="1146" fg:w="2"/><text x="55.3727%" y="191.50"></text></g><g><title>colors`DYLD-STUB$$calloc (1 samples, 0.05%)</title><rect x="77.0082%" y="165" width="0.0481%" height="15" fill="rgb(235,93,37)" fg:x="1601" fg:w="1"/><text x="77.2582%" y="175.50"></text></g><g><title>colors`DYLD-STUB$$free (2 samples, 0.10%)</title><rect x="77.0563%" y="165" width="0.0962%" height="15" fill="rgb(213,116,39)" fg:x="1602" fg:w="2"/><text x="77.3063%" y="175.50"></text></g><g><title>colors`__rdl_alloc_zeroed (2 samples, 0.10%)</title><rect x="77.1525%" y="165" width="0.0962%" height="15" fill="rgb(222,207,29)" fg:x="1604" fg:w="2"/><text x="77.4025%" y="175.50"></text></g><g><title>colors`fontdue::font::Font::metrics_raw (12 samples, 0.58%)</title><rect x="77.2487%" y="165" width="0.5772%" height="15" fill="rgb(206,96,30)" fg:x="1606" fg:w="12"/><text x="77.4987%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (2 samples, 0.10%)</title><rect x="85.4257%" y="149" width="0.0962%" height="15" fill="rgb(218,138,4)" fg:x="1776" fg:w="2"/><text x="85.6757%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (2 samples, 0.10%)</title><rect x="86.0510%" y="133" width="0.0962%" height="15" fill="rgb(250,191,14)" fg:x="1789" fg:w="2"/><text x="86.3010%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.19%)</title><rect x="86.6282%" y="117" width="0.1924%" height="15" fill="rgb(239,60,40)" fg:x="1801" fg:w="4"/><text x="86.8782%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (32 samples, 1.54%)</title><rect x="85.5219%" y="149" width="1.5392%" height="15" fill="rgb(206,27,48)" fg:x="1778" fg:w="32"/><text x="85.7719%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (19 samples, 0.91%)</title><rect x="86.1472%" y="133" width="0.9139%" height="15" fill="rgb(225,35,8)" fg:x="1791" fg:w="19"/><text x="86.3972%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5 samples, 0.24%)</title><rect x="86.8206%" y="117" width="0.2405%" height="15" fill="rgb(250,213,24)" fg:x="1805" fg:w="5"/><text x="87.0706%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (7 samples, 0.34%)</title><rect x="87.0611%" y="149" width="0.3367%" height="15" fill="rgb(247,123,22)" fg:x="1810" fg:w="7"/><text x="87.3111%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.10%)</title><rect x="87.4940%" y="133" width="0.0962%" height="15" fill="rgb(231,138,38)" fg:x="1819" fg:w="2"/><text x="87.7440%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.34%)</title><rect x="87.7826%" y="117" width="0.3367%" height="15" fill="rgb(231,145,46)" fg:x="1825" fg:w="7"/><text x="88.0326%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.05%)</title><rect x="88.7927%" y="101" width="0.0481%" height="15" fill="rgb(251,118,11)" fg:x="1846" fg:w="1"/><text x="89.0427%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33 samples, 1.59%)</title><rect x="87.3978%" y="149" width="1.5873%" height="15" fill="rgb(217,147,25)" fg:x="1817" fg:w="33"/><text x="87.6478%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (29 samples, 1.39%)</title><rect x="87.5902%" y="133" width="1.3949%" height="15" fill="rgb(247,81,37)" fg:x="1821" fg:w="29"/><text x="87.8402%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (18 samples, 0.87%)</title><rect x="88.1193%" y="117" width="0.8658%" height="15" fill="rgb(209,12,38)" fg:x="1832" fg:w="18"/><text x="88.3693%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.14%)</title><rect x="88.8408%" y="101" width="0.1443%" height="15" fill="rgb(227,1,9)" fg:x="1847" fg:w="3"/><text x="89.0908%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.14%)</title><rect x="88.9851%" y="149" width="0.1443%" height="15" fill="rgb(248,47,43)" fg:x="1850" fg:w="3"/><text x="89.2351%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.05%)</title><rect x="89.1294%" y="149" width="0.0481%" height="15" fill="rgb(221,10,30)" fg:x="1853" fg:w="1"/><text x="89.3794%" y="159.50"></text></g><g><title>colors`fontdue::font::Font::rasterize_indexed (239 samples, 11.50%)</title><rect x="77.8259%" y="165" width="11.4959%" height="15" fill="rgb(210,229,1)" fg:x="1618" fg:w="239"/><text x="78.0759%" y="175.50">colors`fontdue::f..</text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.14%)</title><rect x="89.1775%" y="149" width="0.1443%" height="15" fill="rgb(222,148,37)" fg:x="1854" fg:w="3"/><text x="89.4275%" y="159.50"></text></g><g><title>colors`fontdue::raster::Raster::draw (48 samples, 2.31%)</title><rect x="89.3218%" y="165" width="2.3088%" height="15" fill="rgb(234,67,33)" fg:x="1857" fg:w="48"/><text x="89.5718%" y="175.50">c..</text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.10%)</title><rect x="91.6306%" y="165" width="0.0962%" height="15" fill="rgb(247,98,35)" fg:x="1905" fg:w="2"/><text x="91.8806%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (1 samples, 0.05%)</title><rect x="91.7268%" y="165" width="0.0481%" height="15" fill="rgb(247,138,52)" fg:x="1907" fg:w="1"/><text x="91.9768%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.10%)</title><rect x="91.7749%" y="165" width="0.0962%" height="15" fill="rgb(213,79,30)" fg:x="1908" fg:w="2"/><text x="92.0249%" y="175.50"></text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::draw_cell (765 samples, 36.80%)</title><rect x="55.2189%" y="181" width="36.7965%" height="15" fill="rgb(246,177,23)" fg:x="1148" fg:w="765"/><text x="55.4689%" y="191.50">colors`soft_ratatui::soft_backend::SoftBackend::draw_cell</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (3 samples, 0.14%)</title><rect x="91.8711%" y="165" width="0.1443%" height="15" fill="rgb(230,62,27)" fg:x="1910" fg:w="3"/><text x="92.1211%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.05%)</title><rect x="92.0154%" y="181" width="0.0481%" height="15" fill="rgb(216,154,8)" fg:x="1913" fg:w="1"/><text x="92.2654%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.38%)</title><rect x="92.0635%" y="181" width="0.3848%" height="15" fill="rgb(244,35,45)" fg:x="1914" fg:w="8"/><text x="92.3135%" y="191.50"></text></g><g><title>colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw (1,915 samples, 92.11%)</title><rect x="0.4329%" y="197" width="92.1116%" height="15" fill="rgb(251,115,12)" fg:x="9" fg:w="1915"/><text x="0.6829%" y="207.50">colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw</text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.10%)</title><rect x="92.4483%" y="181" width="0.0962%" height="15" fill="rgb(240,54,50)" fg:x="1922" fg:w="2"/><text x="92.6983%" y="191.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="92.5445%" y="197" width="0.0481%" height="15" fill="rgb(233,84,52)" fg:x="1924" fg:w="1"/><text x="92.7945%" y="207.50"></text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (7 samples, 0.34%)</title><rect x="92.5926%" y="197" width="0.3367%" height="15" fill="rgb(207,117,47)" fg:x="1925" fg:w="7"/><text x="92.8426%" y="207.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.05%)</title><rect x="93.6027%" y="181" width="0.0481%" height="15" fill="rgb(249,43,39)" fg:x="1946" fg:w="1"/><text x="93.8527%" y="191.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="93.6027%" y="165" width="0.0481%" height="15" fill="rgb(209,38,44)" fg:x="1946" fg:w="1"/><text x="93.8527%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.05%)</title><rect x="93.6027%" y="149" width="0.0481%" height="15" fill="rgb(236,212,23)" fg:x="1946" fg:w="1"/><text x="93.8527%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.05%)</title><rect x="93.6027%" y="133" width="0.0481%" height="15" fill="rgb(242,79,21)" fg:x="1946" fg:w="1"/><text x="93.8527%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.05%)</title><rect x="93.6027%" y="117" width="0.0481%" height="15" fill="rgb(211,96,35)" fg:x="1946" fg:w="1"/><text x="93.8527%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="93.6027%" y="101" width="0.0481%" height="15" fill="rgb(253,215,40)" fg:x="1946" fg:w="1"/><text x="93.8527%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.05%)</title><rect x="93.6027%" y="85" width="0.0481%" height="15" fill="rgb(211,81,21)" fg:x="1946" fg:w="1"/><text x="93.8527%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.05%)</title><rect x="93.6027%" y="69" width="0.0481%" height="15" fill="rgb(208,190,38)" fg:x="1946" fg:w="1"/><text x="93.8527%" y="79.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::diff (41 samples, 1.97%)</title><rect x="92.9293%" y="197" width="1.9721%" height="15" fill="rgb(235,213,38)" fg:x="1932" fg:w="41"/><text x="93.1793%" y="207.50">c..</text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (26 samples, 1.25%)</title><rect x="93.6508%" y="181" width="1.2506%" height="15" fill="rgb(237,122,38)" fg:x="1947" fg:w="26"/><text x="93.9008%" y="191.50"></text></g><g><title>colors`unicode_width::tables::lookup_width (8 samples, 0.38%)</title><rect x="94.5166%" y="165" width="0.3848%" height="15" fill="rgb(244,218,35)" fg:x="1965" fg:w="8"/><text x="94.7666%" y="175.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::index_of (1 samples, 0.05%)</title><rect x="94.9014%" y="197" width="0.0481%" height="15" fill="rgb(240,68,47)" fg:x="1973" fg:w="1"/><text x="95.1514%" y="207.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::reset (1 samples, 0.05%)</title><rect x="94.9495%" y="197" width="0.0481%" height="15" fill="rgb(210,16,53)" fg:x="1974" fg:w="1"/><text x="95.1995%" y="207.50"></text></g><g><title>colors`ratatui::buffer::cell::Cell::set_char (1 samples, 0.05%)</title><rect x="94.9976%" y="197" width="0.0481%" height="15" fill="rgb(235,124,12)" fg:x="1975" fg:w="1"/><text x="95.2476%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.10%)</title><rect x="95.0457%" y="197" width="0.0962%" height="15" fill="rgb(224,169,11)" fg:x="1976" fg:w="2"/><text x="95.2957%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="95.1419%" y="197" width="0.0481%" height="15" fill="rgb(250,166,2)" fg:x="1978" fg:w="1"/><text x="95.3919%" y="207.50"></text></g><g><title>colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw (1,982 samples, 95.33%)</title><rect x="0.0000%" y="213" width="95.3343%" height="15" fill="rgb(242,216,29)" fg:x="0" fg:w="1982"/><text x="0.2500%" y="223.50">colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.14%)</title><rect x="95.1900%" y="197" width="0.1443%" height="15" fill="rgb(230,116,27)" fg:x="1979" fg:w="3"/><text x="95.4400%" y="207.50"></text></g><g><title>colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::clear (1 samples, 0.05%)</title><rect x="95.3343%" y="197" width="0.0481%" height="15" fill="rgb(228,99,48)" fg:x="1982" fg:w="1"/><text x="95.5843%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="95.3343%" y="181" width="0.0481%" height="15" fill="rgb(253,11,6)" fg:x="1982" fg:w="1"/><text x="95.5843%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.05%)</title><rect x="95.3343%" y="165" width="0.0481%" height="15" fill="rgb(247,143,39)" fg:x="1982" fg:w="1"/><text x="95.5843%" y="175.50"></text></g><g><title>colors`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::quad_to (4 samples, 0.19%)</title><rect x="95.4305%" y="181" width="0.1924%" height="15" fill="rgb(236,97,10)" fg:x="1984" fg:w="4"/><text x="95.6805%" y="191.50"></text></g><g><title>colors`fontdue::math::Geometry::finalize (10 samples, 0.48%)</title><rect x="95.6229%" y="181" width="0.4810%" height="15" fill="rgb(233,208,19)" fg:x="1988" fg:w="10"/><text x="95.8729%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.10%)</title><rect x="96.0077%" y="165" width="0.0962%" height="15" fill="rgb(216,164,2)" fg:x="1996" fg:w="2"/><text x="96.2577%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.05%)</title><rect x="96.0558%" y="149" width="0.0481%" height="15" fill="rgb(220,129,5)" fg:x="1997" fg:w="1"/><text x="96.3058%" y="159.50"></text></g><g><title>colors`fontdue::table::gsub::load_gsub (1 samples, 0.05%)</title><rect x="96.1039%" y="181" width="0.0481%" height="15" fill="rgb(242,17,10)" fg:x="1998" fg:w="1"/><text x="96.3539%" y="191.50"></text></g><g><title>colors`ttf_parser::Face::parse (1 samples, 0.05%)</title><rect x="96.1520%" y="181" width="0.0481%" height="15" fill="rgb(242,107,0)" fg:x="1999" fg:w="1"/><text x="96.4020%" y="191.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.05%)</title><rect x="96.8254%" y="149" width="0.0481%" height="15" fill="rgb(251,28,31)" fg:x="2013" fg:w="1"/><text x="97.0754%" y="159.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="96.8254%" y="133" width="0.0481%" height="15" fill="rgb(233,223,10)" fg:x="2013" fg:w="1"/><text x="97.0754%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.05%)</title><rect x="96.8254%" y="117" width="0.0481%" height="15" fill="rgb(215,21,27)" fg:x="2013" fg:w="1"/><text x="97.0754%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.05%)</title><rect x="97.0659%" y="69" width="0.0481%" height="15" fill="rgb(232,23,21)" fg:x="2018" fg:w="1"/><text x="97.3159%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.05%)</title><rect x="97.0659%" y="53" width="0.0481%" height="15" fill="rgb(244,5,23)" fg:x="2018" fg:w="1"/><text x="97.3159%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.05%)</title><rect x="97.1140%" y="69" width="0.0481%" height="15" fill="rgb(226,81,46)" fg:x="2019" fg:w="1"/><text x="97.3640%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.05%)</title><rect x="97.1140%" y="53" width="0.0481%" height="15" fill="rgb(247,70,30)" fg:x="2019" fg:w="1"/><text x="97.3640%" y="63.50"></text></g><g><title>colors`fontdue::math::Geometry::push (8 samples, 0.38%)</title><rect x="96.8735%" y="149" width="0.3848%" height="15" fill="rgb(212,68,19)" fg:x="2014" fg:w="8"/><text x="97.1235%" y="159.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4 samples, 0.19%)</title><rect x="97.0659%" y="133" width="0.1924%" height="15" fill="rgb(240,187,13)" fg:x="2018" fg:w="4"/><text x="97.3159%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (4 samples, 0.19%)</title><rect x="97.0659%" y="117" width="0.1924%" height="15" fill="rgb(223,113,26)" fg:x="2018" fg:w="4"/><text x="97.3159%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (4 samples, 0.19%)</title><rect x="97.0659%" y="101" width="0.1924%" height="15" fill="rgb(206,192,2)" fg:x="2018" fg:w="4"/><text x="97.3159%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (4 samples, 0.19%)</title><rect x="97.0659%" y="85" width="0.1924%" height="15" fill="rgb(241,108,4)" fg:x="2018" fg:w="4"/><text x="97.3159%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.10%)</title><rect x="97.1621%" y="69" width="0.0962%" height="15" fill="rgb(247,173,49)" fg:x="2020" fg:w="2"/><text x="97.4121%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.14%)</title><rect x="97.2583%" y="149" width="0.1443%" height="15" fill="rgb(224,114,35)" fg:x="2022" fg:w="3"/><text x="97.5083%" y="159.50"></text></g><g><title>colors`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::quad_to (20 samples, 0.96%)</title><rect x="96.5849%" y="165" width="0.9620%" height="15" fill="rgb(245,159,27)" fg:x="2008" fg:w="20"/><text x="96.8349%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.14%)</title><rect x="97.4026%" y="149" width="0.1443%" height="15" fill="rgb(245,172,44)" fg:x="2025" fg:w="3"/><text x="97.6526%" y="159.50"></text></g><g><title>colors`fontdue::math::Geometry::push (10 samples, 0.48%)</title><rect x="97.5469%" y="165" width="0.4810%" height="15" fill="rgb(236,23,11)" fg:x="2028" fg:w="10"/><text x="97.7969%" y="175.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.05%)</title><rect x="98.1722%" y="133" width="0.0481%" height="15" fill="rgb(205,117,38)" fg:x="2041" fg:w="1"/><text x="98.4222%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="98.1722%" y="117" width="0.0481%" height="15" fill="rgb(237,72,25)" fg:x="2041" fg:w="1"/><text x="98.4222%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.05%)</title><rect x="98.1722%" y="101" width="0.0481%" height="15" fill="rgb(244,70,9)" fg:x="2041" fg:w="1"/><text x="98.4222%" y="111.50"></text></g><g><title>colors`fontdue::math::Geometry::push (5 samples, 0.24%)</title><rect x="98.2203%" y="133" width="0.2405%" height="15" fill="rgb(217,125,39)" fg:x="2042" fg:w="5"/><text x="98.4703%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.05%)</title><rect x="98.4127%" y="117" width="0.0481%" height="15" fill="rgb(235,36,10)" fg:x="2046" fg:w="1"/><text x="98.6627%" y="127.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="98.4127%" y="101" width="0.0481%" height="15" fill="rgb(251,123,47)" fg:x="2046" fg:w="1"/><text x="98.6627%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.05%)</title><rect x="98.4127%" y="85" width="0.0481%" height="15" fill="rgb(221,13,13)" fg:x="2046" fg:w="1"/><text x="98.6627%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.05%)</title><rect x="98.4127%" y="69" width="0.0481%" height="15" fill="rgb(238,131,9)" fg:x="2046" fg:w="1"/><text x="98.6627%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.05%)</title><rect x="98.4127%" y="53" width="0.0481%" height="15" fill="rgb(211,50,8)" fg:x="2046" fg:w="1"/><text x="98.6627%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.05%)</title><rect x="98.4127%" y="37" width="0.0481%" height="15" fill="rgb(245,182,24)" fg:x="2046" fg:w="1"/><text x="98.6627%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.05%)</title><rect x="98.4608%" y="133" width="0.0481%" height="15" fill="rgb(242,14,37)" fg:x="2047" fg:w="1"/><text x="98.7108%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.10%)</title><rect x="98.5089%" y="133" width="0.0962%" height="15" fill="rgb(246,228,12)" fg:x="2048" fg:w="2"/><text x="98.7589%" y="143.50"></text></g><g><title>colors`&lt;fontdue::math::Geometry as ttf_parser::OutlineBuilder&gt;::quad_to (11 samples, 0.53%)</title><rect x="98.1722%" y="149" width="0.5291%" height="15" fill="rgb(213,55,15)" fg:x="2041" fg:w="11"/><text x="98.4222%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.10%)</title><rect x="98.6051%" y="133" width="0.0962%" height="15" fill="rgb(209,9,3)" fg:x="2050" fg:w="2"/><text x="98.8551%" y="143.50"></text></g><g><title>colors`fontdue::math::Geometry::push (2 samples, 0.10%)</title><rect x="98.7013%" y="149" width="0.0962%" height="15" fill="rgb(230,59,30)" fg:x="2052" fg:w="2"/><text x="98.9513%" y="159.50"></text></g><g><title>colors`ttf_parser::tables::glyf::outline_impl (17 samples, 0.82%)</title><rect x="98.0279%" y="165" width="0.8177%" height="15" fill="rgb(209,121,21)" fg:x="2038" fg:w="17"/><text x="98.2779%" y="175.50"></text></g><g><title>colors`ttf_parser::tables::glyf::outline_impl (1 samples, 0.05%)</title><rect x="98.7975%" y="149" width="0.0481%" height="15" fill="rgb(220,109,13)" fg:x="2054" fg:w="1"/><text x="99.0475%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.05%)</title><rect x="98.7975%" y="133" width="0.0481%" height="15" fill="rgb(232,18,1)" fg:x="2054" fg:w="1"/><text x="99.0475%" y="143.50"></text></g><g><title>colors`ttf_parser::tables::glyf::resolve_coords_len (1 samples, 0.05%)</title><rect x="98.8456%" y="165" width="0.0481%" height="15" fill="rgb(215,41,42)" fg:x="2055" fg:w="1"/><text x="99.0956%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.19%)</title><rect x="98.8937%" y="165" width="0.1924%" height="15" fill="rgb(224,123,36)" fg:x="2056" fg:w="4"/><text x="99.1437%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.14%)</title><rect x="99.0861%" y="165" width="0.1443%" height="15" fill="rgb(240,125,3)" fg:x="2060" fg:w="3"/><text x="99.3361%" y="175.50"></text></g><g><title>colors`ttf_parser::tables::glyf::outline_impl (64 samples, 3.08%)</title><rect x="96.2001%" y="181" width="3.0784%" height="15" fill="rgb(205,98,50)" fg:x="2000" fg:w="64"/><text x="96.4501%" y="191.50">col..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="99.2304%" y="165" width="0.0481%" height="15" fill="rgb(205,185,37)" fg:x="2063" fg:w="1"/><text x="99.4804%" y="175.50"></text></g><g><title>colors`fontdue::font::Font::from_bytes (87 samples, 4.18%)</title><rect x="95.3824%" y="197" width="4.1847%" height="15" fill="rgb(238,207,15)" fg:x="1983" fg:w="87"/><text x="95.6324%" y="207.50">color..</text></g><g><title>colors`ttf_parser::tables::glyf::resolve_coords_len (6 samples, 0.29%)</title><rect x="99.2785%" y="181" width="0.2886%" height="15" fill="rgb(213,199,42)" fg:x="2064" fg:w="6"/><text x="99.5285%" y="191.50"></text></g><g><title>all (2,079 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(235,201,11)" fg:x="0" fg:w="2079"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld`start (2,079 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(207,46,11)" fg:x="0" fg:w="2079"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>colors`main (2,079 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="2079"/><text x="0.2500%" y="303.50">colors`main</text></g><g><title>colors`std::rt::lang_start_internal (2,079 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(243,32,47)" fg:x="0" fg:w="2079"/><text x="0.2500%" y="287.50">colors`std::rt::lang_start_internal</text></g><g><title>colors`std::rt::lang_start::_{{closure}} (2,079 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(247,202,23)" fg:x="0" fg:w="2079"/><text x="0.2500%" y="271.50">colors`std::rt::lang_start::_{{closure}}</text></g><g><title>colors`std::sys::backtrace::__rust_begin_short_backtrace (2,079 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(219,102,11)" fg:x="0" fg:w="2079"/><text x="0.2500%" y="255.50">colors`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>colors`colors::main (2,079 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,110,44)" fg:x="0" fg:w="2079"/><text x="0.2500%" y="239.50">colors`colors::main</text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::new (97 samples, 4.67%)</title><rect x="95.3343%" y="213" width="4.6657%" height="15" fill="rgb(222,74,54)" fg:x="1982" fg:w="97"/><text x="95.5843%" y="223.50">color..</text></g><g><title>colors`fontdue::hash::hash (9 samples, 0.43%)</title><rect x="99.5671%" y="197" width="0.4329%" height="15" fill="rgb(216,99,12)" fg:x="2070" fg:w="9"/><text x="99.8171%" y="207.50"></text></g></svg></svg>
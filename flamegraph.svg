<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="6763"><g><title>colors`__rdl_alloc (1 samples, 0.01%)</title><rect x="0.0000%" y="501" width="0.0148%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>colors`color_eyre::install (1 samples, 0.01%)</title><rect x="0.0148%" y="453" width="0.0148%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2648%" y="463.50"></text></g><g><title>colors`color_eyre::config::HookBuilder::install (1 samples, 0.01%)</title><rect x="0.0148%" y="437" width="0.0148%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2648%" y="447.50"></text></g><g><title>colors`eyre::set_hook (1 samples, 0.01%)</title><rect x="0.0148%" y="421" width="0.0148%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2648%" y="431.50"></text></g><g><title>colors`once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.01%)</title><rect x="0.0148%" y="405" width="0.0148%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2648%" y="415.50"></text></g><g><title>colors`once_cell::imp::initialize_or_wait (1 samples, 0.01%)</title><rect x="0.0148%" y="389" width="0.0148%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2648%" y="399.50"></text></g><g><title>colors`&lt;&amp;mut colors::App as ratatui::widgets::Widget&gt;::render (3 samples, 0.04%)</title><rect x="0.0296%" y="437" width="0.0444%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="3"/><text x="0.2796%" y="447.50"></text></g><g><title>colors`ratatui::buffer::cell::Cell::set_char (1 samples, 0.01%)</title><rect x="0.0591%" y="421" width="0.0148%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="1"/><text x="0.3091%" y="431.50"></text></g><g><title>colors`&lt;cosmic_text::buffer::LayoutRunIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="0.1035%" y="405" width="0.0444%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="3"/><text x="0.3535%" y="415.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsOwned::new (1 samples, 0.01%)</title><rect x="0.1479%" y="405" width="0.0148%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="1"/><text x="0.3979%" y="415.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (3 samples, 0.04%)</title><rect x="0.4732%" y="373" width="0.0444%" height="15" fill="rgb(250,228,42)" fg:x="32" fg:w="3"/><text x="0.7232%" y="383.50"></text></g><g><title>colors`cosmic_text::swash::SwashCache::get_image (2 samples, 0.03%)</title><rect x="0.5175%" y="373" width="0.0296%" height="15" fill="rgb(240,193,28)" fg:x="35" fg:w="2"/><text x="0.7675%" y="383.50"></text></g><g><title>colors`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.01%)</title><rect x="0.5323%" y="357" width="0.0148%" height="15" fill="rgb(216,20,37)" fg:x="36" fg:w="1"/><text x="0.7823%" y="367.50"></text></g><g><title>colors`tiny_skia::painter::Paint::set_color (19 samples, 0.28%)</title><rect x="0.5471%" y="373" width="0.2809%" height="15" fill="rgb(206,188,39)" fg:x="37" fg:w="19"/><text x="0.7971%" y="383.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (6 samples, 0.09%)</title><rect x="2.0849%" y="357" width="0.0887%" height="15" fill="rgb(217,207,13)" fg:x="141" fg:w="6"/><text x="2.3349%" y="367.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (37 samples, 0.55%)</title><rect x="2.1736%" y="357" width="0.5471%" height="15" fill="rgb(231,73,38)" fg:x="147" fg:w="37"/><text x="2.4236%" y="367.50"></text></g><g><title>colors`tiny_skia::blend_mode::BlendMode::to_stage (4 samples, 0.06%)</title><rect x="2.7207%" y="357" width="0.0591%" height="15" fill="rgb(225,20,46)" fg:x="184" fg:w="4"/><text x="2.9707%" y="367.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (29 samples, 0.43%)</title><rect x="2.7798%" y="357" width="0.4288%" height="15" fill="rgb(210,31,41)" fg:x="188" fg:w="29"/><text x="3.0298%" y="367.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::push (15 samples, 0.22%)</title><rect x="3.2086%" y="357" width="0.2218%" height="15" fill="rgb(221,200,47)" fg:x="217" fg:w="15"/><text x="3.4586%" y="367.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (143 samples, 2.11%)</title><rect x="9.2562%" y="341" width="2.1144%" height="15" fill="rgb(226,26,5)" fg:x="626" fg:w="143"/><text x="9.5062%" y="351.50">c..</text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (1,048 samples, 15.50%)</title><rect x="11.3707%" y="341" width="15.4961%" height="15" fill="rgb(249,33,26)" fg:x="769" fg:w="1048"/><text x="11.6207%" y="351.50">colors`tiny_skia::pipeli..</text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (105 samples, 1.55%)</title><rect x="26.8668%" y="341" width="1.5526%" height="15" fill="rgb(235,183,28)" fg:x="1817" fg:w="105"/><text x="27.1168%" y="351.50"></text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (2,322 samples, 34.33%)</title><rect x="3.4304%" y="357" width="34.3339%" height="15" fill="rgb(221,5,38)" fg:x="232" fg:w="2322"/><text x="3.6804%" y="367.50">colors`tiny_skia::pipeline::blitter::RasterPipelineBlitt..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (632 samples, 9.34%)</title><rect x="28.4193%" y="341" width="9.3450%" height="15" fill="rgb(247,18,42)" fg:x="1922" fg:w="632"/><text x="28.6693%" y="351.50">libsystem_pla..</text></g><g><title>colors`tiny_skia::pipeline::lowp::source_over_rgba_tail (4 samples, 0.06%)</title><rect x="39.9970%" y="325" width="0.0591%" height="15" fill="rgb(241,131,45)" fg:x="2705" fg:w="4"/><text x="40.2470%" y="335.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (2 samples, 0.03%)</title><rect x="40.2484%" y="309" width="0.0296%" height="15" fill="rgb(249,31,29)" fg:x="2722" fg:w="2"/><text x="40.4984%" y="319.50"></text></g><g><title>colors`DYLD-STUB$$memset_pattern16 (5 samples, 0.07%)</title><rect x="40.2780%" y="309" width="0.0739%" height="15" fill="rgb(225,111,53)" fg:x="2724" fg:w="5"/><text x="40.5280%" y="319.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::source_over_rgba_tail (66 samples, 0.98%)</title><rect x="40.3519%" y="309" width="0.9759%" height="15" fill="rgb(238,160,17)" fg:x="2729" fg:w="66"/><text x="40.6019%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.15%)</title><rect x="41.3278%" y="309" width="0.1479%" height="15" fill="rgb(214,148,48)" fg:x="2795" fg:w="10"/><text x="41.5778%" y="319.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::start (102 samples, 1.51%)</title><rect x="40.0562%" y="325" width="1.5082%" height="15" fill="rgb(232,36,49)" fg:x="2709" fg:w="102"/><text x="40.3062%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (6 samples, 0.09%)</title><rect x="41.4757%" y="309" width="0.0887%" height="15" fill="rgb(209,103,24)" fg:x="2805" fg:w="6"/><text x="41.7257%" y="319.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (192 samples, 2.84%)</title><rect x="39.3169%" y="341" width="2.8390%" height="15" fill="rgb(229,88,8)" fg:x="2659" fg:w="192"/><text x="39.5669%" y="351.50">co..</text></g><g><title>colors`tiny_skia::pipeline::lowp::uniform_color (40 samples, 0.59%)</title><rect x="41.5644%" y="325" width="0.5915%" height="15" fill="rgb(213,181,19)" fg:x="2811" fg:w="40"/><text x="41.8144%" y="335.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (299 samples, 4.42%)</title><rect x="37.7643%" y="357" width="4.4211%" height="15" fill="rgb(254,191,54)" fg:x="2554" fg:w="299"/><text x="38.0143%" y="367.50">color..</text></g><g><title>colors`tiny_skia::pipeline::lowp::start (2 samples, 0.03%)</title><rect x="42.1558%" y="341" width="0.0296%" height="15" fill="rgb(241,83,37)" fg:x="2851" fg:w="2"/><text x="42.4058%" y="351.50"></text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (7 samples, 0.10%)</title><rect x="42.1854%" y="357" width="0.1035%" height="15" fill="rgb(233,36,39)" fg:x="2853" fg:w="7"/><text x="42.4354%" y="367.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::from_xywh (21 samples, 0.31%)</title><rect x="42.2889%" y="357" width="0.3105%" height="15" fill="rgb(226,3,54)" fg:x="2860" fg:w="21"/><text x="42.5389%" y="367.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::intersect (135 samples, 2.00%)</title><rect x="42.5994%" y="357" width="1.9962%" height="15" fill="rgb(245,192,40)" fg:x="2881" fg:w="135"/><text x="42.8494%" y="367.50">c..</text></g><g><title>colors`tiny_skia_path::rect::Rect::round (31 samples, 0.46%)</title><rect x="44.5956%" y="357" width="0.4584%" height="15" fill="rgb(238,167,29)" fg:x="3016" fg:w="31"/><text x="44.8456%" y="367.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (3,941 samples, 58.27%)</title><rect x="0.8280%" y="373" width="58.2730%" height="15" fill="rgb(232,182,51)" fg:x="56" fg:w="3941"/><text x="1.0780%" y="383.50">colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect</text></g><g><title>libsystem_platform.dylib`_platform_memmove (950 samples, 14.05%)</title><rect x="45.0540%" y="357" width="14.0470%" height="15" fill="rgb(231,60,39)" fg:x="3047" fg:w="950"/><text x="45.3040%" y="367.50">libsystem_platform.dy..</text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (12 samples, 0.18%)</title><rect x="59.1010%" y="373" width="0.1774%" height="15" fill="rgb(208,69,12)" fg:x="3997" fg:w="12"/><text x="59.3510%" y="383.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (7 samples, 0.10%)</title><rect x="59.2784%" y="373" width="0.1035%" height="15" fill="rgb(235,93,37)" fg:x="4009" fg:w="7"/><text x="59.5284%" y="383.50"></text></g><g><title>colors`tiny_skia_path::transform::Transform::is_identity (19 samples, 0.28%)</title><rect x="59.3819%" y="373" width="0.2809%" height="15" fill="rgb(213,116,39)" fg:x="4016" fg:w="19"/><text x="59.6319%" y="383.50"></text></g><g><title>colors`cosmic_text::swash::SwashCache::with_pixels (4,467 samples, 66.05%)</title><rect x="0.1626%" y="389" width="66.0506%" height="15" fill="rgb(222,207,29)" fg:x="11" fg:w="4467"/><text x="0.4126%" y="399.50">colors`cosmic_text::swash::SwashCache::with_pixels</text></g><g><title>libsystem_platform.dylib`_platform_memmove (443 samples, 6.55%)</title><rect x="59.6629%" y="373" width="6.5503%" height="15" fill="rgb(206,96,30)" fg:x="4035" fg:w="443"/><text x="59.9129%" y="383.50">libsystem..</text></g><g><title>colors`tiny_skia::painter::Paint::set_color (3 samples, 0.04%)</title><rect x="66.2132%" y="389" width="0.0444%" height="15" fill="rgb(218,138,4)" fg:x="4478" fg:w="3"/><text x="66.4632%" y="399.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (17 samples, 0.25%)</title><rect x="66.2576%" y="389" width="0.2514%" height="15" fill="rgb(250,191,14)" fg:x="4481" fg:w="17"/><text x="66.5076%" y="399.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::draw (4,527 samples, 66.94%)</title><rect x="0.1626%" y="405" width="66.9377%" height="15" fill="rgb(239,60,40)" fg:x="11" fg:w="4527"/><text x="0.4126%" y="415.50">colors`cosmic_text::buffer::Buffer::draw</text></g><g><title>colors`tiny_skia_path::rect::Rect::from_xywh (40 samples, 0.59%)</title><rect x="66.5089%" y="389" width="0.5915%" height="15" fill="rgb(206,27,48)" fg:x="4498" fg:w="40"/><text x="66.7589%" y="399.50"></text></g><g><title>colors`&lt;cosmic_text::line_ending::LineIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="67.1448%" y="389" width="0.0296%" height="15" fill="rgb(225,35,8)" fg:x="4541" fg:w="2"/><text x="67.3948%" y="399.50"></text></g><g><title>colors`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="67.1743%" y="373" width="0.0148%" height="15" fill="rgb(250,213,24)" fg:x="4543" fg:w="1"/><text x="67.4243%" y="383.50"></text></g><g><title>colors`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.01%)</title><rect x="67.1743%" y="357" width="0.0148%" height="15" fill="rgb(247,123,22)" fg:x="4543" fg:w="1"/><text x="67.4243%" y="367.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="67.1891%" y="373" width="0.0148%" height="15" fill="rgb(231,138,38)" fg:x="4544" fg:w="1"/><text x="67.4391%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.01%)</title><rect x="67.2187%" y="357" width="0.0148%" height="15" fill="rgb(231,145,46)" fg:x="4546" fg:w="1"/><text x="67.4687%" y="367.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;cosmic_text::shape::ShapeLine&gt;&gt; (5 samples, 0.07%)</title><rect x="67.2039%" y="373" width="0.0739%" height="15" fill="rgb(251,118,11)" fg:x="4545" fg:w="5"/><text x="67.4539%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.04%)</title><rect x="67.2335%" y="357" width="0.0444%" height="15" fill="rgb(217,147,25)" fg:x="4547" fg:w="3"/><text x="67.4835%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.03%)</title><rect x="67.2778%" y="373" width="0.0296%" height="15" fill="rgb(247,81,37)" fg:x="4550" fg:w="2"/><text x="67.5278%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.03%)</title><rect x="67.3074%" y="373" width="0.0296%" height="15" fill="rgb(209,12,38)" fg:x="4552" fg:w="2"/><text x="67.5574%" y="383.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::buffer_line::BufferLine&gt; (12 samples, 0.18%)</title><rect x="67.1743%" y="389" width="0.1774%" height="15" fill="rgb(227,1,9)" fg:x="4543" fg:w="12"/><text x="67.4243%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.01%)</title><rect x="67.3370%" y="373" width="0.0148%" height="15" fill="rgb(248,47,43)" fg:x="4554" fg:w="1"/><text x="67.5870%" y="383.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;alloc::vec::Vec&lt;cosmic_text::layout::LayoutLine&gt;&gt;&gt; (2 samples, 0.03%)</title><rect x="67.3518%" y="389" width="0.0296%" height="15" fill="rgb(221,10,30)" fg:x="4555" fg:w="2"/><text x="67.6018%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.01%)</title><rect x="67.3666%" y="373" width="0.0148%" height="15" fill="rgb(210,229,1)" fg:x="4556" fg:w="1"/><text x="67.6166%" y="383.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="67.3813%" y="357" width="0.0148%" height="15" fill="rgb(222,148,37)" fg:x="4557" fg:w="1"/><text x="67.6313%" y="367.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="67.3961%" y="357" width="0.0148%" height="15" fill="rgb(234,67,33)" fg:x="4558" fg:w="1"/><text x="67.6461%" y="367.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::defaults (3 samples, 0.04%)</title><rect x="67.4109%" y="341" width="0.0444%" height="15" fill="rgb(247,98,35)" fg:x="4559" fg:w="3"/><text x="67.6609%" y="351.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.01%)</title><rect x="67.4848%" y="325" width="0.0148%" height="15" fill="rgb(247,138,52)" fg:x="4564" fg:w="1"/><text x="67.7348%" y="335.50"></text></g><g><title>colors`&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="67.4996%" y="325" width="0.0148%" height="15" fill="rgb(213,79,30)" fg:x="4565" fg:w="1"/><text x="67.7496%" y="335.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4 samples, 0.06%)</title><rect x="67.5144%" y="325" width="0.0591%" height="15" fill="rgb(246,177,23)" fg:x="4566" fg:w="4"/><text x="67.7644%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.04%)</title><rect x="67.5292%" y="309" width="0.0444%" height="15" fill="rgb(230,62,27)" fg:x="4567" fg:w="3"/><text x="67.7792%" y="319.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.03%)</title><rect x="67.6179%" y="309" width="0.0296%" height="15" fill="rgb(216,154,8)" fg:x="4573" fg:w="2"/><text x="67.8679%" y="319.50"></text></g><g><title>colors`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.03%)</title><rect x="67.6475%" y="309" width="0.0296%" height="15" fill="rgb(244,35,45)" fg:x="4575" fg:w="2"/><text x="67.8975%" y="319.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="67.6771%" y="309" width="0.0148%" height="15" fill="rgb(251,115,12)" fg:x="4577" fg:w="1"/><text x="67.9271%" y="319.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (1 samples, 0.01%)</title><rect x="67.7954%" y="293" width="0.0148%" height="15" fill="rgb(240,54,50)" fg:x="4585" fg:w="1"/><text x="68.0454%" y="303.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="67.8101%" y="293" width="0.0148%" height="15" fill="rgb(233,84,52)" fg:x="4586" fg:w="1"/><text x="68.0601%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.01%)</title><rect x="84.0751%" y="197" width="0.0148%" height="15" fill="rgb(207,117,47)" fg:x="5686" fg:w="1"/><text x="84.3251%" y="207.50"></text></g><g><title>colors`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (8 samples, 0.12%)</title><rect x="84.0012%" y="245" width="0.1183%" height="15" fill="rgb(249,43,39)" fg:x="5681" fg:w="8"/><text x="84.2512%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.07%)</title><rect x="84.0455%" y="229" width="0.0739%" height="15" fill="rgb(209,38,44)" fg:x="5684" fg:w="5"/><text x="84.2955%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.06%)</title><rect x="84.0603%" y="213" width="0.0591%" height="15" fill="rgb(236,212,23)" fg:x="5685" fg:w="4"/><text x="84.3103%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.03%)</title><rect x="84.0899%" y="197" width="0.0296%" height="15" fill="rgb(242,79,21)" fg:x="5687" fg:w="2"/><text x="84.3399%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.01%)</title><rect x="84.1047%" y="181" width="0.0148%" height="15" fill="rgb(211,96,35)" fg:x="5688" fg:w="1"/><text x="84.3547%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.01%)</title><rect x="84.1195%" y="245" width="0.0148%" height="15" fill="rgb(253,215,40)" fg:x="5689" fg:w="1"/><text x="84.3695%" y="255.50"></text></g><g><title>colors`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (16 samples, 0.24%)</title><rect x="83.9716%" y="261" width="0.2366%" height="15" fill="rgb(211,81,21)" fg:x="5679" fg:w="16"/><text x="84.2216%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.07%)</title><rect x="84.1343%" y="245" width="0.0739%" height="15" fill="rgb(208,190,38)" fg:x="5690" fg:w="5"/><text x="84.3843%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.07%)</title><rect x="84.1343%" y="229" width="0.0739%" height="15" fill="rgb(235,213,38)" fg:x="5690" fg:w="5"/><text x="84.3843%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.06%)</title><rect x="84.1490%" y="213" width="0.0591%" height="15" fill="rgb(237,122,38)" fg:x="5691" fg:w="4"/><text x="84.3990%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.01%)</title><rect x="84.1934%" y="197" width="0.0148%" height="15" fill="rgb(244,218,35)" fg:x="5694" fg:w="1"/><text x="84.4434%" y="207.50"></text></g><g><title>colors`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (1 samples, 0.01%)</title><rect x="84.2082%" y="245" width="0.0148%" height="15" fill="rgb(240,68,47)" fg:x="5695" fg:w="1"/><text x="84.4582%" y="255.50"></text></g><g><title>colors`alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (2 samples, 0.03%)</title><rect x="84.2082%" y="261" width="0.0296%" height="15" fill="rgb(210,16,53)" fg:x="5695" fg:w="2"/><text x="84.4582%" y="271.50"></text></g><g><title>colors`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (1 samples, 0.01%)</title><rect x="84.2230%" y="245" width="0.0148%" height="15" fill="rgb(235,124,12)" fg:x="5696" fg:w="1"/><text x="84.4730%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="84.2230%" y="229" width="0.0148%" height="15" fill="rgb(224,169,11)" fg:x="5696" fg:w="1"/><text x="84.4730%" y="239.50"></text></g><g><title>colors`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (3 samples, 0.04%)</title><rect x="84.2378%" y="261" width="0.0444%" height="15" fill="rgb(250,166,2)" fg:x="5697" fg:w="3"/><text x="84.4878%" y="271.50"></text></g><g><title>colors`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (25 samples, 0.37%)</title><rect x="84.2821%" y="261" width="0.3697%" height="15" fill="rgb(242,216,29)" fg:x="5700" fg:w="25"/><text x="84.5321%" y="271.50"></text></g><g><title>colors`core::str::count::char_count_general_case (1 samples, 0.01%)</title><rect x="84.6518%" y="261" width="0.0148%" height="15" fill="rgb(230,116,27)" fg:x="5725" fg:w="1"/><text x="84.9018%" y="271.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (11 samples, 0.16%)</title><rect x="84.6666%" y="261" width="0.1626%" height="15" fill="rgb(228,99,48)" fg:x="5726" fg:w="11"/><text x="84.9166%" y="271.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_supported_codepoints_in_word::_{{closure}} (16 samples, 0.24%)</title><rect x="84.8292%" y="261" width="0.2366%" height="15" fill="rgb(253,11,6)" fg:x="5737" fg:w="16"/><text x="85.0792%" y="271.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (1,166 samples, 17.24%)</title><rect x="67.8397%" y="277" width="17.2409%" height="15" fill="rgb(247,143,39)" fg:x="4588" fg:w="1166"/><text x="68.0897%" y="287.50">colors`&lt;cosmic_text::font::..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="85.0658%" y="261" width="0.0148%" height="15" fill="rgb(236,97,10)" fg:x="5753" fg:w="1"/><text x="85.3158%" y="271.50"></text></g><g><title>colors`DYLD-STUB$$memcmp (1 samples, 0.01%)</title><rect x="85.0806%" y="277" width="0.0148%" height="15" fill="rgb(233,208,19)" fg:x="5754" fg:w="1"/><text x="85.3306%" y="287.50"></text></g><g><title>colors`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.01%)</title><rect x="85.0954%" y="277" width="0.0148%" height="15" fill="rgb(216,164,2)" fg:x="5755" fg:w="1"/><text x="85.3454%" y="287.50"></text></g><g><title>colors`core::str::count::char_count_general_case (1 samples, 0.01%)</title><rect x="85.1102%" y="277" width="0.0148%" height="15" fill="rgb(220,129,5)" fg:x="5756" fg:w="1"/><text x="85.3602%" y="287.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (3 samples, 0.04%)</title><rect x="85.1249%" y="277" width="0.0444%" height="15" fill="rgb(242,17,10)" fg:x="5757" fg:w="3"/><text x="85.3749%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.03%)</title><rect x="85.2432%" y="213" width="0.0296%" height="15" fill="rgb(242,107,0)" fg:x="5765" fg:w="2"/><text x="85.4932%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.12%)</title><rect x="85.1693%" y="245" width="0.1183%" height="15" fill="rgb(251,28,31)" fg:x="5760" fg:w="8"/><text x="85.4193%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.10%)</title><rect x="85.1841%" y="229" width="0.1035%" height="15" fill="rgb(233,223,10)" fg:x="5761" fg:w="7"/><text x="85.4341%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="85.2728%" y="213" width="0.0148%" height="15" fill="rgb(215,21,27)" fg:x="5767" fg:w="1"/><text x="85.5228%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.03%)</title><rect x="85.2876%" y="245" width="0.0296%" height="15" fill="rgb(232,23,21)" fg:x="5768" fg:w="2"/><text x="85.5376%" y="255.50"></text></g><g><title>colors`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.16%)</title><rect x="85.1693%" y="261" width="0.1626%" height="15" fill="rgb(244,5,23)" fg:x="5760" fg:w="11"/><text x="85.4193%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="85.3172%" y="245" width="0.0148%" height="15" fill="rgb(226,81,46)" fg:x="5770" fg:w="1"/><text x="85.5672%" y="255.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="85.3320%" y="261" width="0.0148%" height="15" fill="rgb(247,70,30)" fg:x="5771" fg:w="1"/><text x="85.5820%" y="271.50"></text></g><g><title>colors`cosmic_text::font::fallback::FontFallbackIter::new (14 samples, 0.21%)</title><rect x="85.1693%" y="277" width="0.2070%" height="15" fill="rgb(212,68,19)" fg:x="5760" fg:w="14"/><text x="85.4193%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.03%)</title><rect x="85.3467%" y="261" width="0.0296%" height="15" fill="rgb(240,187,13)" fg:x="5772" fg:w="2"/><text x="85.5967%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.03%)</title><rect x="85.3467%" y="245" width="0.0296%" height="15" fill="rgb(223,113,26)" fg:x="5772" fg:w="2"/><text x="85.5967%" y="255.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (23 samples, 0.34%)</title><rect x="85.3763%" y="277" width="0.3401%" height="15" fill="rgb(206,192,2)" fg:x="5774" fg:w="23"/><text x="85.6263%" y="287.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_matches (1 samples, 0.01%)</title><rect x="85.7164%" y="277" width="0.0148%" height="15" fill="rgb(241,108,4)" fg:x="5797" fg:w="1"/><text x="85.9664%" y="287.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_supported_codepoints_in_word::_{{closure}} (1 samples, 0.01%)</title><rect x="85.7312%" y="277" width="0.0148%" height="15" fill="rgb(247,173,49)" fg:x="5798" fg:w="1"/><text x="85.9812%" y="287.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="85.8051%" y="261" width="0.0148%" height="15" fill="rgb(224,114,35)" fg:x="5803" fg:w="1"/><text x="86.0551%" y="271.50"></text></g><g><title>colors`__rdl_alloc (1 samples, 0.01%)</title><rect x="85.8199%" y="245" width="0.0148%" height="15" fill="rgb(245,159,27)" fg:x="5804" fg:w="1"/><text x="86.0699%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.01%)</title><rect x="85.8347%" y="229" width="0.0148%" height="15" fill="rgb(245,172,44)" fg:x="5805" fg:w="1"/><text x="86.0847%" y="239.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.04%)</title><rect x="85.8199%" y="261" width="0.0444%" height="15" fill="rgb(236,23,11)" fg:x="5804" fg:w="3"/><text x="86.0699%" y="271.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="85.8347%" y="245" width="0.0296%" height="15" fill="rgb(205,117,38)" fg:x="5805" fg:w="2"/><text x="86.0847%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.01%)</title><rect x="85.8495%" y="229" width="0.0148%" height="15" fill="rgb(237,72,25)" fg:x="5806" fg:w="1"/><text x="86.0995%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.01%)</title><rect x="85.8643%" y="245" width="0.0148%" height="15" fill="rgb(244,70,9)" fg:x="5807" fg:w="1"/><text x="86.1143%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.04%)</title><rect x="85.8790%" y="245" width="0.0444%" height="15" fill="rgb(217,125,39)" fg:x="5808" fg:w="3"/><text x="86.1290%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.01%)</title><rect x="85.9234%" y="245" width="0.0148%" height="15" fill="rgb(235,36,10)" fg:x="5811" fg:w="1"/><text x="86.1734%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.01%)</title><rect x="85.9382%" y="245" width="0.0148%" height="15" fill="rgb(251,123,47)" fg:x="5812" fg:w="1"/><text x="86.1882%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.01%)</title><rect x="85.9382%" y="229" width="0.0148%" height="15" fill="rgb(221,13,13)" fg:x="5812" fg:w="1"/><text x="86.1882%" y="239.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.01%)</title><rect x="85.9530%" y="245" width="0.0148%" height="15" fill="rgb(238,131,9)" fg:x="5813" fg:w="1"/><text x="86.2030%" y="255.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t&gt; (8 samples, 0.12%)</title><rect x="85.8643%" y="261" width="0.1183%" height="15" fill="rgb(211,50,8)" fg:x="5807" fg:w="8"/><text x="86.1143%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="85.9678%" y="245" width="0.0148%" height="15" fill="rgb(245,182,24)" fg:x="5814" fg:w="1"/><text x="86.2178%" y="255.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (2 samples, 0.03%)</title><rect x="85.9826%" y="261" width="0.0296%" height="15" fill="rgb(242,14,37)" fg:x="5815" fg:w="2"/><text x="86.2326%" y="271.50"></text></g><g><title>colors`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (1 samples, 0.01%)</title><rect x="85.9973%" y="245" width="0.0148%" height="15" fill="rgb(246,228,12)" fg:x="5816" fg:w="1"/><text x="86.2473%" y="255.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::guess_segment_properties (1 samples, 0.01%)</title><rect x="86.0121%" y="261" width="0.0148%" height="15" fill="rgb(213,55,15)" fg:x="5817" fg:w="1"/><text x="86.2621%" y="271.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (1 samples, 0.01%)</title><rect x="86.0121%" y="245" width="0.0148%" height="15" fill="rgb(209,9,3)" fg:x="5817" fg:w="1"/><text x="86.2621%" y="255.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_complex::hb_ot_shape_complex_categorize (4 samples, 0.06%)</title><rect x="86.0269%" y="261" width="0.0591%" height="15" fill="rgb(230,59,30)" fg:x="5818" fg:w="4"/><text x="86.2769%" y="271.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::select_script (2 samples, 0.03%)</title><rect x="86.0861%" y="245" width="0.0296%" height="15" fill="rgb(209,121,21)" fg:x="5822" fg:w="2"/><text x="86.3361%" y="255.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="86.1156%" y="245" width="0.0148%" height="15" fill="rgb(220,109,13)" fg:x="5824" fg:w="1"/><text x="86.3656%" y="255.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Script as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (2 samples, 0.03%)</title><rect x="86.1304%" y="229" width="0.0296%" height="15" fill="rgb(232,18,1)" fg:x="5825" fg:w="2"/><text x="86.3804%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::new (18 samples, 0.27%)</title><rect x="86.1304%" y="245" width="0.2662%" height="15" fill="rgb(215,41,42)" fg:x="5825" fg:w="18"/><text x="86.3804%" y="255.50"></text></g><g><title>colors`rustybuzz::hb::tag::tags_from_script_and_language (16 samples, 0.24%)</title><rect x="86.1600%" y="229" width="0.2366%" height="15" fill="rgb(224,123,36)" fg:x="5827" fg:w="16"/><text x="86.4100%" y="239.50"></text></g><g><title>colors`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="86.5001%" y="213" width="0.0148%" height="15" fill="rgb(240,125,3)" fg:x="5850" fg:w="1"/><text x="86.7501%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="86.6036%" y="149" width="0.0148%" height="15" fill="rgb(205,98,50)" fg:x="5857" fg:w="1"/><text x="86.8536%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.04%)</title><rect x="86.6036%" y="165" width="0.0444%" height="15" fill="rgb(205,185,37)" fg:x="5857" fg:w="3"/><text x="86.8536%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="86.6184%" y="149" width="0.0296%" height="15" fill="rgb(238,207,15)" fg:x="5858" fg:w="2"/><text x="86.8684%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="86.6184%" y="133" width="0.0296%" height="15" fill="rgb(213,199,42)" fg:x="5858" fg:w="2"/><text x="86.8684%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.03%)</title><rect x="86.6184%" y="117" width="0.0296%" height="15" fill="rgb(235,201,11)" fg:x="5858" fg:w="2"/><text x="86.8684%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.04%)</title><rect x="86.6479%" y="149" width="0.0444%" height="15" fill="rgb(207,46,11)" fg:x="5860" fg:w="3"/><text x="86.8979%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.03%)</title><rect x="86.6627%" y="133" width="0.0296%" height="15" fill="rgb(241,35,35)" fg:x="5861" fg:w="2"/><text x="86.9127%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.03%)</title><rect x="86.6923%" y="149" width="0.0296%" height="15" fill="rgb(243,32,47)" fg:x="5863" fg:w="2"/><text x="86.9423%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.01%)</title><rect x="86.7071%" y="133" width="0.0148%" height="15" fill="rgb(247,202,23)" fg:x="5864" fg:w="1"/><text x="86.9571%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.10%)</title><rect x="86.6479%" y="165" width="0.1035%" height="15" fill="rgb(219,102,11)" fg:x="5860" fg:w="7"/><text x="86.8979%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.03%)</title><rect x="86.7219%" y="149" width="0.0296%" height="15" fill="rgb(243,110,44)" fg:x="5865" fg:w="2"/><text x="86.9719%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.01%)</title><rect x="86.7367%" y="133" width="0.0148%" height="15" fill="rgb(222,74,54)" fg:x="5866" fg:w="1"/><text x="86.9867%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.01%)</title><rect x="86.7514%" y="165" width="0.0148%" height="15" fill="rgb(216,99,12)" fg:x="5867" fg:w="1"/><text x="87.0014%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (17 samples, 0.25%)</title><rect x="86.5740%" y="181" width="0.2514%" height="15" fill="rgb(226,22,26)" fg:x="5855" fg:w="17"/><text x="86.8240%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.06%)</title><rect x="86.7662%" y="165" width="0.0591%" height="15" fill="rgb(217,163,10)" fg:x="5868" fg:w="4"/><text x="87.0162%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (19 samples, 0.28%)</title><rect x="86.5592%" y="197" width="0.2809%" height="15" fill="rgb(213,25,53)" fg:x="5854" fg:w="19"/><text x="86.8092%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.01%)</title><rect x="86.8254%" y="181" width="0.0148%" height="15" fill="rgb(252,105,26)" fg:x="5872" fg:w="1"/><text x="87.0754%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.01%)</title><rect x="86.8254%" y="165" width="0.0148%" height="15" fill="rgb(220,39,43)" fg:x="5872" fg:w="1"/><text x="87.0754%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::collect_features (32 samples, 0.47%)</title><rect x="86.3966%" y="245" width="0.4732%" height="15" fill="rgb(229,68,48)" fg:x="5843" fg:w="32"/><text x="86.6466%" y="255.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (27 samples, 0.40%)</title><rect x="86.4705%" y="229" width="0.3992%" height="15" fill="rgb(252,8,32)" fg:x="5848" fg:w="27"/><text x="86.7205%" y="239.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (24 samples, 0.35%)</title><rect x="86.5149%" y="213" width="0.3549%" height="15" fill="rgb(223,20,43)" fg:x="5851" fg:w="24"/><text x="86.7649%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.03%)</title><rect x="86.8402%" y="197" width="0.0296%" height="15" fill="rgb(229,81,49)" fg:x="5873" fg:w="2"/><text x="87.0902%" y="207.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::find_language_feature (10 samples, 0.15%)</title><rect x="86.9141%" y="229" width="0.1479%" height="15" fill="rgb(236,28,36)" fg:x="5878" fg:w="10"/><text x="87.1641%" y="239.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::insert_tail (9 samples, 0.13%)</title><rect x="87.0620%" y="229" width="0.1331%" height="15" fill="rgb(249,185,26)" fg:x="5888" fg:w="9"/><text x="87.3120%" y="239.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Feature as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (37 samples, 0.55%)</title><rect x="87.6682%" y="213" width="0.5471%" height="15" fill="rgb(249,174,33)" fg:x="5929" fg:w="37"/><text x="87.9182%" y="223.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::find_language_feature (117 samples, 1.73%)</title><rect x="88.2153%" y="213" width="1.7300%" height="15" fill="rgb(233,201,37)" fg:x="5966" fg:w="117"/><text x="88.4653%" y="223.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::get_required_language_feature (2 samples, 0.03%)</title><rect x="89.9453%" y="213" width="0.0296%" height="15" fill="rgb(221,78,26)" fg:x="6083" fg:w="2"/><text x="90.1953%" y="223.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Script as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (19 samples, 0.28%)</title><rect x="89.9749%" y="213" width="0.2809%" height="15" fill="rgb(250,127,30)" fg:x="6085" fg:w="19"/><text x="90.2249%" y="223.50"></text></g><g><title>colors`__rdl_alloc (1 samples, 0.01%)</title><rect x="90.3002%" y="197" width="0.0148%" height="15" fill="rgb(230,49,44)" fg:x="6107" fg:w="1"/><text x="90.5502%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.03%)</title><rect x="90.3445%" y="181" width="0.0296%" height="15" fill="rgb(229,67,23)" fg:x="6110" fg:w="2"/><text x="90.5945%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="90.4480%" y="149" width="0.0148%" height="15" fill="rgb(249,83,47)" fg:x="6117" fg:w="1"/><text x="90.6980%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.09%)</title><rect x="90.4628%" y="149" width="0.0887%" height="15" fill="rgb(215,43,3)" fg:x="6118" fg:w="6"/><text x="90.7128%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.06%)</title><rect x="90.5663%" y="133" width="0.0591%" height="15" fill="rgb(238,154,13)" fg:x="6125" fg:w="4"/><text x="90.8163%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="90.6255%" y="133" width="0.0148%" height="15" fill="rgb(219,56,2)" fg:x="6129" fg:w="1"/><text x="90.8755%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.01%)</title><rect x="90.6402%" y="117" width="0.0148%" height="15" fill="rgb(233,0,4)" fg:x="6130" fg:w="1"/><text x="90.8902%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (8 samples, 0.12%)</title><rect x="90.5515%" y="149" width="0.1183%" height="15" fill="rgb(235,30,7)" fg:x="6124" fg:w="8"/><text x="90.8015%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="90.6402%" y="133" width="0.0296%" height="15" fill="rgb(250,79,13)" fg:x="6130" fg:w="2"/><text x="90.8902%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.01%)</title><rect x="90.6550%" y="117" width="0.0148%" height="15" fill="rgb(211,146,34)" fg:x="6131" fg:w="1"/><text x="90.9050%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (24 samples, 0.35%)</title><rect x="90.3741%" y="181" width="0.3549%" height="15" fill="rgb(228,22,38)" fg:x="6112" fg:w="24"/><text x="90.6241%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (20 samples, 0.30%)</title><rect x="90.4332%" y="165" width="0.2957%" height="15" fill="rgb(235,168,5)" fg:x="6116" fg:w="20"/><text x="90.6832%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.06%)</title><rect x="90.6698%" y="149" width="0.0591%" height="15" fill="rgb(221,155,16)" fg:x="6132" fg:w="4"/><text x="90.9198%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.03%)</title><rect x="90.7290%" y="181" width="0.0296%" height="15" fill="rgb(215,215,53)" fg:x="6136" fg:w="2"/><text x="90.9790%" y="191.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (31 samples, 0.46%)</title><rect x="90.3149%" y="197" width="0.4584%" height="15" fill="rgb(223,4,10)" fg:x="6108" fg:w="31"/><text x="90.5649%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.01%)</title><rect x="90.7585%" y="181" width="0.0148%" height="15" fill="rgb(234,103,6)" fg:x="6138" fg:w="1"/><text x="91.0085%" y="191.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (37 samples, 0.55%)</title><rect x="90.2558%" y="213" width="0.5471%" height="15" fill="rgb(227,97,0)" fg:x="6104" fg:w="37"/><text x="90.5058%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.03%)</title><rect x="90.7733%" y="197" width="0.0296%" height="15" fill="rgb(234,150,53)" fg:x="6139" fg:w="2"/><text x="91.0233%" y="207.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (22 samples, 0.33%)</title><rect x="90.8177%" y="165" width="0.3253%" height="15" fill="rgb(228,201,54)" fg:x="6142" fg:w="22"/><text x="91.0677%" y="175.50"></text></g><g><title>colors`core::slice::sort::stable::drift::sort (25 samples, 0.37%)</title><rect x="90.8029%" y="197" width="0.3697%" height="15" fill="rgb(222,22,37)" fg:x="6141" fg:w="25"/><text x="91.0529%" y="207.50"></text></g><g><title>colors`core::slice::sort::stable::quicksort::quicksort (24 samples, 0.35%)</title><rect x="90.8177%" y="181" width="0.3549%" height="15" fill="rgb(237,53,32)" fg:x="6142" fg:w="24"/><text x="91.0677%" y="191.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::sort4_stable (2 samples, 0.03%)</title><rect x="91.1430%" y="165" width="0.0296%" height="15" fill="rgb(233,25,53)" fg:x="6164" fg:w="2"/><text x="91.3930%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::compile (270 samples, 3.99%)</title><rect x="87.1950%" y="229" width="3.9923%" height="15" fill="rgb(210,40,34)" fg:x="5897" fg:w="270"/><text x="87.4450%" y="239.50">colo..</text></g><g><title>colors`core::slice::sort::stable::driftsort_main (26 samples, 0.38%)</title><rect x="90.8029%" y="213" width="0.3844%" height="15" fill="rgb(241,220,44)" fg:x="6141" fg:w="26"/><text x="91.0529%" y="223.50"></text></g><g><title>colors`core::slice::sort::stable::quicksort::quicksort (1 samples, 0.01%)</title><rect x="91.1726%" y="197" width="0.0148%" height="15" fill="rgb(235,28,35)" fg:x="6166" fg:w="1"/><text x="91.4226%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.03%)</title><rect x="91.1873%" y="229" width="0.0296%" height="15" fill="rgb(210,56,17)" fg:x="6167" fg:w="2"/><text x="91.4373%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.01%)</title><rect x="91.2169%" y="229" width="0.0148%" height="15" fill="rgb(224,130,29)" fg:x="6169" fg:w="1"/><text x="91.4669%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::compile (297 samples, 4.39%)</title><rect x="86.8697%" y="245" width="4.3915%" height="15" fill="rgb(235,212,8)" fg:x="5875" fg:w="297"/><text x="87.1197%" y="255.50">color..</text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.03%)</title><rect x="91.2317%" y="229" width="0.0296%" height="15" fill="rgb(223,33,50)" fg:x="6170" fg:w="2"/><text x="91.4817%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::tag::tags_from_script_and_language (1 samples, 0.01%)</title><rect x="91.2613%" y="245" width="0.0148%" height="15" fill="rgb(219,149,13)" fg:x="6172" fg:w="1"/><text x="91.5113%" y="255.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t::new (353 samples, 5.22%)</title><rect x="86.0861%" y="261" width="5.2196%" height="15" fill="rgb(250,156,29)" fg:x="5822" fg:w="353"/><text x="86.3361%" y="271.50">colors..</text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.03%)</title><rect x="91.2761%" y="245" width="0.0296%" height="15" fill="rgb(216,193,19)" fg:x="6173" fg:w="2"/><text x="91.5261%" y="255.50"></text></g><g><title>colors`&lt;char as rustybuzz::hb::unicode::CharExt&gt;::script (1 samples, 0.01%)</title><rect x="91.3352%" y="229" width="0.0148%" height="15" fill="rgb(216,135,14)" fg:x="6177" fg:w="1"/><text x="91.5852%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::guess_segment_properties (4 samples, 0.06%)</title><rect x="91.3204%" y="245" width="0.0591%" height="15" fill="rgb(241,47,5)" fg:x="6176" fg:w="4"/><text x="91.5704%" y="255.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (2 samples, 0.03%)</title><rect x="91.3500%" y="229" width="0.0296%" height="15" fill="rgb(233,42,35)" fg:x="6178" fg:w="2"/><text x="91.6000%" y="239.50"></text></g><g><title>colors`&lt;char as unicode_properties::general_category::UnicodeGeneralCategory&gt;::general_category (1 samples, 0.01%)</title><rect x="91.4387%" y="229" width="0.0148%" height="15" fill="rgb(231,13,6)" fg:x="6184" fg:w="1"/><text x="91.6887%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::sync (1 samples, 0.01%)</title><rect x="91.4535%" y="229" width="0.0148%" height="15" fill="rgb(207,181,40)" fg:x="6185" fg:w="1"/><text x="91.7035%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_glyph_info_t::init_unicode_props (3 samples, 0.04%)</title><rect x="91.4683%" y="229" width="0.0444%" height="15" fill="rgb(254,173,49)" fg:x="6186" fg:w="3"/><text x="91.7183%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::ot_layout::apply_layout_table (27 samples, 0.40%)</title><rect x="91.5126%" y="229" width="0.3992%" height="15" fill="rgb(221,1,38)" fg:x="6189" fg:w="27"/><text x="91.7626%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::sync (3 samples, 0.04%)</title><rect x="91.8675%" y="213" width="0.0444%" height="15" fill="rgb(206,124,46)" fg:x="6213" fg:w="3"/><text x="92.1175%" y="223.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::next_glyphs (2 samples, 0.03%)</title><rect x="91.8823%" y="197" width="0.0296%" height="15" fill="rgb(249,21,11)" fg:x="6214" fg:w="2"/><text x="92.1323%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::next_glyphs (1 samples, 0.01%)</title><rect x="91.9267%" y="213" width="0.0148%" height="15" fill="rgb(222,201,40)" fg:x="6217" fg:w="1"/><text x="92.1767%" y="223.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::sync (5 samples, 0.07%)</title><rect x="91.9414%" y="213" width="0.0739%" height="15" fill="rgb(235,61,29)" fg:x="6218" fg:w="5"/><text x="92.1914%" y="223.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::get_nominal_glyph (2 samples, 0.03%)</title><rect x="92.0154%" y="213" width="0.0296%" height="15" fill="rgb(219,207,3)" fg:x="6223" fg:w="2"/><text x="92.2654%" y="223.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_normalize::_hb_ot_shape_normalize (16 samples, 0.24%)</title><rect x="91.9119%" y="229" width="0.2366%" height="15" fill="rgb(222,56,46)" fg:x="6216" fg:w="16"/><text x="92.1619%" y="239.50"></text></g><g><title>colors`ttf_parser::tables::cmap::format12::Subtable12::glyph_index (7 samples, 0.10%)</title><rect x="92.0450%" y="213" width="0.1035%" height="15" fill="rgb(239,76,54)" fg:x="6225" fg:w="7"/><text x="92.2950%" y="223.50"></text></g><g><title>colors`rustybuzz::hb::shape::shape_with_plan (58 samples, 0.86%)</title><rect x="91.3056%" y="261" width="0.8576%" height="15" fill="rgb(231,124,27)" fg:x="6175" fg:w="58"/><text x="91.5556%" y="271.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::shape_internal (53 samples, 0.78%)</title><rect x="91.3796%" y="245" width="0.7837%" height="15" fill="rgb(249,195,6)" fg:x="6180" fg:w="53"/><text x="91.6296%" y="255.50"></text></g><g><title>colors`ttf_parser::ggg::ClassDefinition::get (1 samples, 0.01%)</title><rect x="92.1485%" y="229" width="0.0148%" height="15" fill="rgb(237,174,47)" fg:x="6232" fg:w="1"/><text x="92.3985%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.04%)</title><rect x="92.1632%" y="261" width="0.0444%" height="15" fill="rgb(206,201,31)" fg:x="6233" fg:w="3"/><text x="92.4132%" y="271.50"></text></g><g><title>colors`cosmic_text::shape::shape_fallback (438 samples, 6.48%)</title><rect x="85.7460%" y="277" width="6.4764%" height="15" fill="rgb(231,57,52)" fg:x="5799" fg:w="438"/><text x="85.9960%" y="287.50">colors`c..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="92.2076%" y="261" width="0.0148%" height="15" fill="rgb(248,177,22)" fg:x="6236" fg:w="1"/><text x="92.4576%" y="271.50"></text></g><g><title>colors`fontdb::Database::face (43 samples, 0.64%)</title><rect x="92.2224%" y="277" width="0.6358%" height="15" fill="rgb(215,211,37)" fg:x="6237" fg:w="43"/><text x="92.4724%" y="287.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::clear (1 samples, 0.01%)</title><rect x="92.8582%" y="277" width="0.0148%" height="15" fill="rgb(241,128,51)" fg:x="6280" fg:w="1"/><text x="93.1082%" y="287.50"></text></g><g><title>colors`rustybuzz::hb::shape::shape_with_plan (1 samples, 0.01%)</title><rect x="92.8730%" y="277" width="0.0148%" height="15" fill="rgb(227,165,31)" fg:x="6281" fg:w="1"/><text x="93.1230%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (1,700 samples, 25.14%)</title><rect x="67.8249%" y="293" width="25.1368%" height="15" fill="rgb(228,167,24)" fg:x="4587" fg:w="1700"/><text x="68.0749%" y="303.50">colors`cosmic_text::shape::Shaping::run</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (5 samples, 0.07%)</title><rect x="92.8878%" y="277" width="0.0739%" height="15" fill="rgb(228,143,12)" fg:x="6282" fg:w="5"/><text x="93.1378%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (1,710 samples, 25.28%)</title><rect x="67.6919%" y="309" width="25.2846%" height="15" fill="rgb(249,149,8)" fg:x="4578" fg:w="1710"/><text x="67.9419%" y="319.50">colors`cosmic_text::shape::ShapeWord::bu..</text></g><g><title>colors`unicode_segmentation::grapheme::GraphemeCursor::grapheme_category (1 samples, 0.01%)</title><rect x="92.9617%" y="293" width="0.0148%" height="15" fill="rgb(243,35,44)" fg:x="6287" fg:w="1"/><text x="93.2117%" y="303.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (1,719 samples, 25.42%)</title><rect x="67.5736%" y="325" width="25.4177%" height="15" fill="rgb(246,89,9)" fg:x="4570" fg:w="1719"/><text x="67.8236%" y="335.50">colors`cosmic_text::shape::ShapeSpan::bui..</text></g><g><title>colors`unicode_segmentation::grapheme::GraphemeCursor::grapheme_category (1 samples, 0.01%)</title><rect x="92.9765%" y="309" width="0.0148%" height="15" fill="rgb(233,213,13)" fg:x="6288" fg:w="1"/><text x="93.2265%" y="319.50"></text></g><g><title>colors`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="93.1096%" y="293" width="0.0148%" height="15" fill="rgb(233,141,41)" fg:x="6297" fg:w="1"/><text x="93.3596%" y="303.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="93.1244%" y="293" width="0.0148%" height="15" fill="rgb(239,167,4)" fg:x="6298" fg:w="1"/><text x="93.3744%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.01%)</title><rect x="93.1244%" y="277" width="0.0148%" height="15" fill="rgb(209,217,16)" fg:x="6298" fg:w="1"/><text x="93.3744%" y="287.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.07%)</title><rect x="93.0948%" y="309" width="0.0739%" height="15" fill="rgb(219,88,35)" fg:x="6296" fg:w="5"/><text x="93.3448%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.03%)</title><rect x="93.1391%" y="293" width="0.0296%" height="15" fill="rgb(220,193,23)" fg:x="6299" fg:w="2"/><text x="93.3891%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="93.1687%" y="309" width="0.0148%" height="15" fill="rgb(230,90,52)" fg:x="6301" fg:w="1"/><text x="93.4187%" y="319.50"></text></g><g><title>colors`unicode_bidi::BidiInfo::new_with_data_source (17 samples, 0.25%)</title><rect x="92.9913%" y="325" width="0.2514%" height="15" fill="rgb(252,106,19)" fg:x="6289" fg:w="17"/><text x="93.2413%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (4 samples, 0.06%)</title><rect x="93.1835%" y="309" width="0.0591%" height="15" fill="rgb(206,74,20)" fg:x="6302" fg:w="4"/><text x="93.4335%" y="319.50"></text></g><g><title>colors`unicode_bidi::char_data::bsearch_range_value_table (2 samples, 0.03%)</title><rect x="93.2426%" y="325" width="0.0296%" height="15" fill="rgb(230,138,44)" fg:x="6306" fg:w="2"/><text x="93.4926%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.03%)</title><rect x="93.2722%" y="325" width="0.0296%" height="15" fill="rgb(235,182,43)" fg:x="6308" fg:w="2"/><text x="93.5222%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="93.3018%" y="325" width="0.0148%" height="15" fill="rgb(242,16,51)" fg:x="6310" fg:w="1"/><text x="93.5518%" y="335.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (1,750 samples, 25.88%)</title><rect x="67.4553%" y="341" width="25.8761%" height="15" fill="rgb(248,9,4)" fg:x="4562" fg:w="1750"/><text x="67.7053%" y="351.50">colors`cosmic_text::shape::ShapeLine::bui..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.01%)</title><rect x="93.3166%" y="325" width="0.0148%" height="15" fill="rgb(210,31,22)" fg:x="6311" fg:w="1"/><text x="93.5666%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.04%)</title><rect x="93.3314%" y="341" width="0.0444%" height="15" fill="rgb(239,54,39)" fg:x="6312" fg:w="3"/><text x="93.5814%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="93.3757%" y="341" width="0.0148%" height="15" fill="rgb(230,99,41)" fg:x="6315" fg:w="1"/><text x="93.6257%" y="351.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (1,759 samples, 26.01%)</title><rect x="67.4109%" y="357" width="26.0092%" height="15" fill="rgb(253,106,12)" fg:x="4559" fg:w="1759"/><text x="67.6609%" y="367.50">colors`cosmic_text::buffer_line::BufferLin..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.03%)</title><rect x="93.3905%" y="341" width="0.0296%" height="15" fill="rgb(213,46,41)" fg:x="6316" fg:w="2"/><text x="93.6405%" y="351.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.03%)</title><rect x="93.4792%" y="341" width="0.0296%" height="15" fill="rgb(215,133,35)" fg:x="6322" fg:w="2"/><text x="93.7292%" y="351.50"></text></g><g><title>colors`&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="93.4940%" y="325" width="0.0148%" height="15" fill="rgb(213,28,5)" fg:x="6323" fg:w="1"/><text x="93.7440%" y="335.50"></text></g><g><title>colors`__rdl_dealloc (1 samples, 0.01%)</title><rect x="93.5088%" y="341" width="0.0148%" height="15" fill="rgb(215,77,49)" fg:x="6324" fg:w="1"/><text x="93.7588%" y="351.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer::_{{closure}} (1 samples, 0.01%)</title><rect x="93.5236%" y="341" width="0.0148%" height="15" fill="rgb(248,100,22)" fg:x="6325" fg:w="1"/><text x="93.7736%" y="351.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (1,773 samples, 26.22%)</title><rect x="67.3813%" y="373" width="26.2162%" height="15" fill="rgb(208,67,9)" fg:x="4557" fg:w="1773"/><text x="67.6313%" y="383.50">colors`cosmic_text::buffer_line::BufferLin..</text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer (12 samples, 0.18%)</title><rect x="93.4201%" y="357" width="0.1774%" height="15" fill="rgb(219,133,21)" fg:x="6318" fg:w="12"/><text x="93.6701%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.06%)</title><rect x="93.5384%" y="341" width="0.0591%" height="15" fill="rgb(246,46,29)" fg:x="6326" fg:w="4"/><text x="93.7884%" y="351.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (1,774 samples, 26.23%)</title><rect x="67.3813%" y="389" width="26.2310%" height="15" fill="rgb(246,185,52)" fg:x="4557" fg:w="1774"/><text x="67.6313%" y="399.50">colors`cosmic_text::buffer::Buffer::shape_..</text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.01%)</title><rect x="93.5975%" y="373" width="0.0148%" height="15" fill="rgb(252,136,11)" fg:x="6330" fg:w="1"/><text x="93.8475%" y="383.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (1 samples, 0.01%)</title><rect x="93.6123%" y="389" width="0.0148%" height="15" fill="rgb(219,138,53)" fg:x="6331" fg:w="1"/><text x="93.8623%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.01%)</title><rect x="93.6271%" y="389" width="0.0148%" height="15" fill="rgb(211,51,23)" fg:x="6332" fg:w="1"/><text x="93.8771%" y="399.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (1,798 samples, 26.59%)</title><rect x="67.1004%" y="405" width="26.5858%" height="15" fill="rgb(247,221,28)" fg:x="4538" fg:w="1798"/><text x="67.3504%" y="415.50">colors`cosmic_text::buffer::Buffer::set_text</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.04%)</title><rect x="93.6419%" y="389" width="0.0444%" height="15" fill="rgb(251,222,45)" fg:x="6333" fg:w="3"/><text x="93.8919%" y="399.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="93.7010%" y="357" width="0.0148%" height="15" fill="rgb(217,162,53)" fg:x="6337" fg:w="1"/><text x="93.9510%" y="367.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (10 samples, 0.15%)</title><rect x="93.7454%" y="341" width="0.1479%" height="15" fill="rgb(229,93,14)" fg:x="6340" fg:w="10"/><text x="93.9954%" y="351.50"></text></g><g><title>colors`tiny_skia::shaders::pattern::Pattern::push_stages (5 samples, 0.07%)</title><rect x="93.8932%" y="341" width="0.0739%" height="15" fill="rgb(209,67,49)" fg:x="6350" fg:w="5"/><text x="94.1432%" y="351.50"></text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (21 samples, 0.31%)</title><rect x="93.7158%" y="357" width="0.3105%" height="15" fill="rgb(213,87,29)" fg:x="6338" fg:w="21"/><text x="93.9658%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.06%)</title><rect x="93.9672%" y="341" width="0.0591%" height="15" fill="rgb(205,151,52)" fg:x="6355" fg:w="4"/><text x="94.2172%" y="351.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::load_mask_u8 (4 samples, 0.06%)</title><rect x="94.0855%" y="325" width="0.0591%" height="15" fill="rgb(253,215,39)" fg:x="6363" fg:w="4"/><text x="94.3355%" y="335.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::seed_shader (11 samples, 0.16%)</title><rect x="94.1446%" y="325" width="0.1626%" height="15" fill="rgb(221,220,41)" fg:x="6367" fg:w="11"/><text x="94.3946%" y="335.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::source_over_rgba_tail (2 samples, 0.03%)</title><rect x="94.3073%" y="325" width="0.0296%" height="15" fill="rgb(218,133,21)" fg:x="6378" fg:w="2"/><text x="94.5573%" y="335.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="94.3516%" y="309" width="0.0148%" height="15" fill="rgb(221,193,43)" fg:x="6381" fg:w="1"/><text x="94.6016%" y="319.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::gather (39 samples, 0.58%)</title><rect x="94.3664%" y="309" width="0.5767%" height="15" fill="rgb(240,128,52)" fg:x="6382" fg:w="39"/><text x="94.6164%" y="319.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::source_over_rgba (61 samples, 0.90%)</title><rect x="94.9431%" y="309" width="0.9020%" height="15" fill="rgb(253,114,12)" fg:x="6421" fg:w="61"/><text x="95.1931%" y="319.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::source_over_rgba_tail (63 samples, 0.93%)</title><rect x="95.8450%" y="309" width="0.9315%" height="15" fill="rgb(215,223,47)" fg:x="6482" fg:w="63"/><text x="96.0950%" y="319.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::start (174 samples, 2.57%)</title><rect x="94.3368%" y="325" width="2.5728%" height="15" fill="rgb(248,225,23)" fg:x="6380" fg:w="174"/><text x="94.5868%" y="335.50">co..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.13%)</title><rect x="96.7766%" y="309" width="0.1331%" height="15" fill="rgb(250,108,0)" fg:x="6545" fg:w="9"/><text x="97.0266%" y="319.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (209 samples, 3.09%)</title><rect x="94.0263%" y="357" width="3.0903%" height="15" fill="rgb(228,208,7)" fg:x="6359" fg:w="209"/><text x="94.2763%" y="367.50">col..</text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (206 samples, 3.05%)</title><rect x="94.0707%" y="341" width="3.0460%" height="15" fill="rgb(244,45,10)" fg:x="6362" fg:w="206"/><text x="94.3207%" y="351.50">col..</text></g><g><title>colors`tiny_skia::pipeline::highp::transform (14 samples, 0.21%)</title><rect x="96.9097%" y="325" width="0.2070%" height="15" fill="rgb(207,125,25)" fg:x="6554" fg:w="14"/><text x="97.1597%" y="335.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::intersect (1 samples, 0.01%)</title><rect x="97.1167%" y="357" width="0.0148%" height="15" fill="rgb(210,195,18)" fg:x="6568" fg:w="1"/><text x="97.3667%" y="367.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (245 samples, 3.62%)</title><rect x="93.6862%" y="373" width="3.6227%" height="15" fill="rgb(249,80,12)" fg:x="6336" fg:w="245"/><text x="93.9362%" y="383.50">colo..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.18%)</title><rect x="97.1315%" y="357" width="0.1774%" height="15" fill="rgb(221,65,9)" fg:x="6569" fg:w="12"/><text x="97.3815%" y="367.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::draw_pixmap (249 samples, 3.68%)</title><rect x="93.6862%" y="405" width="3.6818%" height="15" fill="rgb(235,49,36)" fg:x="6336" fg:w="249"/><text x="93.9362%" y="415.50">colo..</text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::draw_pixmap (249 samples, 3.68%)</title><rect x="93.6862%" y="389" width="3.6818%" height="15" fill="rgb(225,32,20)" fg:x="6336" fg:w="249"/><text x="93.9362%" y="399.50">colo..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.06%)</title><rect x="97.3089%" y="373" width="0.0591%" height="15" fill="rgb(215,141,46)" fg:x="6581" fg:w="4"/><text x="97.5589%" y="383.50"></text></g><g><title>colors`tiny_skia::pixmap::PixmapMut::fill (4 samples, 0.06%)</title><rect x="97.3680%" y="405" width="0.0591%" height="15" fill="rgb(250,160,47)" fg:x="6585" fg:w="4"/><text x="97.6180%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="97.4272%" y="405" width="0.0148%" height="15" fill="rgb(216,222,40)" fg:x="6589" fg:w="1"/><text x="97.6772%" y="415.50"></text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::draw_cell (6,586 samples, 97.38%)</title><rect x="0.0739%" y="421" width="97.3828%" height="15" fill="rgb(234,217,39)" fg:x="5" fg:w="6586"/><text x="0.3239%" y="431.50">colors`soft_ratatui::soft_backend::SoftBackend::draw_cell</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="97.4420%" y="405" width="0.0148%" height="15" fill="rgb(207,178,40)" fg:x="6590" fg:w="1"/><text x="97.6920%" y="415.50"></text></g><g><title>colors`std::fs::write::inner (1 samples, 0.01%)</title><rect x="97.4567%" y="421" width="0.0148%" height="15" fill="rgb(221,136,13)" fg:x="6591" fg:w="1"/><text x="97.7067%" y="431.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (1 samples, 0.01%)</title><rect x="97.4567%" y="405" width="0.0148%" height="15" fill="rgb(249,199,10)" fg:x="6591" fg:w="1"/><text x="97.7067%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.01%)</title><rect x="97.4567%" y="389" width="0.0148%" height="15" fill="rgb(249,222,13)" fg:x="6591" fg:w="1"/><text x="97.7067%" y="399.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (18 samples, 0.27%)</title><rect x="98.0926%" y="373" width="0.2662%" height="15" fill="rgb(244,185,38)" fg:x="6634" fg:w="18"/><text x="98.3426%" y="383.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_data (99 samples, 1.46%)</title><rect x="97.7673%" y="389" width="1.4638%" height="15" fill="rgb(236,202,9)" fg:x="6612" fg:w="99"/><text x="98.0173%" y="399.50"></text></g><g><title>colors`simd_adler32::imp::scalar::update (59 samples, 0.87%)</title><rect x="98.3587%" y="373" width="0.8724%" height="15" fill="rgb(250,229,37)" fg:x="6652" fg:w="59"/><text x="98.6087%" y="383.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (9 samples, 0.13%)</title><rect x="99.2311%" y="389" width="0.1331%" height="15" fill="rgb(206,174,23)" fg:x="6711" fg:w="9"/><text x="99.4811%" y="399.50"></text></g><g><title>colors`tiny_skia::pixmap::PixmapRef::encode_png (135 samples, 2.00%)</title><rect x="97.4715%" y="421" width="1.9962%" height="15" fill="rgb(211,33,43)" fg:x="6592" fg:w="135"/><text x="97.7215%" y="431.50">c..</text></g><g><title>colors`png::encoder::Writer&lt;W&gt;::write_image_data (115 samples, 1.70%)</title><rect x="97.7673%" y="405" width="1.7004%" height="15" fill="rgb(245,58,50)" fg:x="6612" fg:w="115"/><text x="98.0173%" y="415.50"></text></g><g><title>colors`png::filter::filter (7 samples, 0.10%)</title><rect x="99.3642%" y="389" width="0.1035%" height="15" fill="rgb(244,68,36)" fg:x="6720" fg:w="7"/><text x="99.6142%" y="399.50"></text></g><g><title>colors`png::filter::filter_internal (7 samples, 0.10%)</title><rect x="99.3642%" y="373" width="0.1035%" height="15" fill="rgb(232,229,15)" fg:x="6720" fg:w="7"/><text x="99.6142%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`close (1 samples, 0.01%)</title><rect x="99.4677%" y="421" width="0.0148%" height="15" fill="rgb(254,30,23)" fg:x="6727" fg:w="1"/><text x="99.7177%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.01%)</title><rect x="99.4825%" y="421" width="0.0148%" height="15" fill="rgb(235,160,14)" fg:x="6728" fg:w="1"/><text x="99.7325%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.03%)</title><rect x="99.4973%" y="421" width="0.0296%" height="15" fill="rgb(212,155,44)" fg:x="6729" fg:w="2"/><text x="99.7473%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.03%)</title><rect x="99.4973%" y="405" width="0.0296%" height="15" fill="rgb(226,2,50)" fg:x="6729" fg:w="2"/><text x="99.7473%" y="415.50"></text></g><g><title>colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw (6,738 samples, 99.63%)</title><rect x="0.0739%" y="437" width="99.6303%" height="15" fill="rgb(234,177,6)" fg:x="5" fg:w="6738"/><text x="0.3239%" y="447.50">colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw</text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.18%)</title><rect x="99.5268%" y="421" width="0.1774%" height="15" fill="rgb(217,24,9)" fg:x="6731" fg:w="12"/><text x="99.7768%" y="431.50"></text></g><g><title>colors`DYLD-STUB$$memcmp (1 samples, 0.01%)</title><rect x="99.7043%" y="437" width="0.0148%" height="15" fill="rgb(220,13,46)" fg:x="6743" fg:w="1"/><text x="99.9543%" y="447.50"></text></g><g><title>colors`palette::ok_utils::LC&lt;T&gt;::find_cusp (1 samples, 0.01%)</title><rect x="99.7191%" y="437" width="0.0148%" height="15" fill="rgb(239,221,27)" fg:x="6744" fg:w="1"/><text x="99.9691%" y="447.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::diff (2 samples, 0.03%)</title><rect x="99.7338%" y="437" width="0.0296%" height="15" fill="rgb(222,198,25)" fg:x="6745" fg:w="2"/><text x="99.9838%" y="447.50"></text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (1 samples, 0.01%)</title><rect x="99.7486%" y="421" width="0.0148%" height="15" fill="rgb(211,99,13)" fg:x="6746" fg:w="1"/><text x="99.9986%" y="431.50"></text></g><g><title>colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw (6,746 samples, 99.75%)</title><rect x="0.0296%" y="453" width="99.7486%" height="15" fill="rgb(232,111,31)" fg:x="2" fg:w="6746"/><text x="0.2796%" y="463.50">colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw</text></g><g><title>colors`ratatui::buffer::cell::Cell::set_char (1 samples, 0.01%)</title><rect x="99.7634%" y="437" width="0.0148%" height="15" fill="rgb(245,82,37)" fg:x="6747" fg:w="1"/><text x="100.0134%" y="447.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (1 samples, 0.01%)</title><rect x="99.7782%" y="437" width="0.0148%" height="15" fill="rgb(227,149,46)" fg:x="6748" fg:w="1"/><text x="100.0282%" y="447.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (1 samples, 0.01%)</title><rect x="99.7782%" y="421" width="0.0148%" height="15" fill="rgb(218,36,50)" fg:x="6748" fg:w="1"/><text x="100.0282%" y="431.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (1 samples, 0.01%)</title><rect x="99.7782%" y="405" width="0.0148%" height="15" fill="rgb(226,80,48)" fg:x="6748" fg:w="1"/><text x="100.0282%" y="415.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (1 samples, 0.01%)</title><rect x="99.7782%" y="389" width="0.0148%" height="15" fill="rgb(238,224,15)" fg:x="6748" fg:w="1"/><text x="100.0282%" y="399.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (1 samples, 0.01%)</title><rect x="99.7782%" y="373" width="0.0148%" height="15" fill="rgb(241,136,10)" fg:x="6748" fg:w="1"/><text x="100.0282%" y="383.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (1 samples, 0.01%)</title><rect x="99.7782%" y="357" width="0.0148%" height="15" fill="rgb(208,32,45)" fg:x="6748" fg:w="1"/><text x="100.0282%" y="367.50"></text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (1 samples, 0.01%)</title><rect x="99.7782%" y="341" width="0.0148%" height="15" fill="rgb(207,135,9)" fg:x="6748" fg:w="1"/><text x="100.0282%" y="351.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (1 samples, 0.01%)</title><rect x="99.7782%" y="325" width="0.0148%" height="15" fill="rgb(206,86,44)" fg:x="6748" fg:w="1"/><text x="100.0282%" y="335.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="99.7782%" y="309" width="0.0148%" height="15" fill="rgb(245,177,15)" fg:x="6748" fg:w="1"/><text x="100.0282%" y="319.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (1 samples, 0.01%)</title><rect x="99.7782%" y="293" width="0.0148%" height="15" fill="rgb(206,64,50)" fg:x="6748" fg:w="1"/><text x="100.0282%" y="303.50"></text></g><g><title>colors`fontdb::Database::make_shared_face_data (1 samples, 0.01%)</title><rect x="99.7782%" y="277" width="0.0148%" height="15" fill="rgb(234,36,40)" fg:x="6748" fg:w="1"/><text x="100.0282%" y="287.50"></text></g><g><title>colors`&lt;std::path::PathBuf as core::cmp::PartialEq&gt;::eq (1 samples, 0.01%)</title><rect x="99.7782%" y="261" width="0.0148%" height="15" fill="rgb(213,64,8)" fg:x="6748" fg:w="1"/><text x="100.0282%" y="271.50"></text></g><g><title>colors`core::iter::traits::iterator::Iterator::eq_by (1 samples, 0.01%)</title><rect x="99.7782%" y="245" width="0.0148%" height="15" fill="rgb(210,75,36)" fg:x="6748" fg:w="1"/><text x="100.0282%" y="255.50"></text></g><g><title>colors`&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.01%)</title><rect x="99.7782%" y="229" width="0.0148%" height="15" fill="rgb(229,88,21)" fg:x="6748" fg:w="1"/><text x="100.0282%" y="239.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_locale (1 samples, 0.01%)</title><rect x="99.7930%" y="421" width="0.0148%" height="15" fill="rgb(252,204,47)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="431.50"></text></g><g><title>colors`sys_locale::get_locale (1 samples, 0.01%)</title><rect x="99.7930%" y="405" width="0.0148%" height="15" fill="rgb(208,77,27)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="415.50"></text></g><g><title>CoreFoundation`CFLocaleCopyPreferredLanguages (1 samples, 0.01%)</title><rect x="99.7930%" y="389" width="0.0148%" height="15" fill="rgb(221,76,26)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="399.50"></text></g><g><title>Foundation`@objc static NSLocale._preferredLanguagesForCurrentUser(_:) (1 samples, 0.01%)</title><rect x="99.7930%" y="373" width="0.0148%" height="15" fill="rgb(225,139,18)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="383.50"></text></g><g><title>Foundation`LocaleCache.preferredLanguages(forCurrentUser:) (1 samples, 0.01%)</title><rect x="99.7930%" y="357" width="0.0148%" height="15" fill="rgb(230,137,11)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="367.50"></text></g><g><title>CoreFoundation`_CFPreferencesCopyAppValueWithContainerAndConfiguration (1 samples, 0.01%)</title><rect x="99.7930%" y="341" width="0.0148%" height="15" fill="rgb(212,28,1)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="351.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:] (1 samples, 0.01%)</title><rect x="99.7930%" y="325" width="0.0148%" height="15" fill="rgb(248,164,17)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="335.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchListForIdentifier:container:cloudConfigurationURL:perform:] (1 samples, 0.01%)</title><rect x="99.7930%" y="309" width="0.0148%" height="15" fill="rgb(222,171,42)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="319.50"></text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke (1 samples, 0.01%)</title><rect x="99.7930%" y="293" width="0.0148%" height="15" fill="rgb(243,84,45)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="303.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchLists:] (1 samples, 0.01%)</title><rect x="99.7930%" y="277" width="0.0148%" height="15" fill="rgb(252,49,23)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="287.50"></text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke.152 (1 samples, 0.01%)</title><rect x="99.7930%" y="261" width="0.0148%" height="15" fill="rgb(215,19,7)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="271.50"></text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource addSourceForIdentifier:user:byHost:container:] (1 samples, 0.01%)</title><rect x="99.7930%" y="245" width="0.0148%" height="15" fill="rgb(238,81,41)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="255.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSourceForIdentifier:user:byHost:container:cloud:perform:] (1 samples, 0.01%)</title><rect x="99.7930%" y="229" width="0.0148%" height="15" fill="rgb(210,199,37)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="239.50"></text></g><g><title>CoreFoundation`__96-[_CFXPreferences(SourceAdditions) withSourceForIdentifier:user:byHost:container:cloud:perform:]_block_invoke.213 (1 samples, 0.01%)</title><rect x="99.7930%" y="213" width="0.0148%" height="15" fill="rgb(244,192,49)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="223.50"></text></g><g><title>CoreFoundation`_CFCopyHomeDirURLForUser (1 samples, 0.01%)</title><rect x="99.7930%" y="197" width="0.0148%" height="15" fill="rgb(226,211,11)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="207.50"></text></g><g><title>libsystem_info.dylib`getpwuid (1 samples, 0.01%)</title><rect x="99.7930%" y="181" width="0.0148%" height="15" fill="rgb(236,162,54)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="191.50"></text></g><g><title>libsystem_info.dylib`search_item_bynumber (1 samples, 0.01%)</title><rect x="99.7930%" y="165" width="0.0148%" height="15" fill="rgb(220,229,9)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="175.50"></text></g><g><title>libsystem_info.dylib`ds_user_byuid (1 samples, 0.01%)</title><rect x="99.7930%" y="149" width="0.0148%" height="15" fill="rgb(250,87,22)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="159.50"></text></g><g><title>libsystem_trace.dylib`_os_activity_create_addr (1 samples, 0.01%)</title><rect x="99.7930%" y="133" width="0.0148%" height="15" fill="rgb(239,43,17)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="143.50"></text></g><g><title>libdispatch.dylib`voucher_activity_create_with_data_2 (1 samples, 0.01%)</title><rect x="99.7930%" y="117" width="0.0148%" height="15" fill="rgb(231,177,25)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="127.50"></text></g><g><title>libdispatch.dylib`firehose_buffer_tracepoint_reserve_slow (1 samples, 0.01%)</title><rect x="99.7930%" y="101" width="0.0148%" height="15" fill="rgb(219,179,1)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="111.50"></text></g><g><title>libdispatch.dylib`firehose_drain_notifications_once (1 samples, 0.01%)</title><rect x="99.7930%" y="85" width="0.0148%" height="15" fill="rgb(238,219,53)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (1 samples, 0.01%)</title><rect x="99.7930%" y="69" width="0.0148%" height="15" fill="rgb(232,167,36)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (1 samples, 0.01%)</title><rect x="99.7930%" y="53" width="0.0148%" height="15" fill="rgb(244,19,51)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (1 samples, 0.01%)</title><rect x="99.7930%" y="37" width="0.0148%" height="15" fill="rgb(224,6,22)" fg:x="6749" fg:w="1"/><text x="100.0430%" y="47.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (2 samples, 0.03%)</title><rect x="99.8078%" y="389" width="0.0296%" height="15" fill="rgb(224,145,5)" fg:x="6750" fg:w="2"/><text x="100.0578%" y="399.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (2 samples, 0.03%)</title><rect x="99.8078%" y="373" width="0.0296%" height="15" fill="rgb(234,130,49)" fg:x="6750" fg:w="2"/><text x="100.0578%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.03%)</title><rect x="99.8078%" y="357" width="0.0296%" height="15" fill="rgb(254,6,2)" fg:x="6750" fg:w="2"/><text x="100.0578%" y="367.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (9 samples, 0.13%)</title><rect x="99.8374%" y="373" width="0.1331%" height="15" fill="rgb(208,96,46)" fg:x="6752" fg:w="9"/><text x="100.0874%" y="383.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (9 samples, 0.13%)</title><rect x="99.8374%" y="357" width="0.1331%" height="15" fill="rgb(239,3,39)" fg:x="6752" fg:w="9"/><text x="100.0874%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__open (9 samples, 0.13%)</title><rect x="99.8374%" y="341" width="0.1331%" height="15" fill="rgb(233,210,1)" fg:x="6752" fg:w="9"/><text x="100.0874%" y="351.50"></text></g><g><title>all (6,763 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(244,137,37)" fg:x="0" fg:w="6763"/><text x="0.2500%" y="575.50"></text></g><g><title>dyld`start (6,763 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(240,136,2)" fg:x="0" fg:w="6763"/><text x="0.2500%" y="559.50">dyld`start</text></g><g><title>colors`main (6,763 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(239,18,37)" fg:x="0" fg:w="6763"/><text x="0.2500%" y="543.50">colors`main</text></g><g><title>colors`std::rt::lang_start_internal (6,763 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(218,185,22)" fg:x="0" fg:w="6763"/><text x="0.2500%" y="527.50">colors`std::rt::lang_start_internal</text></g><g><title>colors`std::rt::lang_start::_{{closure}} (6,762 samples, 99.99%)</title><rect x="0.0148%" y="501" width="99.9852%" height="15" fill="rgb(225,218,4)" fg:x="1" fg:w="6762"/><text x="0.2648%" y="511.50">colors`std::rt::lang_start::_{{closure}}</text></g><g><title>colors`std::sys::backtrace::__rust_begin_short_backtrace (6,762 samples, 99.99%)</title><rect x="0.0148%" y="485" width="99.9852%" height="15" fill="rgb(230,182,32)" fg:x="1" fg:w="6762"/><text x="0.2648%" y="495.50">colors`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>colors`colors::main (6,762 samples, 99.99%)</title><rect x="0.0148%" y="469" width="99.9852%" height="15" fill="rgb(242,56,43)" fg:x="1" fg:w="6762"/><text x="0.2648%" y="479.50">colors`colors::main</text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::new (15 samples, 0.22%)</title><rect x="99.7782%" y="453" width="0.2218%" height="15" fill="rgb(233,99,24)" fg:x="6748" fg:w="15"/><text x="100.0282%" y="463.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::new (14 samples, 0.21%)</title><rect x="99.7930%" y="437" width="0.2070%" height="15" fill="rgb(234,209,42)" fg:x="6749" fg:w="14"/><text x="100.0430%" y="447.50"></text></g><g><title>colors`fontdb::Database::load_system_fonts (13 samples, 0.19%)</title><rect x="99.8078%" y="421" width="0.1922%" height="15" fill="rgb(227,7,12)" fg:x="6750" fg:w="13"/><text x="100.0578%" y="431.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (13 samples, 0.19%)</title><rect x="99.8078%" y="405" width="0.1922%" height="15" fill="rgb(245,203,43)" fg:x="6750" fg:w="13"/><text x="100.0578%" y="415.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (11 samples, 0.16%)</title><rect x="99.8374%" y="389" width="0.1626%" height="15" fill="rgb(238,205,33)" fg:x="6752" fg:w="11"/><text x="100.0874%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`stat (2 samples, 0.03%)</title><rect x="99.9704%" y="373" width="0.0296%" height="15" fill="rgb(231,56,7)" fg:x="6761" fg:w="2"/><text x="100.2204%" y="383.50"></text></g></svg></svg>
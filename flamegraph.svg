<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="6187"><g><title>colors`color_eyre::install (1 samples, 0.02%)</title><rect x="0.0000%" y="389" width="0.0162%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>colors`color_eyre::config::HookBuilder::install (1 samples, 0.02%)</title><rect x="0.0000%" y="373" width="0.0162%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>colors`color_eyre::config::HookBuilder::try_into_hooks (1 samples, 0.02%)</title><rect x="0.0000%" y="357" width="0.0162%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>colors`color_spantrace::set_theme (1 samples, 0.02%)</title><rect x="0.0000%" y="341" width="0.0162%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>colors`once_cell::imp::initialize_or_wait (1 samples, 0.02%)</title><rect x="0.0000%" y="325" width="0.0162%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>colors`palette::ok_utils::LC&lt;T&gt;::find_cusp (1 samples, 0.02%)</title><rect x="0.0162%" y="357" width="0.0162%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2662%" y="367.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::index_of (1 samples, 0.02%)</title><rect x="0.0323%" y="357" width="0.0162%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.2823%" y="367.50"></text></g><g><title>colors`&lt;&amp;mut colors::App as ratatui::widgets::Widget&gt;::render (3 samples, 0.05%)</title><rect x="0.0162%" y="373" width="0.0485%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="3"/><text x="0.2662%" y="383.50"></text></g><g><title>colors`ratatui::buffer::cell::Cell::set_char (1 samples, 0.02%)</title><rect x="0.0485%" y="357" width="0.0162%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="1"/><text x="0.2985%" y="367.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="0.0647%" y="357" width="0.0162%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="0.3147%" y="367.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="0.3071%" y="309" width="0.0162%" height="15" fill="rgb(250,228,42)" fg:x="19" fg:w="1"/><text x="0.5571%" y="319.50"></text></g><g><title>colors`cosmic_text::swash::SwashCache::get_image (2 samples, 0.03%)</title><rect x="0.3233%" y="309" width="0.0323%" height="15" fill="rgb(240,193,28)" fg:x="20" fg:w="2"/><text x="0.5733%" y="319.50"></text></g><g><title>colors`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.02%)</title><rect x="0.3394%" y="293" width="0.0162%" height="15" fill="rgb(216,20,37)" fg:x="21" fg:w="1"/><text x="0.5894%" y="303.50"></text></g><g><title>colors`tiny_skia::painter::Paint::set_color (28 samples, 0.45%)</title><rect x="0.3556%" y="309" width="0.4526%" height="15" fill="rgb(206,188,39)" fg:x="22" fg:w="28"/><text x="0.6056%" y="319.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (7 samples, 0.11%)</title><rect x="1.6809%" y="293" width="0.1131%" height="15" fill="rgb(217,207,13)" fg:x="104" fg:w="7"/><text x="1.9309%" y="303.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (41 samples, 0.66%)</title><rect x="1.7941%" y="293" width="0.6627%" height="15" fill="rgb(231,73,38)" fg:x="111" fg:w="41"/><text x="2.0441%" y="303.50"></text></g><g><title>colors`tiny_skia::blend_mode::BlendMode::to_stage (5 samples, 0.08%)</title><rect x="2.4568%" y="293" width="0.0808%" height="15" fill="rgb(225,20,46)" fg:x="152" fg:w="5"/><text x="2.7068%" y="303.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (38 samples, 0.61%)</title><rect x="2.5376%" y="293" width="0.6142%" height="15" fill="rgb(210,31,41)" fg:x="157" fg:w="38"/><text x="2.7876%" y="303.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::push (8 samples, 0.13%)</title><rect x="3.1518%" y="293" width="0.1293%" height="15" fill="rgb(221,200,47)" fg:x="195" fg:w="8"/><text x="3.4018%" y="303.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (134 samples, 2.17%)</title><rect x="8.6795%" y="277" width="2.1658%" height="15" fill="rgb(226,26,5)" fg:x="537" fg:w="134"/><text x="8.9295%" y="287.50">c..</text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (929 samples, 15.02%)</title><rect x="10.8453%" y="277" width="15.0154%" height="15" fill="rgb(249,33,26)" fg:x="671" fg:w="929"/><text x="11.0953%" y="287.50">colors`tiny_skia::pipel..</text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (123 samples, 1.99%)</title><rect x="25.8607%" y="277" width="1.9880%" height="15" fill="rgb(235,183,28)" fg:x="1600" fg:w="123"/><text x="26.1107%" y="287.50">c..</text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (2,099 samples, 33.93%)</title><rect x="3.2811%" y="293" width="33.9260%" height="15" fill="rgb(221,5,38)" fg:x="203" fg:w="2099"/><text x="3.5311%" y="303.50">colors`tiny_skia::pipeline::blitter::RasterPipelineBlit..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (579 samples, 9.36%)</title><rect x="27.8487%" y="277" width="9.3583%" height="15" fill="rgb(247,18,42)" fg:x="1723" fg:w="579"/><text x="28.0987%" y="287.50">libsystem_pla..</text></g><g><title>colors`tiny_skia::pipeline::lowp::null_fn (1 samples, 0.02%)</title><rect x="39.3567%" y="261" width="0.0162%" height="15" fill="rgb(241,131,45)" fg:x="2435" fg:w="1"/><text x="39.6067%" y="271.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::source_over_rgba_tail (2 samples, 0.03%)</title><rect x="39.3729%" y="261" width="0.0323%" height="15" fill="rgb(249,31,29)" fg:x="2436" fg:w="2"/><text x="39.6229%" y="271.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="39.6476%" y="245" width="0.0162%" height="15" fill="rgb(225,111,53)" fg:x="2453" fg:w="1"/><text x="39.8976%" y="255.50"></text></g><g><title>colors`DYLD-STUB$$memset_pattern16 (7 samples, 0.11%)</title><rect x="39.6638%" y="245" width="0.1131%" height="15" fill="rgb(238,160,17)" fg:x="2454" fg:w="7"/><text x="39.9138%" y="255.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::source_over_rgba_tail (63 samples, 1.02%)</title><rect x="39.7770%" y="245" width="1.0183%" height="15" fill="rgb(214,148,48)" fg:x="2461" fg:w="63"/><text x="40.0270%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.15%)</title><rect x="40.7952%" y="245" width="0.1455%" height="15" fill="rgb(232,36,49)" fg:x="2524" fg:w="9"/><text x="41.0452%" y="255.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::start (107 samples, 1.73%)</title><rect x="39.4052%" y="261" width="1.7294%" height="15" fill="rgb(209,103,24)" fg:x="2438" fg:w="107"/><text x="39.6552%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (12 samples, 0.19%)</title><rect x="40.9407%" y="245" width="0.1940%" height="15" fill="rgb(229,88,8)" fg:x="2533" fg:w="12"/><text x="41.1907%" y="255.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (176 samples, 2.84%)</title><rect x="38.8072%" y="277" width="2.8447%" height="15" fill="rgb(213,181,19)" fg:x="2401" fg:w="176"/><text x="39.0572%" y="287.50">co..</text></g><g><title>colors`tiny_skia::pipeline::lowp::uniform_color (32 samples, 0.52%)</title><rect x="41.1346%" y="261" width="0.5172%" height="15" fill="rgb(254,191,54)" fg:x="2545" fg:w="32"/><text x="41.3846%" y="271.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (276 samples, 4.46%)</title><rect x="37.2070%" y="293" width="4.4610%" height="15" fill="rgb(241,83,37)" fg:x="2302" fg:w="276"/><text x="37.4570%" y="303.50">color..</text></g><g><title>colors`tiny_skia::pipeline::lowp::start (1 samples, 0.02%)</title><rect x="41.6519%" y="277" width="0.0162%" height="15" fill="rgb(233,36,39)" fg:x="2577" fg:w="1"/><text x="41.9019%" y="287.50"></text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (6 samples, 0.10%)</title><rect x="41.6680%" y="293" width="0.0970%" height="15" fill="rgb(226,3,54)" fg:x="2578" fg:w="6"/><text x="41.9180%" y="303.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::from_xywh (16 samples, 0.26%)</title><rect x="41.7650%" y="293" width="0.2586%" height="15" fill="rgb(245,192,40)" fg:x="2584" fg:w="16"/><text x="42.0150%" y="303.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::intersect (114 samples, 1.84%)</title><rect x="42.0236%" y="293" width="1.8426%" height="15" fill="rgb(238,167,29)" fg:x="2600" fg:w="114"/><text x="42.2736%" y="303.50">c..</text></g><g><title>colors`tiny_skia_path::rect::Rect::round (22 samples, 0.36%)</title><rect x="43.8662%" y="293" width="0.3556%" height="15" fill="rgb(232,182,51)" fg:x="2714" fg:w="22"/><text x="44.1162%" y="303.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (3,581 samples, 57.88%)</title><rect x="0.8081%" y="309" width="57.8794%" height="15" fill="rgb(231,60,39)" fg:x="50" fg:w="3581"/><text x="1.0581%" y="319.50">colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect</text></g><g><title>libsystem_platform.dylib`_platform_memmove (895 samples, 14.47%)</title><rect x="44.2218%" y="293" width="14.4658%" height="15" fill="rgb(208,69,12)" fg:x="2736" fg:w="895"/><text x="44.4718%" y="303.50">libsystem_platform.dyl..</text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (11 samples, 0.18%)</title><rect x="58.6876%" y="309" width="0.1778%" height="15" fill="rgb(235,93,37)" fg:x="3631" fg:w="11"/><text x="58.9376%" y="319.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (6 samples, 0.10%)</title><rect x="58.8654%" y="309" width="0.0970%" height="15" fill="rgb(213,116,39)" fg:x="3642" fg:w="6"/><text x="59.1154%" y="319.50"></text></g><g><title>colors`tiny_skia_path::transform::Transform::is_identity (16 samples, 0.26%)</title><rect x="58.9623%" y="309" width="0.2586%" height="15" fill="rgb(222,207,29)" fg:x="3648" fg:w="16"/><text x="59.2123%" y="319.50"></text></g><g><title>colors`cosmic_text::swash::SwashCache::with_pixels (4,097 samples, 66.22%)</title><rect x="0.0970%" y="325" width="66.2195%" height="15" fill="rgb(206,96,30)" fg:x="6" fg:w="4097"/><text x="0.3470%" y="335.50">colors`cosmic_text::swash::SwashCache::with_pixels</text></g><g><title>libsystem_platform.dylib`_platform_memmove (439 samples, 7.10%)</title><rect x="59.2209%" y="309" width="7.0955%" height="15" fill="rgb(218,138,4)" fg:x="3664" fg:w="439"/><text x="59.4709%" y="319.50">libsystem_..</text></g><g><title>colors`tiny_skia::painter::Paint::set_color (9 samples, 0.15%)</title><rect x="66.3165%" y="325" width="0.1455%" height="15" fill="rgb(250,191,14)" fg:x="4103" fg:w="9"/><text x="66.5665%" y="335.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (12 samples, 0.19%)</title><rect x="66.4619%" y="325" width="0.1940%" height="15" fill="rgb(239,60,40)" fg:x="4112" fg:w="12"/><text x="66.7119%" y="335.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::draw (4,146 samples, 67.01%)</title><rect x="0.0970%" y="341" width="67.0115%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="4146"/><text x="0.3470%" y="351.50">colors`cosmic_text::buffer::Buffer::draw</text></g><g><title>colors`tiny_skia_path::rect::Rect::from_xywh (28 samples, 0.45%)</title><rect x="66.6559%" y="325" width="0.4526%" height="15" fill="rgb(225,35,8)" fg:x="4124" fg:w="28"/><text x="66.9059%" y="335.50"></text></g><g><title>colors`&lt;cosmic_text::line_ending::LineIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="67.1085%" y="325" width="0.0323%" height="15" fill="rgb(250,213,24)" fg:x="4152" fg:w="2"/><text x="67.3585%" y="335.50"></text></g><g><title>colors`DYLD-STUB$$free (2 samples, 0.03%)</title><rect x="67.1408%" y="309" width="0.0323%" height="15" fill="rgb(247,123,22)" fg:x="4154" fg:w="2"/><text x="67.3908%" y="319.50"></text></g><g><title>colors`__rdl_dealloc (1 samples, 0.02%)</title><rect x="67.1731%" y="309" width="0.0162%" height="15" fill="rgb(231,138,38)" fg:x="4156" fg:w="1"/><text x="67.4231%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.03%)</title><rect x="67.1893%" y="293" width="0.0323%" height="15" fill="rgb(231,145,46)" fg:x="4157" fg:w="2"/><text x="67.4393%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="67.2216%" y="293" width="0.0162%" height="15" fill="rgb(251,118,11)" fg:x="4159" fg:w="1"/><text x="67.4716%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.03%)</title><rect x="67.2378%" y="293" width="0.0323%" height="15" fill="rgb(217,147,25)" fg:x="4160" fg:w="2"/><text x="67.4878%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="67.2539%" y="277" width="0.0162%" height="15" fill="rgb(247,81,37)" fg:x="4161" fg:w="1"/><text x="67.5039%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="67.2701%" y="293" width="0.0162%" height="15" fill="rgb(209,12,38)" fg:x="4162" fg:w="1"/><text x="67.5201%" y="303.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;cosmic_text::shape::ShapeLine&gt;&gt; (7 samples, 0.11%)</title><rect x="67.1893%" y="309" width="0.1131%" height="15" fill="rgb(227,1,9)" fg:x="4157" fg:w="7"/><text x="67.4393%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="67.2862%" y="293" width="0.0162%" height="15" fill="rgb(248,47,43)" fg:x="4163" fg:w="1"/><text x="67.5362%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="67.3024%" y="309" width="0.0162%" height="15" fill="rgb(221,10,30)" fg:x="4164" fg:w="1"/><text x="67.5524%" y="319.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::buffer_line::BufferLine&gt; (12 samples, 0.19%)</title><rect x="67.1408%" y="325" width="0.1940%" height="15" fill="rgb(210,229,1)" fg:x="4154" fg:w="12"/><text x="67.3908%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="67.3186%" y="309" width="0.0162%" height="15" fill="rgb(222,148,37)" fg:x="4165" fg:w="1"/><text x="67.5686%" y="319.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsOwned::new (1 samples, 0.02%)</title><rect x="67.3347%" y="325" width="0.0162%" height="15" fill="rgb(234,67,33)" fg:x="4166" fg:w="1"/><text x="67.5847%" y="335.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;alloc::vec::Vec&lt;cosmic_text::layout::LayoutLine&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="67.3509%" y="309" width="0.0162%" height="15" fill="rgb(247,98,35)" fg:x="4167" fg:w="1"/><text x="67.6009%" y="319.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="67.4155%" y="261" width="0.0162%" height="15" fill="rgb(247,138,52)" fg:x="4171" fg:w="1"/><text x="67.6655%" y="271.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.05%)</title><rect x="67.4640%" y="245" width="0.0485%" height="15" fill="rgb(213,79,30)" fg:x="4174" fg:w="3"/><text x="67.7140%" y="255.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="67.4802%" y="229" width="0.0323%" height="15" fill="rgb(246,177,23)" fg:x="4175" fg:w="2"/><text x="67.7302%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="67.4964%" y="213" width="0.0162%" height="15" fill="rgb(230,62,27)" fg:x="4176" fg:w="1"/><text x="67.7464%" y="223.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (2 samples, 0.03%)</title><rect x="67.5125%" y="245" width="0.0323%" height="15" fill="rgb(216,154,8)" fg:x="4177" fg:w="2"/><text x="67.7625%" y="255.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (1 samples, 0.02%)</title><rect x="67.6418%" y="229" width="0.0162%" height="15" fill="rgb(244,35,45)" fg:x="4185" fg:w="1"/><text x="67.8918%" y="239.50"></text></g><g><title>colors`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="84.3058%" y="181" width="0.0162%" height="15" fill="rgb(251,115,12)" fg:x="5216" fg:w="1"/><text x="84.5558%" y="191.50"></text></g><g><title>colors`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.06%)</title><rect x="84.3220%" y="181" width="0.0647%" height="15" fill="rgb(240,54,50)" fg:x="5217" fg:w="4"/><text x="84.5720%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="84.3543%" y="165" width="0.0323%" height="15" fill="rgb(233,84,52)" fg:x="5219" fg:w="2"/><text x="84.6043%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="84.3543%" y="149" width="0.0323%" height="15" fill="rgb(207,117,47)" fg:x="5219" fg:w="2"/><text x="84.6043%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.03%)</title><rect x="84.3543%" y="133" width="0.0323%" height="15" fill="rgb(249,43,39)" fg:x="5219" fg:w="2"/><text x="84.6043%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="84.3866%" y="181" width="0.0162%" height="15" fill="rgb(209,38,44)" fg:x="5221" fg:w="1"/><text x="84.6366%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.05%)</title><rect x="84.4028%" y="181" width="0.0485%" height="15" fill="rgb(236,212,23)" fg:x="5222" fg:w="3"/><text x="84.6528%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.03%)</title><rect x="84.4189%" y="165" width="0.0323%" height="15" fill="rgb(242,79,21)" fg:x="5223" fg:w="2"/><text x="84.6689%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="84.4351%" y="149" width="0.0162%" height="15" fill="rgb(211,96,35)" fg:x="5224" fg:w="1"/><text x="84.6851%" y="159.50"></text></g><g><title>colors`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (15 samples, 0.24%)</title><rect x="84.2250%" y="197" width="0.2424%" height="15" fill="rgb(253,215,40)" fg:x="5211" fg:w="15"/><text x="84.4750%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="84.4513%" y="181" width="0.0162%" height="15" fill="rgb(211,81,21)" fg:x="5225" fg:w="1"/><text x="84.7013%" y="191.50"></text></g><g><title>colors`alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (1 samples, 0.02%)</title><rect x="84.4674%" y="197" width="0.0162%" height="15" fill="rgb(208,190,38)" fg:x="5226" fg:w="1"/><text x="84.7174%" y="207.50"></text></g><g><title>colors`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (1 samples, 0.02%)</title><rect x="84.4674%" y="181" width="0.0162%" height="15" fill="rgb(235,213,38)" fg:x="5226" fg:w="1"/><text x="84.7174%" y="191.50"></text></g><g><title>colors`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (18 samples, 0.29%)</title><rect x="84.4836%" y="197" width="0.2909%" height="15" fill="rgb(237,122,38)" fg:x="5227" fg:w="18"/><text x="84.7336%" y="207.50"></text></g><g><title>colors`core::str::count::char_count_general_case (2 samples, 0.03%)</title><rect x="84.7745%" y="197" width="0.0323%" height="15" fill="rgb(244,218,35)" fg:x="5245" fg:w="2"/><text x="85.0245%" y="207.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (6 samples, 0.10%)</title><rect x="84.8069%" y="197" width="0.0970%" height="15" fill="rgb(240,68,47)" fg:x="5247" fg:w="6"/><text x="85.0569%" y="207.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (1,080 samples, 17.46%)</title><rect x="67.6580%" y="213" width="17.4560%" height="15" fill="rgb(210,16,53)" fg:x="4186" fg:w="1080"/><text x="67.9080%" y="223.50">colors`&lt;cosmic_text::font::..</text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_supported_codepoints_in_word::_{{closure}} (13 samples, 0.21%)</title><rect x="84.9038%" y="197" width="0.2101%" height="15" fill="rgb(235,124,12)" fg:x="5253" fg:w="13"/><text x="85.1538%" y="207.50"></text></g><g><title>colors`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect x="85.1139%" y="213" width="0.0162%" height="15" fill="rgb(224,169,11)" fg:x="5266" fg:w="1"/><text x="85.3639%" y="223.50"></text></g><g><title>colors`core::str::count::char_count_general_case (2 samples, 0.03%)</title><rect x="85.1301%" y="213" width="0.0323%" height="15" fill="rgb(250,166,2)" fg:x="5267" fg:w="2"/><text x="85.3801%" y="223.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (2 samples, 0.03%)</title><rect x="85.1624%" y="213" width="0.0323%" height="15" fill="rgb(242,216,29)" fg:x="5269" fg:w="2"/><text x="85.4124%" y="223.50"></text></g><g><title>colors`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (1 samples, 0.02%)</title><rect x="85.1786%" y="197" width="0.0162%" height="15" fill="rgb(230,116,27)" fg:x="5270" fg:w="1"/><text x="85.4286%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="85.2433%" y="181" width="0.0162%" height="15" fill="rgb(228,99,48)" fg:x="5274" fg:w="1"/><text x="85.4933%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.02%)</title><rect x="85.2594%" y="165" width="0.0162%" height="15" fill="rgb(253,11,6)" fg:x="5275" fg:w="1"/><text x="85.5094%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.05%)</title><rect x="85.2594%" y="181" width="0.0485%" height="15" fill="rgb(247,143,39)" fg:x="5275" fg:w="3"/><text x="85.5094%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.03%)</title><rect x="85.2756%" y="165" width="0.0323%" height="15" fill="rgb(236,97,10)" fg:x="5276" fg:w="2"/><text x="85.5256%" y="175.50"></text></g><g><title>colors`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.15%)</title><rect x="85.1948%" y="197" width="0.1455%" height="15" fill="rgb(233,208,19)" fg:x="5271" fg:w="9"/><text x="85.4448%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.03%)</title><rect x="85.3079%" y="181" width="0.0323%" height="15" fill="rgb(216,164,2)" fg:x="5278" fg:w="2"/><text x="85.5579%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="85.3402%" y="197" width="0.0162%" height="15" fill="rgb(220,129,5)" fg:x="5280" fg:w="1"/><text x="85.5902%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.02%)</title><rect x="85.3726%" y="181" width="0.0162%" height="15" fill="rgb(242,17,10)" fg:x="5282" fg:w="1"/><text x="85.6226%" y="191.50"></text></g><g><title>colors`cosmic_text::font::fallback::FontFallbackIter::new (13 samples, 0.21%)</title><rect x="85.1948%" y="213" width="0.2101%" height="15" fill="rgb(242,107,0)" fg:x="5271" fg:w="13"/><text x="85.4448%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.05%)</title><rect x="85.3564%" y="197" width="0.0485%" height="15" fill="rgb(251,28,31)" fg:x="5281" fg:w="3"/><text x="85.6064%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="85.3887%" y="181" width="0.0162%" height="15" fill="rgb(233,223,10)" fg:x="5283" fg:w="1"/><text x="85.6387%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="85.3887%" y="165" width="0.0162%" height="15" fill="rgb(215,21,27)" fg:x="5283" fg:w="1"/><text x="85.6387%" y="175.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (18 samples, 0.29%)</title><rect x="85.4049%" y="213" width="0.2909%" height="15" fill="rgb(232,23,21)" fg:x="5284" fg:w="18"/><text x="85.6549%" y="223.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_matches (5 samples, 0.08%)</title><rect x="85.6958%" y="213" width="0.0808%" height="15" fill="rgb(244,5,23)" fg:x="5302" fg:w="5"/><text x="85.9458%" y="223.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_supported_codepoints_in_word::_{{closure}} (3 samples, 0.05%)</title><rect x="85.7766%" y="213" width="0.0485%" height="15" fill="rgb(226,81,46)" fg:x="5307" fg:w="3"/><text x="86.0266%" y="223.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.03%)</title><rect x="85.8898%" y="197" width="0.0323%" height="15" fill="rgb(247,70,30)" fg:x="5314" fg:w="2"/><text x="86.1398%" y="207.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="85.9059%" y="181" width="0.0162%" height="15" fill="rgb(212,68,19)" fg:x="5315" fg:w="1"/><text x="86.1559%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="85.9059%" y="165" width="0.0162%" height="15" fill="rgb(240,187,13)" fg:x="5315" fg:w="1"/><text x="86.1559%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="85.9059%" y="149" width="0.0162%" height="15" fill="rgb(223,113,26)" fg:x="5315" fg:w="1"/><text x="86.1559%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="85.9059%" y="133" width="0.0162%" height="15" fill="rgb(206,192,2)" fg:x="5315" fg:w="1"/><text x="86.1559%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.08%)</title><rect x="85.9221%" y="181" width="0.0808%" height="15" fill="rgb(241,108,4)" fg:x="5316" fg:w="5"/><text x="86.1721%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.03%)</title><rect x="86.0029%" y="181" width="0.0323%" height="15" fill="rgb(247,173,49)" fg:x="5321" fg:w="2"/><text x="86.2529%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.03%)</title><rect x="86.0029%" y="165" width="0.0323%" height="15" fill="rgb(224,114,35)" fg:x="5321" fg:w="2"/><text x="86.2529%" y="175.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t&gt; (8 samples, 0.13%)</title><rect x="85.9221%" y="197" width="0.1293%" height="15" fill="rgb(245,159,27)" fg:x="5316" fg:w="8"/><text x="86.1721%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="86.0352%" y="181" width="0.0162%" height="15" fill="rgb(245,172,44)" fg:x="5323" fg:w="1"/><text x="86.2852%" y="191.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (2 samples, 0.03%)</title><rect x="86.0514%" y="197" width="0.0323%" height="15" fill="rgb(236,23,11)" fg:x="5324" fg:w="2"/><text x="86.3014%" y="207.50"></text></g><g><title>colors`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (1 samples, 0.02%)</title><rect x="86.0676%" y="181" width="0.0162%" height="15" fill="rgb(205,117,38)" fg:x="5325" fg:w="1"/><text x="86.3176%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::guess_segment_properties (5 samples, 0.08%)</title><rect x="86.0837%" y="197" width="0.0808%" height="15" fill="rgb(237,72,25)" fg:x="5326" fg:w="5"/><text x="86.3337%" y="207.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (3 samples, 0.05%)</title><rect x="86.1160%" y="181" width="0.0485%" height="15" fill="rgb(244,70,9)" fg:x="5328" fg:w="3"/><text x="86.3660%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::push_str (2 samples, 0.03%)</title><rect x="86.1645%" y="197" width="0.0323%" height="15" fill="rgb(217,125,39)" fg:x="5331" fg:w="2"/><text x="86.4145%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::compile (1 samples, 0.02%)</title><rect x="86.1969%" y="197" width="0.0162%" height="15" fill="rgb(235,36,10)" fg:x="5333" fg:w="1"/><text x="86.4469%" y="207.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::select_script (2 samples, 0.03%)</title><rect x="86.2130%" y="181" width="0.0323%" height="15" fill="rgb(251,123,47)" fg:x="5334" fg:w="2"/><text x="86.4630%" y="191.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::select_script_language (1 samples, 0.02%)</title><rect x="86.2454%" y="181" width="0.0162%" height="15" fill="rgb(221,13,13)" fg:x="5336" fg:w="1"/><text x="86.4954%" y="191.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="86.2615%" y="181" width="0.0162%" height="15" fill="rgb(238,131,9)" fg:x="5337" fg:w="1"/><text x="86.5115%" y="191.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::select_script_language (1 samples, 0.02%)</title><rect x="86.2777%" y="165" width="0.0162%" height="15" fill="rgb(211,50,8)" fg:x="5338" fg:w="1"/><text x="86.5277%" y="175.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Script as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (1 samples, 0.02%)</title><rect x="86.2938%" y="165" width="0.0162%" height="15" fill="rgb(245,182,24)" fg:x="5339" fg:w="1"/><text x="86.5438%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::new (11 samples, 0.18%)</title><rect x="86.2777%" y="181" width="0.1778%" height="15" fill="rgb(242,14,37)" fg:x="5338" fg:w="11"/><text x="86.5277%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::tag::tags_from_script_and_language (9 samples, 0.15%)</title><rect x="86.3100%" y="165" width="0.1455%" height="15" fill="rgb(246,228,12)" fg:x="5340" fg:w="9"/><text x="86.5600%" y="175.50"></text></g><g><title>colors`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="86.5363%" y="149" width="0.0162%" height="15" fill="rgb(213,55,15)" fg:x="5354" fg:w="1"/><text x="86.7863%" y="159.50"></text></g><g><title>colors`__rdl_realloc (1 samples, 0.02%)</title><rect x="86.5524%" y="149" width="0.0162%" height="15" fill="rgb(209,9,3)" fg:x="5355" fg:w="1"/><text x="86.8024%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="86.6333%" y="85" width="0.0162%" height="15" fill="rgb(230,59,30)" fg:x="5360" fg:w="1"/><text x="86.8833%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (5 samples, 0.08%)</title><rect x="86.6333%" y="101" width="0.0808%" height="15" fill="rgb(209,121,21)" fg:x="5360" fg:w="5"/><text x="86.8833%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.06%)</title><rect x="86.6494%" y="85" width="0.0647%" height="15" fill="rgb(220,109,13)" fg:x="5361" fg:w="4"/><text x="86.8994%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.06%)</title><rect x="86.6494%" y="69" width="0.0647%" height="15" fill="rgb(232,18,1)" fg:x="5361" fg:w="4"/><text x="86.8994%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.06%)</title><rect x="86.6494%" y="53" width="0.0647%" height="15" fill="rgb(215,41,42)" fg:x="5361" fg:w="4"/><text x="86.8994%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="86.6979%" y="37" width="0.0162%" height="15" fill="rgb(224,123,36)" fg:x="5364" fg:w="1"/><text x="86.9479%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.03%)</title><rect x="86.7302%" y="85" width="0.0323%" height="15" fill="rgb(240,125,3)" fg:x="5366" fg:w="2"/><text x="86.9802%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="86.7464%" y="69" width="0.0162%" height="15" fill="rgb(205,98,50)" fg:x="5367" fg:w="1"/><text x="86.9964%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="86.7626%" y="85" width="0.0162%" height="15" fill="rgb(205,185,37)" fg:x="5368" fg:w="1"/><text x="87.0126%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.03%)</title><rect x="86.7787%" y="85" width="0.0323%" height="15" fill="rgb(238,207,15)" fg:x="5369" fg:w="2"/><text x="87.0287%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="86.7949%" y="69" width="0.0162%" height="15" fill="rgb(213,199,42)" fg:x="5370" fg:w="1"/><text x="87.0449%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.11%)</title><rect x="86.7141%" y="101" width="0.1131%" height="15" fill="rgb(235,201,11)" fg:x="5365" fg:w="7"/><text x="86.9641%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="86.8111%" y="85" width="0.0162%" height="15" fill="rgb(207,46,11)" fg:x="5371" fg:w="1"/><text x="87.0611%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (18 samples, 0.29%)</title><rect x="86.5848%" y="117" width="0.2909%" height="15" fill="rgb(241,35,35)" fg:x="5357" fg:w="18"/><text x="86.8348%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.05%)</title><rect x="86.8272%" y="101" width="0.0485%" height="15" fill="rgb(243,32,47)" fg:x="5372" fg:w="3"/><text x="87.0772%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (20 samples, 0.32%)</title><rect x="86.5848%" y="133" width="0.3233%" height="15" fill="rgb(247,202,23)" fg:x="5357" fg:w="20"/><text x="86.8348%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.03%)</title><rect x="86.8757%" y="117" width="0.0323%" height="15" fill="rgb(219,102,11)" fg:x="5375" fg:w="2"/><text x="87.1257%" y="127.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (22 samples, 0.36%)</title><rect x="86.5686%" y="149" width="0.3556%" height="15" fill="rgb(243,110,44)" fg:x="5356" fg:w="22"/><text x="86.8186%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="86.9080%" y="133" width="0.0162%" height="15" fill="rgb(222,74,54)" fg:x="5377" fg:w="1"/><text x="87.1580%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (28 samples, 0.45%)</title><rect x="86.5040%" y="165" width="0.4526%" height="15" fill="rgb(216,99,12)" fg:x="5352" fg:w="28"/><text x="86.7540%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.03%)</title><rect x="86.9242%" y="149" width="0.0323%" height="15" fill="rgb(226,22,26)" fg:x="5378" fg:w="2"/><text x="87.1742%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::collect_features (32 samples, 0.52%)</title><rect x="86.4555%" y="181" width="0.5172%" height="15" fill="rgb(217,163,10)" fg:x="5349" fg:w="32"/><text x="86.7055%" y="191.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="86.9565%" y="165" width="0.0162%" height="15" fill="rgb(213,25,53)" fg:x="5380" fg:w="1"/><text x="87.2065%" y="175.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Feature as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (3 samples, 0.05%)</title><rect x="87.0050%" y="165" width="0.0485%" height="15" fill="rgb(252,105,26)" fg:x="5383" fg:w="3"/><text x="87.2550%" y="175.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::find_language_feature (7 samples, 0.11%)</title><rect x="87.0535%" y="165" width="0.1131%" height="15" fill="rgb(220,39,43)" fg:x="5386" fg:w="7"/><text x="87.3035%" y="175.50"></text></g><g><title>colors`__rdl_dealloc (1 samples, 0.02%)</title><rect x="87.1666%" y="165" width="0.0162%" height="15" fill="rgb(229,68,48)" fg:x="5393" fg:w="1"/><text x="87.4166%" y="175.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::insert_tail (6 samples, 0.10%)</title><rect x="87.1828%" y="165" width="0.0970%" height="15" fill="rgb(252,8,32)" fg:x="5394" fg:w="6"/><text x="87.4328%" y="175.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Feature as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (59 samples, 0.95%)</title><rect x="87.8616%" y="149" width="0.9536%" height="15" fill="rgb(223,20,43)" fg:x="5436" fg:w="59"/><text x="88.1116%" y="159.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::find_language_feature (102 samples, 1.65%)</title><rect x="88.8153%" y="149" width="1.6486%" height="15" fill="rgb(229,81,49)" fg:x="5495" fg:w="102"/><text x="89.0653%" y="159.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::get_required_language_feature (1 samples, 0.02%)</title><rect x="90.4639%" y="149" width="0.0162%" height="15" fill="rgb(236,28,36)" fg:x="5597" fg:w="1"/><text x="90.7139%" y="159.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Script as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (15 samples, 0.24%)</title><rect x="90.4800%" y="149" width="0.2424%" height="15" fill="rgb(249,185,26)" fg:x="5598" fg:w="15"/><text x="90.7300%" y="159.50"></text></g><g><title>colors`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="90.8195%" y="133" width="0.0162%" height="15" fill="rgb(249,174,33)" fg:x="5619" fg:w="1"/><text x="91.0695%" y="143.50"></text></g><g><title>colors`DYLD-STUB$$realloc (1 samples, 0.02%)</title><rect x="90.8356%" y="133" width="0.0162%" height="15" fill="rgb(233,201,37)" fg:x="5620" fg:w="1"/><text x="91.0856%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.06%)</title><rect x="90.9164%" y="85" width="0.0647%" height="15" fill="rgb(221,78,26)" fg:x="5625" fg:w="4"/><text x="91.1664%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="91.0134%" y="69" width="0.0162%" height="15" fill="rgb(250,127,30)" fg:x="5631" fg:w="1"/><text x="91.2634%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="91.0296%" y="69" width="0.0162%" height="15" fill="rgb(230,49,44)" fg:x="5632" fg:w="1"/><text x="91.2796%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.05%)</title><rect x="91.0457%" y="69" width="0.0485%" height="15" fill="rgb(229,67,23)" fg:x="5633" fg:w="3"/><text x="91.2957%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (8 samples, 0.13%)</title><rect x="90.9811%" y="85" width="0.1293%" height="15" fill="rgb(249,83,47)" fg:x="5629" fg:w="8"/><text x="91.2311%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="91.0942%" y="69" width="0.0162%" height="15" fill="rgb(215,43,3)" fg:x="5636" fg:w="1"/><text x="91.3442%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="91.0942%" y="53" width="0.0162%" height="15" fill="rgb(238,154,13)" fg:x="5636" fg:w="1"/><text x="91.3442%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="91.0942%" y="37" width="0.0162%" height="15" fill="rgb(219,56,2)" fg:x="5636" fg:w="1"/><text x="91.3442%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (16 samples, 0.26%)</title><rect x="90.8679%" y="101" width="0.2586%" height="15" fill="rgb(233,0,4)" fg:x="5622" fg:w="16"/><text x="91.1179%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="91.1104%" y="85" width="0.0162%" height="15" fill="rgb(235,30,7)" fg:x="5637" fg:w="1"/><text x="91.3604%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (18 samples, 0.29%)</title><rect x="90.8518%" y="117" width="0.2909%" height="15" fill="rgb(250,79,13)" fg:x="5621" fg:w="18"/><text x="91.1018%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.02%)</title><rect x="91.1266%" y="101" width="0.0162%" height="15" fill="rgb(211,146,34)" fg:x="5638" fg:w="1"/><text x="91.3766%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.05%)</title><rect x="91.1427%" y="117" width="0.0485%" height="15" fill="rgb(228,22,38)" fg:x="5639" fg:w="3"/><text x="91.3927%" y="127.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (24 samples, 0.39%)</title><rect x="90.8518%" y="133" width="0.3879%" height="15" fill="rgb(235,168,5)" fg:x="5621" fg:w="24"/><text x="91.1018%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.05%)</title><rect x="91.1912%" y="117" width="0.0485%" height="15" fill="rgb(221,155,16)" fg:x="5642" fg:w="3"/><text x="91.4412%" y="127.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (34 samples, 0.55%)</title><rect x="90.7225%" y="149" width="0.5495%" height="15" fill="rgb(215,215,53)" fg:x="5613" fg:w="34"/><text x="90.9725%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.03%)</title><rect x="91.2397%" y="133" width="0.0323%" height="15" fill="rgb(223,4,10)" fg:x="5645" fg:w="2"/><text x="91.4897%" y="143.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (13 samples, 0.21%)</title><rect x="91.3043%" y="101" width="0.2101%" height="15" fill="rgb(234,103,6)" fg:x="5649" fg:w="13"/><text x="91.5543%" y="111.50"></text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::compile (263 samples, 4.25%)</title><rect x="87.2798%" y="165" width="4.2508%" height="15" fill="rgb(227,97,0)" fg:x="5400" fg:w="263"/><text x="87.5298%" y="175.50">color..</text></g><g><title>colors`core::slice::sort::stable::driftsort_main (16 samples, 0.26%)</title><rect x="91.2720%" y="149" width="0.2586%" height="15" fill="rgb(234,150,53)" fg:x="5647" fg:w="16"/><text x="91.5220%" y="159.50"></text></g><g><title>colors`core::slice::sort::stable::drift::sort (16 samples, 0.26%)</title><rect x="91.2720%" y="133" width="0.2586%" height="15" fill="rgb(228,201,54)" fg:x="5647" fg:w="16"/><text x="91.5220%" y="143.50"></text></g><g><title>colors`core::slice::sort::stable::quicksort::quicksort (14 samples, 0.23%)</title><rect x="91.3043%" y="117" width="0.2263%" height="15" fill="rgb(222,22,37)" fg:x="5649" fg:w="14"/><text x="91.5543%" y="127.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::sort4_stable (1 samples, 0.02%)</title><rect x="91.5145%" y="101" width="0.0162%" height="15" fill="rgb(237,53,32)" fg:x="5662" fg:w="1"/><text x="91.7645%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="91.5306%" y="165" width="0.0162%" height="15" fill="rgb(233,25,53)" fg:x="5663" fg:w="1"/><text x="91.7806%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::compile (284 samples, 4.59%)</title><rect x="86.9727%" y="181" width="4.5903%" height="15" fill="rgb(210,40,34)" fg:x="5381" fg:w="284"/><text x="87.2227%" y="191.50">color..</text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="91.5468%" y="165" width="0.0162%" height="15" fill="rgb(241,220,44)" fg:x="5664" fg:w="1"/><text x="91.7968%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::tag::tags_from_script_and_language (2 samples, 0.03%)</title><rect x="91.5630%" y="181" width="0.0323%" height="15" fill="rgb(235,28,35)" fg:x="5665" fg:w="2"/><text x="91.8130%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="91.5953%" y="181" width="0.0162%" height="15" fill="rgb(210,56,17)" fg:x="5667" fg:w="1"/><text x="91.8453%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t::new (336 samples, 5.43%)</title><rect x="86.2130%" y="197" width="5.4307%" height="15" fill="rgb(224,130,29)" fg:x="5334" fg:w="336"/><text x="86.4630%" y="207.50">colors`..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.03%)</title><rect x="91.6114%" y="181" width="0.0323%" height="15" fill="rgb(235,212,8)" fg:x="5668" fg:w="2"/><text x="91.8614%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::guess_segment_properties (4 samples, 0.06%)</title><rect x="91.6438%" y="181" width="0.0647%" height="15" fill="rgb(223,33,50)" fg:x="5670" fg:w="4"/><text x="91.8938%" y="191.50"></text></g><g><title>colors`&lt;char as unicode_properties::general_category::UnicodeGeneralCategory&gt;::general_category (4 samples, 0.06%)</title><rect x="91.7246%" y="165" width="0.0647%" height="15" fill="rgb(219,149,13)" fg:x="5675" fg:w="4"/><text x="91.9746%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::sync (2 samples, 0.03%)</title><rect x="91.7892%" y="165" width="0.0323%" height="15" fill="rgb(250,156,29)" fg:x="5679" fg:w="2"/><text x="92.0392%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_glyph_info_t::init_unicode_props (3 samples, 0.05%)</title><rect x="91.8216%" y="165" width="0.0485%" height="15" fill="rgb(216,193,19)" fg:x="5681" fg:w="3"/><text x="92.0716%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::ot_layout::apply_layout_table (19 samples, 0.31%)</title><rect x="91.8701%" y="165" width="0.3071%" height="15" fill="rgb(216,135,14)" fg:x="5684" fg:w="19"/><text x="92.1201%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::sync (2 samples, 0.03%)</title><rect x="92.1448%" y="149" width="0.0323%" height="15" fill="rgb(241,47,5)" fg:x="5701" fg:w="2"/><text x="92.3948%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::next_glyphs (2 samples, 0.03%)</title><rect x="92.1448%" y="133" width="0.0323%" height="15" fill="rgb(233,42,35)" fg:x="5701" fg:w="2"/><text x="92.3948%" y="143.50"></text></g><g><title>colors`rustybuzz::hb::ot_layout::hb_ot_layout_substitute_start (1 samples, 0.02%)</title><rect x="92.1771%" y="165" width="0.0162%" height="15" fill="rgb(231,13,6)" fg:x="5703" fg:w="1"/><text x="92.4271%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::sync (3 samples, 0.05%)</title><rect x="92.2256%" y="149" width="0.0485%" height="15" fill="rgb(207,181,40)" fg:x="5706" fg:w="3"/><text x="92.4756%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::get_nominal_glyph (6 samples, 0.10%)</title><rect x="92.2741%" y="149" width="0.0970%" height="15" fill="rgb(254,173,49)" fg:x="5709" fg:w="6"/><text x="92.5241%" y="159.50"></text></g><g><title>colors`ttf_parser::tables::cmap::Subtables::get (2 samples, 0.03%)</title><rect x="92.3388%" y="133" width="0.0323%" height="15" fill="rgb(221,1,38)" fg:x="5713" fg:w="2"/><text x="92.5888%" y="143.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_normalize::_hb_ot_shape_normalize (13 samples, 0.21%)</title><rect x="92.1933%" y="165" width="0.2101%" height="15" fill="rgb(206,124,46)" fg:x="5704" fg:w="13"/><text x="92.4433%" y="175.50"></text></g><g><title>colors`ttf_parser::tables::cmap::format12::Subtable12::glyph_index (2 samples, 0.03%)</title><rect x="92.3711%" y="149" width="0.0323%" height="15" fill="rgb(249,21,11)" fg:x="5715" fg:w="2"/><text x="92.6211%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::shape::shape_with_plan (48 samples, 0.78%)</title><rect x="91.6438%" y="197" width="0.7758%" height="15" fill="rgb(222,201,40)" fg:x="5670" fg:w="48"/><text x="91.8938%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::shape_internal (44 samples, 0.71%)</title><rect x="91.7084%" y="181" width="0.7112%" height="15" fill="rgb(235,61,29)" fg:x="5674" fg:w="44"/><text x="91.9584%" y="191.50"></text></g><g><title>colors`ttf_parser::ggg::ClassDefinition::get (1 samples, 0.02%)</title><rect x="92.4034%" y="165" width="0.0162%" height="15" fill="rgb(219,207,3)" fg:x="5717" fg:w="1"/><text x="92.6534%" y="175.50"></text></g><g><title>colors`cosmic_text::shape::shape_fallback (409 samples, 6.61%)</title><rect x="85.8251%" y="213" width="6.6106%" height="15" fill="rgb(222,56,46)" fg:x="5310" fg:w="409"/><text x="86.0751%" y="223.50">colors`co..</text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="92.4196%" y="197" width="0.0162%" height="15" fill="rgb(239,76,54)" fg:x="5718" fg:w="1"/><text x="92.6696%" y="207.50"></text></g><g><title>colors`fontdb::Database::face (43 samples, 0.70%)</title><rect x="92.4358%" y="213" width="0.6950%" height="15" fill="rgb(231,124,27)" fg:x="5719" fg:w="43"/><text x="92.6858%" y="223.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::clear (1 samples, 0.02%)</title><rect x="93.1308%" y="213" width="0.0162%" height="15" fill="rgb(249,195,6)" fg:x="5762" fg:w="1"/><text x="93.3808%" y="223.50"></text></g><g><title>colors`rustybuzz::hb::shape::shape_with_plan (1 samples, 0.02%)</title><rect x="93.1469%" y="213" width="0.0162%" height="15" fill="rgb(237,174,47)" fg:x="5763" fg:w="1"/><text x="93.3969%" y="223.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (1,584 samples, 25.60%)</title><rect x="67.6580%" y="229" width="25.6021%" height="15" fill="rgb(206,201,31)" fg:x="4186" fg:w="1584"/><text x="67.9080%" y="239.50">colors`cosmic_text::shape::Shaping::run</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (6 samples, 0.10%)</title><rect x="93.1631%" y="213" width="0.0970%" height="15" fill="rgb(231,57,52)" fg:x="5764" fg:w="6"/><text x="93.4131%" y="223.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (1,599 samples, 25.84%)</title><rect x="67.4317%" y="261" width="25.8445%" height="15" fill="rgb(248,177,22)" fg:x="4172" fg:w="1599"/><text x="67.6817%" y="271.50">colors`cosmic_text::shape::ShapeSpan::bui..</text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (1,592 samples, 25.73%)</title><rect x="67.5449%" y="245" width="25.7314%" height="15" fill="rgb(215,211,37)" fg:x="4179" fg:w="1592"/><text x="67.7949%" y="255.50">colors`cosmic_text::shape::ShapeWord::bui..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="93.2601%" y="229" width="0.0162%" height="15" fill="rgb(241,128,51)" fg:x="5770" fg:w="1"/><text x="93.5101%" y="239.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.03%)</title><rect x="93.4217%" y="245" width="0.0323%" height="15" fill="rgb(227,165,31)" fg:x="5780" fg:w="2"/><text x="93.6717%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="93.4379%" y="229" width="0.0162%" height="15" fill="rgb(228,167,24)" fg:x="5781" fg:w="1"/><text x="93.6879%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="93.4540%" y="245" width="0.0162%" height="15" fill="rgb(228,143,12)" fg:x="5782" fg:w="1"/><text x="93.7040%" y="255.50"></text></g><g><title>colors`unicode_bidi::BidiInfo::new_with_data_source (15 samples, 0.24%)</title><rect x="93.2762%" y="261" width="0.2424%" height="15" fill="rgb(249,149,8)" fg:x="5771" fg:w="15"/><text x="93.5262%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.05%)</title><rect x="93.4702%" y="245" width="0.0485%" height="15" fill="rgb(243,35,44)" fg:x="5783" fg:w="3"/><text x="93.7202%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="93.5187%" y="261" width="0.0162%" height="15" fill="rgb(246,89,9)" fg:x="5786" fg:w="1"/><text x="93.7687%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="93.5348%" y="261" width="0.0162%" height="15" fill="rgb(233,213,13)" fg:x="5787" fg:w="1"/><text x="93.7848%" y="271.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (1,625 samples, 26.26%)</title><rect x="67.3671%" y="277" width="26.2647%" height="15" fill="rgb(233,141,41)" fg:x="4168" fg:w="1625"/><text x="67.6171%" y="287.50">colors`cosmic_text::shape::ShapeLine::build</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.08%)</title><rect x="93.5510%" y="261" width="0.0808%" height="15" fill="rgb(239,167,4)" fg:x="5788" fg:w="5"/><text x="93.8010%" y="271.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (1 samples, 0.02%)</title><rect x="93.6318%" y="277" width="0.0162%" height="15" fill="rgb(209,217,16)" fg:x="5793" fg:w="1"/><text x="93.8818%" y="287.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (1,627 samples, 26.30%)</title><rect x="67.3671%" y="293" width="26.2971%" height="15" fill="rgb(219,88,35)" fg:x="4168" fg:w="1627"/><text x="67.6171%" y="303.50">colors`cosmic_text::buffer_line::BufferLin..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="93.6480%" y="277" width="0.0162%" height="15" fill="rgb(220,193,23)" fg:x="5794" fg:w="1"/><text x="93.8980%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer::_{{closure}} (2 samples, 0.03%)</title><rect x="93.7449%" y="277" width="0.0323%" height="15" fill="rgb(230,90,52)" fg:x="5800" fg:w="2"/><text x="93.9949%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="93.7773%" y="277" width="0.0162%" height="15" fill="rgb(252,106,19)" fg:x="5802" fg:w="1"/><text x="94.0273%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer (11 samples, 0.18%)</title><rect x="93.6641%" y="293" width="0.1778%" height="15" fill="rgb(206,74,20)" fg:x="5795" fg:w="11"/><text x="93.9141%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.05%)</title><rect x="93.7934%" y="277" width="0.0485%" height="15" fill="rgb(230,138,44)" fg:x="5803" fg:w="3"/><text x="94.0434%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="93.8419%" y="293" width="0.0162%" height="15" fill="rgb(235,182,43)" fg:x="5806" fg:w="1"/><text x="94.0919%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="93.8581%" y="293" width="0.0162%" height="15" fill="rgb(242,16,51)" fg:x="5807" fg:w="1"/><text x="94.1081%" y="303.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (1,642 samples, 26.54%)</title><rect x="67.3509%" y="325" width="26.5395%" height="15" fill="rgb(248,9,4)" fg:x="4167" fg:w="1642"/><text x="67.6009%" y="335.50">colors`cosmic_text::buffer::Buffer::shape_..</text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (1,641 samples, 26.52%)</title><rect x="67.3671%" y="309" width="26.5234%" height="15" fill="rgb(210,31,22)" fg:x="4168" fg:w="1641"/><text x="67.6171%" y="319.50">colors`cosmic_text::buffer_line::BufferLin..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="93.8743%" y="293" width="0.0162%" height="15" fill="rgb(239,54,39)" fg:x="5808" fg:w="1"/><text x="94.1243%" y="303.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (1,658 samples, 26.80%)</title><rect x="67.1085%" y="341" width="26.7981%" height="15" fill="rgb(230,99,41)" fg:x="4152" fg:w="1658"/><text x="67.3585%" y="351.50">colors`cosmic_text::buffer::Buffer::set_text</text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="93.8904%" y="325" width="0.0162%" height="15" fill="rgb(253,106,12)" fg:x="5809" fg:w="1"/><text x="94.1404%" y="335.50"></text></g><g><title>colors`cosmic_text::layout::LayoutGlyph::physical (1 samples, 0.02%)</title><rect x="93.9066%" y="341" width="0.0162%" height="15" fill="rgb(213,46,41)" fg:x="5810" fg:w="1"/><text x="94.1566%" y="351.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="93.9389%" y="293" width="0.0162%" height="15" fill="rgb(215,133,35)" fg:x="5812" fg:w="1"/><text x="94.1889%" y="303.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (14 samples, 0.23%)</title><rect x="94.0359%" y="277" width="0.2263%" height="15" fill="rgb(213,28,5)" fg:x="5818" fg:w="14"/><text x="94.2859%" y="287.50"></text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (2 samples, 0.03%)</title><rect x="94.2622%" y="277" width="0.0323%" height="15" fill="rgb(215,77,49)" fg:x="5832" fg:w="2"/><text x="94.5122%" y="287.50"></text></g><g><title>colors`tiny_skia::shaders::pattern::Pattern::push_stages (3 samples, 0.05%)</title><rect x="94.2945%" y="277" width="0.0485%" height="15" fill="rgb(248,100,22)" fg:x="5834" fg:w="3"/><text x="94.5445%" y="287.50"></text></g><g><title>colors`tiny_skia_path::transform::Transform::invert (1 samples, 0.02%)</title><rect x="94.3430%" y="277" width="0.0162%" height="15" fill="rgb(208,67,9)" fg:x="5837" fg:w="1"/><text x="94.5930%" y="287.50"></text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (28 samples, 0.45%)</title><rect x="93.9551%" y="293" width="0.4526%" height="15" fill="rgb(219,133,21)" fg:x="5813" fg:w="28"/><text x="94.2051%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.05%)</title><rect x="94.3591%" y="277" width="0.0485%" height="15" fill="rgb(246,46,29)" fg:x="5838" fg:w="3"/><text x="94.6091%" y="287.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::load_mask_u8 (1 samples, 0.02%)</title><rect x="94.4076%" y="261" width="0.0162%" height="15" fill="rgb(246,185,52)" fg:x="5841" fg:w="1"/><text x="94.6576%" y="271.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::seed_shader (12 samples, 0.19%)</title><rect x="94.4238%" y="261" width="0.1940%" height="15" fill="rgb(252,136,11)" fg:x="5842" fg:w="12"/><text x="94.6738%" y="271.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::source_over_rgba_tail (1 samples, 0.02%)</title><rect x="94.6177%" y="261" width="0.0162%" height="15" fill="rgb(219,138,53)" fg:x="5854" fg:w="1"/><text x="94.8677%" y="271.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::gather (24 samples, 0.39%)</title><rect x="94.6824%" y="245" width="0.3879%" height="15" fill="rgb(211,51,23)" fg:x="5858" fg:w="24"/><text x="94.9324%" y="255.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::source_over_rgba (63 samples, 1.02%)</title><rect x="95.0703%" y="245" width="1.0183%" height="15" fill="rgb(247,221,28)" fg:x="5882" fg:w="63"/><text x="95.3203%" y="255.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::source_over_rgba_tail (52 samples, 0.84%)</title><rect x="96.0886%" y="245" width="0.8405%" height="15" fill="rgb(251,222,45)" fg:x="5945" fg:w="52"/><text x="96.3386%" y="255.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::start (153 samples, 2.47%)</title><rect x="94.6339%" y="261" width="2.4729%" height="15" fill="rgb(217,162,53)" fg:x="5855" fg:w="153"/><text x="94.8839%" y="271.50">co..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.18%)</title><rect x="96.9290%" y="245" width="0.1778%" height="15" fill="rgb(229,93,14)" fg:x="5997" fg:w="11"/><text x="97.1790%" y="255.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (174 samples, 2.81%)</title><rect x="94.4076%" y="277" width="2.8123%" height="15" fill="rgb(209,67,49)" fg:x="5841" fg:w="174"/><text x="94.6576%" y="287.50">co..</text></g><g><title>colors`tiny_skia::pipeline::highp::transform (7 samples, 0.11%)</title><rect x="97.1068%" y="261" width="0.1131%" height="15" fill="rgb(213,87,29)" fg:x="6008" fg:w="7"/><text x="97.3568%" y="271.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (175 samples, 2.83%)</title><rect x="94.4076%" y="293" width="2.8285%" height="15" fill="rgb(205,151,52)" fg:x="5841" fg:w="175"/><text x="94.6576%" y="303.50">co..</text></g><g><title>colors`tiny_skia::pipeline::highp::start (1 samples, 0.02%)</title><rect x="97.2200%" y="277" width="0.0162%" height="15" fill="rgb(253,215,39)" fg:x="6015" fg:w="1"/><text x="97.4700%" y="287.50"></text></g><g><title>colors`tiny_skia::shaders::pattern::Pattern::push_stages (1 samples, 0.02%)</title><rect x="97.2361%" y="293" width="0.0162%" height="15" fill="rgb(221,220,41)" fg:x="6016" fg:w="1"/><text x="97.4861%" y="303.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::intersect (2 samples, 0.03%)</title><rect x="97.2523%" y="293" width="0.0323%" height="15" fill="rgb(218,133,21)" fg:x="6017" fg:w="2"/><text x="97.5023%" y="303.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (212 samples, 3.43%)</title><rect x="93.9227%" y="309" width="3.4265%" height="15" fill="rgb(221,193,43)" fg:x="5811" fg:w="212"/><text x="94.1727%" y="319.50">col..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.06%)</title><rect x="97.2846%" y="293" width="0.0647%" height="15" fill="rgb(240,128,52)" fg:x="6019" fg:w="4"/><text x="97.5346%" y="303.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::draw_pixmap (218 samples, 3.52%)</title><rect x="93.9227%" y="325" width="3.5235%" height="15" fill="rgb(253,114,12)" fg:x="5811" fg:w="218"/><text x="94.1727%" y="335.50">col..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.10%)</title><rect x="97.3493%" y="309" width="0.0970%" height="15" fill="rgb(215,223,47)" fg:x="6023" fg:w="6"/><text x="97.5993%" y="319.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (1 samples, 0.02%)</title><rect x="97.4463%" y="325" width="0.0162%" height="15" fill="rgb(248,225,23)" fg:x="6029" fg:w="1"/><text x="97.6963%" y="335.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::draw_pixmap (220 samples, 3.56%)</title><rect x="93.9227%" y="341" width="3.5558%" height="15" fill="rgb(250,108,0)" fg:x="5811" fg:w="220"/><text x="94.1727%" y="351.50">colo..</text></g><g><title>colors`tiny_skia_path::size::IntSize::to_int_rect (1 samples, 0.02%)</title><rect x="97.4624%" y="325" width="0.0162%" height="15" fill="rgb(228,208,7)" fg:x="6030" fg:w="1"/><text x="97.7124%" y="335.50"></text></g><g><title>colors`tiny_skia::pixmap::PixmapMut::fill (3 samples, 0.05%)</title><rect x="97.4786%" y="341" width="0.0485%" height="15" fill="rgb(244,45,10)" fg:x="6031" fg:w="3"/><text x="97.7286%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="97.5271%" y="341" width="0.0162%" height="15" fill="rgb(207,125,25)" fg:x="6034" fg:w="1"/><text x="97.7771%" y="351.50"></text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::draw_cell (6,031 samples, 97.48%)</title><rect x="0.0808%" y="357" width="97.4786%" height="15" fill="rgb(210,195,18)" fg:x="5" fg:w="6031"/><text x="0.3308%" y="367.50">colors`soft_ratatui::soft_backend::SoftBackend::draw_cell</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="97.5432%" y="341" width="0.0162%" height="15" fill="rgb(249,80,12)" fg:x="6035" fg:w="1"/><text x="97.7932%" y="351.50"></text></g><g><title>colors`std::fs::write::inner (1 samples, 0.02%)</title><rect x="97.5594%" y="357" width="0.0162%" height="15" fill="rgb(221,65,9)" fg:x="6036" fg:w="1"/><text x="97.8094%" y="367.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (1 samples, 0.02%)</title><rect x="97.5594%" y="341" width="0.0162%" height="15" fill="rgb(235,49,36)" fg:x="6036" fg:w="1"/><text x="97.8094%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.02%)</title><rect x="97.5594%" y="325" width="0.0162%" height="15" fill="rgb(225,32,20)" fg:x="6036" fg:w="1"/><text x="97.8094%" y="335.50"></text></g><g><title>colors`crc32fast::Hasher::update (5 samples, 0.08%)</title><rect x="97.8180%" y="325" width="0.0808%" height="15" fill="rgb(215,141,46)" fg:x="6052" fg:w="5"/><text x="98.0680%" y="335.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (8 samples, 0.13%)</title><rect x="98.1251%" y="309" width="0.1293%" height="15" fill="rgb(250,160,47)" fg:x="6071" fg:w="8"/><text x="98.3751%" y="319.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_data (77 samples, 1.24%)</title><rect x="97.8988%" y="325" width="1.2445%" height="15" fill="rgb(216,222,40)" fg:x="6057" fg:w="77"/><text x="98.1488%" y="335.50"></text></g><g><title>colors`simd_adler32::imp::scalar::update (55 samples, 0.89%)</title><rect x="98.2544%" y="309" width="0.8890%" height="15" fill="rgb(234,217,39)" fg:x="6079" fg:w="55"/><text x="98.5044%" y="319.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (9 samples, 0.15%)</title><rect x="99.1434%" y="325" width="0.1455%" height="15" fill="rgb(207,178,40)" fg:x="6134" fg:w="9"/><text x="99.3934%" y="335.50"></text></g><g><title>colors`png::filter::filter (3 samples, 0.05%)</title><rect x="99.2888%" y="325" width="0.0485%" height="15" fill="rgb(221,136,13)" fg:x="6143" fg:w="3"/><text x="99.5388%" y="335.50"></text></g><g><title>colors`png::filter::filter_internal (3 samples, 0.05%)</title><rect x="99.2888%" y="309" width="0.0485%" height="15" fill="rgb(249,199,10)" fg:x="6143" fg:w="3"/><text x="99.5388%" y="319.50"></text></g><g><title>colors`tiny_skia::pixmap::PixmapRef::encode_png (110 samples, 1.78%)</title><rect x="97.5756%" y="357" width="1.7779%" height="15" fill="rgb(249,222,13)" fg:x="6037" fg:w="110"/><text x="97.8256%" y="367.50">c..</text></g><g><title>colors`png::encoder::Writer&lt;W&gt;::write_image_data (95 samples, 1.54%)</title><rect x="97.8180%" y="341" width="1.5355%" height="15" fill="rgb(244,185,38)" fg:x="6052" fg:w="95"/><text x="98.0680%" y="351.50"></text></g><g><title>colors`simd_adler32::Adler32::write (1 samples, 0.02%)</title><rect x="99.3373%" y="325" width="0.0162%" height="15" fill="rgb(236,202,9)" fg:x="6146" fg:w="1"/><text x="99.5873%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`close (4 samples, 0.06%)</title><rect x="99.3535%" y="357" width="0.0647%" height="15" fill="rgb(250,229,37)" fg:x="6147" fg:w="4"/><text x="99.6035%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.02%)</title><rect x="99.4181%" y="357" width="0.0162%" height="15" fill="rgb(206,174,23)" fg:x="6151" fg:w="1"/><text x="99.6681%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="99.4343%" y="357" width="0.0162%" height="15" fill="rgb(211,33,43)" fg:x="6152" fg:w="1"/><text x="99.6843%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.05%)</title><rect x="99.4505%" y="357" width="0.0485%" height="15" fill="rgb(245,58,50)" fg:x="6153" fg:w="3"/><text x="99.7005%" y="367.50"></text></g><g><title>colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw (6,159 samples, 99.55%)</title><rect x="0.0647%" y="373" width="99.5474%" height="15" fill="rgb(244,68,36)" fg:x="4" fg:w="6159"/><text x="0.3147%" y="383.50">colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw</text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.11%)</title><rect x="99.4989%" y="357" width="0.1131%" height="15" fill="rgb(232,229,15)" fg:x="6156" fg:w="7"/><text x="99.7489%" y="367.50"></text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (1 samples, 0.02%)</title><rect x="99.6121%" y="373" width="0.0162%" height="15" fill="rgb(254,30,23)" fg:x="6163" fg:w="1"/><text x="99.8621%" y="383.50"></text></g><g><title>colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw (6,165 samples, 99.64%)</title><rect x="0.0162%" y="389" width="99.6444%" height="15" fill="rgb(235,160,14)" fg:x="1" fg:w="6165"/><text x="0.2662%" y="399.50">colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw</text></g><g><title>colors`ratatui::buffer::buffer::Buffer::diff (2 samples, 0.03%)</title><rect x="99.6283%" y="373" width="0.0323%" height="15" fill="rgb(212,155,44)" fg:x="6164" fg:w="2"/><text x="99.8783%" y="383.50"></text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (2 samples, 0.03%)</title><rect x="99.6283%" y="357" width="0.0323%" height="15" fill="rgb(226,2,50)" fg:x="6164" fg:w="2"/><text x="99.8783%" y="367.50"></text></g><g><title>colors`unicode_width::tables::lookup_width (2 samples, 0.03%)</title><rect x="99.6283%" y="341" width="0.0323%" height="15" fill="rgb(234,177,6)" fg:x="6164" fg:w="2"/><text x="99.8783%" y="351.50"></text></g><g><title>colors`cosmic_text::font::Font::new (1 samples, 0.02%)</title><rect x="99.6606%" y="213" width="0.0162%" height="15" fill="rgb(217,24,9)" fg:x="6166" fg:w="1"/><text x="99.9106%" y="223.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::from_slice (1 samples, 0.02%)</title><rect x="99.6606%" y="197" width="0.0162%" height="15" fill="rgb(220,13,46)" fg:x="6166" fg:w="1"/><text x="99.9106%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::from_face (1 samples, 0.02%)</title><rect x="99.6606%" y="181" width="0.0162%" height="15" fill="rgb(239,221,27)" fg:x="6166" fg:w="1"/><text x="99.9106%" y="191.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="99.6606%" y="165" width="0.0162%" height="15" fill="rgb(222,198,25)" fg:x="6166" fg:w="1"/><text x="99.9106%" y="175.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::Coverage as rustybuzz::hb::ot_layout_common::CoverageExt&gt;::collect (1 samples, 0.02%)</title><rect x="99.6606%" y="149" width="0.0162%" height="15" fill="rgb(211,99,13)" fg:x="6166" fg:w="1"/><text x="99.9106%" y="159.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="99.6606%" y="245" width="0.0323%" height="15" fill="rgb(232,111,31)" fg:x="6166" fg:w="2"/><text x="99.9106%" y="255.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (2 samples, 0.03%)</title><rect x="99.6606%" y="229" width="0.0323%" height="15" fill="rgb(245,82,37)" fg:x="6166" fg:w="2"/><text x="99.9106%" y="239.50"></text></g><g><title>colors`fontdb::Database::make_shared_face_data (1 samples, 0.02%)</title><rect x="99.6767%" y="213" width="0.0162%" height="15" fill="rgb(227,149,46)" fg:x="6167" fg:w="1"/><text x="99.9267%" y="223.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (1 samples, 0.02%)</title><rect x="99.6767%" y="197" width="0.0162%" height="15" fill="rgb(218,36,50)" fg:x="6167" fg:w="1"/><text x="99.9267%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.02%)</title><rect x="99.6767%" y="181" width="0.0162%" height="15" fill="rgb(226,80,48)" fg:x="6167" fg:w="1"/><text x="99.9267%" y="191.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (3 samples, 0.05%)</title><rect x="99.6606%" y="373" width="0.0485%" height="15" fill="rgb(238,224,15)" fg:x="6166" fg:w="3"/><text x="99.9106%" y="383.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (3 samples, 0.05%)</title><rect x="99.6606%" y="357" width="0.0485%" height="15" fill="rgb(241,136,10)" fg:x="6166" fg:w="3"/><text x="99.9106%" y="367.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (3 samples, 0.05%)</title><rect x="99.6606%" y="341" width="0.0485%" height="15" fill="rgb(208,32,45)" fg:x="6166" fg:w="3"/><text x="99.9106%" y="351.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (3 samples, 0.05%)</title><rect x="99.6606%" y="325" width="0.0485%" height="15" fill="rgb(207,135,9)" fg:x="6166" fg:w="3"/><text x="99.9106%" y="335.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (3 samples, 0.05%)</title><rect x="99.6606%" y="309" width="0.0485%" height="15" fill="rgb(206,86,44)" fg:x="6166" fg:w="3"/><text x="99.9106%" y="319.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (3 samples, 0.05%)</title><rect x="99.6606%" y="293" width="0.0485%" height="15" fill="rgb(245,177,15)" fg:x="6166" fg:w="3"/><text x="99.9106%" y="303.50"></text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (3 samples, 0.05%)</title><rect x="99.6606%" y="277" width="0.0485%" height="15" fill="rgb(206,64,50)" fg:x="6166" fg:w="3"/><text x="99.9106%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (3 samples, 0.05%)</title><rect x="99.6606%" y="261" width="0.0485%" height="15" fill="rgb(234,36,40)" fg:x="6166" fg:w="3"/><text x="99.9106%" y="271.50"></text></g><g><title>colors`cosmic_text::shape::shape_fallback (1 samples, 0.02%)</title><rect x="99.6929%" y="245" width="0.0162%" height="15" fill="rgb(213,64,8)" fg:x="6168" fg:w="1"/><text x="99.9429%" y="255.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="99.6929%" y="229" width="0.0162%" height="15" fill="rgb(210,75,36)" fg:x="6168" fg:w="1"/><text x="99.9429%" y="239.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.6929%" y="213" width="0.0162%" height="15" fill="rgb(229,88,21)" fg:x="6168" fg:w="1"/><text x="99.9429%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.6929%" y="197" width="0.0162%" height="15" fill="rgb(252,204,47)" fg:x="6168" fg:w="1"/><text x="99.9429%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.6929%" y="181" width="0.0162%" height="15" fill="rgb(208,77,27)" fg:x="6168" fg:w="1"/><text x="99.9429%" y="191.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_locale (1 samples, 0.02%)</title><rect x="99.7252%" y="357" width="0.0162%" height="15" fill="rgb(221,76,26)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="367.50"></text></g><g><title>colors`sys_locale::get_locale (1 samples, 0.02%)</title><rect x="99.7252%" y="341" width="0.0162%" height="15" fill="rgb(225,139,18)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="351.50"></text></g><g><title>CoreFoundation`CFLocaleCopyPreferredLanguages (1 samples, 0.02%)</title><rect x="99.7252%" y="325" width="0.0162%" height="15" fill="rgb(230,137,11)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="335.50"></text></g><g><title>Foundation`@objc static NSLocale._preferredLanguagesForCurrentUser(_:) (1 samples, 0.02%)</title><rect x="99.7252%" y="309" width="0.0162%" height="15" fill="rgb(212,28,1)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="319.50"></text></g><g><title>Foundation`LocaleCache.preferredLanguages(forCurrentUser:) (1 samples, 0.02%)</title><rect x="99.7252%" y="293" width="0.0162%" height="15" fill="rgb(248,164,17)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="303.50"></text></g><g><title>CoreFoundation`_CFPreferencesCopyAppValueWithContainerAndConfiguration (1 samples, 0.02%)</title><rect x="99.7252%" y="277" width="0.0162%" height="15" fill="rgb(222,171,42)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="287.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:] (1 samples, 0.02%)</title><rect x="99.7252%" y="261" width="0.0162%" height="15" fill="rgb(243,84,45)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="271.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchListForIdentifier:container:cloudConfigurationURL:perform:] (1 samples, 0.02%)</title><rect x="99.7252%" y="245" width="0.0162%" height="15" fill="rgb(252,49,23)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="255.50"></text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke (1 samples, 0.02%)</title><rect x="99.7252%" y="229" width="0.0162%" height="15" fill="rgb(215,19,7)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="239.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchLists:] (1 samples, 0.02%)</title><rect x="99.7252%" y="213" width="0.0162%" height="15" fill="rgb(238,81,41)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="223.50"></text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke.152 (1 samples, 0.02%)</title><rect x="99.7252%" y="197" width="0.0162%" height="15" fill="rgb(210,199,37)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="207.50"></text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource addSourceForIdentifier:user:byHost:container:] (1 samples, 0.02%)</title><rect x="99.7252%" y="181" width="0.0162%" height="15" fill="rgb(244,192,49)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="191.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSourceForIdentifier:user:byHost:container:cloud:perform:] (1 samples, 0.02%)</title><rect x="99.7252%" y="165" width="0.0162%" height="15" fill="rgb(226,211,11)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="175.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.02%)</title><rect x="99.7252%" y="149" width="0.0162%" height="15" fill="rgb(236,162,54)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="159.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.02%)</title><rect x="99.7252%" y="133" width="0.0162%" height="15" fill="rgb(220,229,9)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="143.50"></text></g><g><title>CoreFoundation`__96-[_CFXPreferences(SourceAdditions) withSourceForIdentifier:user:byHost:container:cloud:perform:]_block_invoke_2 (1 samples, 0.02%)</title><rect x="99.7252%" y="117" width="0.0162%" height="15" fill="rgb(250,87,22)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="127.50"></text></g><g><title>libsystem_notify.dylib`0x000000018d902314 (1 samples, 0.02%)</title><rect x="99.7252%" y="101" width="0.0162%" height="15" fill="rgb(239,43,17)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="111.50"></text></g><g><title>libsystem_notify.dylib`0x000000018d9025a0 (1 samples, 0.02%)</title><rect x="99.7252%" y="85" width="0.0162%" height="15" fill="rgb(231,177,25)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (1 samples, 0.02%)</title><rect x="99.7252%" y="69" width="0.0162%" height="15" fill="rgb(219,179,1)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (1 samples, 0.02%)</title><rect x="99.7252%" y="53" width="0.0162%" height="15" fill="rgb(238,219,53)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (1 samples, 0.02%)</title><rect x="99.7252%" y="37" width="0.0162%" height="15" fill="rgb(232,167,36)" fg:x="6170" fg:w="1"/><text x="99.9752%" y="47.50"></text></g><g><title>colors`fontdb::parse_face_info (1 samples, 0.02%)</title><rect x="99.7414%" y="309" width="0.0162%" height="15" fill="rgb(244,19,51)" fg:x="6171" fg:w="1"/><text x="99.9914%" y="319.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (3 samples, 0.05%)</title><rect x="99.7414%" y="325" width="0.0485%" height="15" fill="rgb(224,6,22)" fg:x="6171" fg:w="3"/><text x="99.9914%" y="335.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (2 samples, 0.03%)</title><rect x="99.7576%" y="309" width="0.0323%" height="15" fill="rgb(224,145,5)" fg:x="6172" fg:w="2"/><text x="100.0076%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.03%)</title><rect x="99.7576%" y="293" width="0.0323%" height="15" fill="rgb(234,130,49)" fg:x="6172" fg:w="2"/><text x="100.0076%" y="303.50"></text></g><g><title>colors`&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="99.7899%" y="309" width="0.0162%" height="15" fill="rgb(254,6,2)" fg:x="6174" fg:w="1"/><text x="100.0399%" y="319.50"></text></g><g><title>colors`&lt;std::sys::pal::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="99.7899%" y="293" width="0.0162%" height="15" fill="rgb(208,96,46)" fg:x="6174" fg:w="1"/><text x="100.0399%" y="303.50"></text></g><g><title>libsystem_c.dylib`readdir_r (1 samples, 0.02%)</title><rect x="99.7899%" y="277" width="0.0162%" height="15" fill="rgb(239,3,39)" fg:x="6174" fg:w="1"/><text x="100.0399%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__getdirentries64 (1 samples, 0.02%)</title><rect x="99.7899%" y="261" width="0.0162%" height="15" fill="rgb(233,210,1)" fg:x="6174" fg:w="1"/><text x="100.0399%" y="271.50"></text></g><g><title>colors`fontdb::parse_face_info (1 samples, 0.02%)</title><rect x="99.8060%" y="293" width="0.0162%" height="15" fill="rgb(244,137,37)" fg:x="6175" fg:w="1"/><text x="100.0560%" y="303.50"></text></g><g><title>colors`memmap2::os::MmapInner::map (1 samples, 0.02%)</title><rect x="99.8222%" y="293" width="0.0162%" height="15" fill="rgb(240,136,2)" fg:x="6176" fg:w="1"/><text x="100.0722%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (1 samples, 0.02%)</title><rect x="99.8222%" y="277" width="0.0162%" height="15" fill="rgb(239,18,37)" fg:x="6176" fg:w="1"/><text x="100.0722%" y="287.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (8 samples, 0.13%)</title><rect x="99.8060%" y="309" width="0.1293%" height="15" fill="rgb(218,185,22)" fg:x="6175" fg:w="8"/><text x="100.0560%" y="319.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (6 samples, 0.10%)</title><rect x="99.8384%" y="293" width="0.0970%" height="15" fill="rgb(225,218,4)" fg:x="6177" fg:w="6"/><text x="100.0884%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__open (6 samples, 0.10%)</title><rect x="99.8384%" y="277" width="0.0970%" height="15" fill="rgb(230,182,32)" fg:x="6177" fg:w="6"/><text x="100.0884%" y="287.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (11 samples, 0.18%)</title><rect x="99.7899%" y="325" width="0.1778%" height="15" fill="rgb(242,56,43)" fg:x="6174" fg:w="11"/><text x="100.0399%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`stat (2 samples, 0.03%)</title><rect x="99.9353%" y="309" width="0.0323%" height="15" fill="rgb(233,99,24)" fg:x="6183" fg:w="2"/><text x="100.1853%" y="319.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::new (17 samples, 0.27%)</title><rect x="99.7091%" y="373" width="0.2748%" height="15" fill="rgb(234,209,42)" fg:x="6169" fg:w="17"/><text x="99.9591%" y="383.50"></text></g><g><title>colors`fontdb::Database::load_system_fonts (15 samples, 0.24%)</title><rect x="99.7414%" y="357" width="0.2424%" height="15" fill="rgb(227,7,12)" fg:x="6171" fg:w="15"/><text x="99.9914%" y="367.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (15 samples, 0.24%)</title><rect x="99.7414%" y="341" width="0.2424%" height="15" fill="rgb(245,203,43)" fg:x="6171" fg:w="15"/><text x="99.9914%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`stat (1 samples, 0.02%)</title><rect x="99.9677%" y="325" width="0.0162%" height="15" fill="rgb(238,205,33)" fg:x="6185" fg:w="1"/><text x="100.2177%" y="335.50"></text></g><g><title>all (6,187 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(231,56,7)" fg:x="0" fg:w="6187"/><text x="0.2500%" y="511.50"></text></g><g><title>dyld`start (6,187 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(244,186,29)" fg:x="0" fg:w="6187"/><text x="0.2500%" y="495.50">dyld`start</text></g><g><title>colors`main (6,187 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(234,111,31)" fg:x="0" fg:w="6187"/><text x="0.2500%" y="479.50">colors`main</text></g><g><title>colors`std::rt::lang_start_internal (6,187 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(241,149,10)" fg:x="0" fg:w="6187"/><text x="0.2500%" y="463.50">colors`std::rt::lang_start_internal</text></g><g><title>colors`std::rt::lang_start::_{{closure}} (6,187 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(249,206,44)" fg:x="0" fg:w="6187"/><text x="0.2500%" y="447.50">colors`std::rt::lang_start::_{{closure}}</text></g><g><title>colors`std::sys::backtrace::__rust_begin_short_backtrace (6,187 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(251,153,30)" fg:x="0" fg:w="6187"/><text x="0.2500%" y="431.50">colors`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>colors`colors::main (6,187 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(239,152,38)" fg:x="0" fg:w="6187"/><text x="0.2500%" y="415.50">colors`colors::main</text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::new (21 samples, 0.34%)</title><rect x="99.6606%" y="389" width="0.3394%" height="15" fill="rgb(249,139,47)" fg:x="6166" fg:w="21"/><text x="99.9106%" y="399.50"></text></g><g><title>colors`tiny_skia::pixmap::Pixmap::fill (1 samples, 0.02%)</title><rect x="99.9838%" y="373" width="0.0162%" height="15" fill="rgb(244,64,35)" fg:x="6186" fg:w="1"/><text x="100.2338%" y="383.50"></text></g></svg></svg>
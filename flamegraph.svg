<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="3386"><g><title>colors`palette::ok_utils::LC&lt;T&gt;::find_cusp (1 samples, 0.03%)</title><rect x="0.0000%" y="357" width="0.0295%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::index_of (1 samples, 0.03%)</title><rect x="0.0295%" y="357" width="0.0295%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2795%" y="367.50"></text></g><g><title>colors`ratatui::buffer::cell::Cell::set_char (1 samples, 0.03%)</title><rect x="0.0591%" y="357" width="0.0295%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.3091%" y="367.50"></text></g><g><title>libsystem_m.dylib`powf (1 samples, 0.03%)</title><rect x="0.0886%" y="357" width="0.0295%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.3386%" y="367.50"></text></g><g><title>colors`&lt;&amp;mut colors::App as ratatui::widgets::Widget&gt;::render (5 samples, 0.15%)</title><rect x="0.0000%" y="373" width="0.1477%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="0.1181%" y="357" width="0.0295%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="0.3681%" y="367.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (1 samples, 0.03%)</title><rect x="0.1772%" y="357" width="0.0295%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="1"/><text x="0.4272%" y="367.50"></text></g><g><title>colors`cosmic_text::buffer::_&lt;impl cosmic_text::font::system::BorrowedWithFontSystem&lt;cosmic_text::buffer::Buffer&gt;&gt;::set_text (1 samples, 0.03%)</title><rect x="0.2067%" y="357" width="0.0295%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="1"/><text x="0.4567%" y="367.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (9 samples, 0.27%)</title><rect x="0.7974%" y="277" width="0.2658%" height="15" fill="rgb(218,30,26)" fg:x="27" fg:w="9"/><text x="1.0474%" y="287.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_data (110 samples, 3.25%)</title><rect x="0.2363%" y="293" width="3.2487%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="110"/><text x="0.4863%" y="303.50">col..</text></g><g><title>colors`simd_adler32::imp::scalar::update (82 samples, 2.42%)</title><rect x="1.0632%" y="277" width="2.4217%" height="15" fill="rgb(250,228,42)" fg:x="36" fg:w="82"/><text x="1.3132%" y="287.50">co..</text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (1 samples, 0.03%)</title><rect x="3.4849%" y="293" width="0.0295%" height="15" fill="rgb(240,193,28)" fg:x="118" fg:w="1"/><text x="3.7349%" y="303.50"></text></g><g><title>colors`crc32fast::Hasher::update (2 samples, 0.06%)</title><rect x="3.5145%" y="277" width="0.0591%" height="15" fill="rgb(216,20,37)" fg:x="119" fg:w="2"/><text x="3.7645%" y="287.50"></text></g><g><title>colors`png::encoder::Writer&lt;W&gt;::write_zlib_encoded_idat (4 samples, 0.12%)</title><rect x="3.5145%" y="293" width="0.1181%" height="15" fill="rgb(206,188,39)" fg:x="119" fg:w="4"/><text x="3.7645%" y="303.50"></text></g><g><title>colors`png::encoder::write_chunk (2 samples, 0.06%)</title><rect x="3.5735%" y="277" width="0.0591%" height="15" fill="rgb(217,207,13)" fg:x="121" fg:w="2"/><text x="3.8235%" y="287.50"></text></g><g><title>colors`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (2 samples, 0.06%)</title><rect x="3.5735%" y="261" width="0.0591%" height="15" fill="rgb(231,73,38)" fg:x="121" fg:w="2"/><text x="3.8235%" y="271.50"></text></g><g><title>colors`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (2 samples, 0.06%)</title><rect x="3.5735%" y="245" width="0.0591%" height="15" fill="rgb(225,20,46)" fg:x="121" fg:w="2"/><text x="3.8235%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.06%)</title><rect x="3.5735%" y="229" width="0.0591%" height="15" fill="rgb(210,31,41)" fg:x="121" fg:w="2"/><text x="3.8235%" y="239.50"></text></g><g><title>colors`image::codecs::png::PngEncoder&lt;W&gt;::encode_inner (211 samples, 6.23%)</title><rect x="0.2363%" y="325" width="6.2315%" height="15" fill="rgb(221,200,47)" fg:x="8" fg:w="211"/><text x="0.4863%" y="335.50">colors`i..</text></g><g><title>colors`png::encoder::Writer&lt;W&gt;::write_image_data (211 samples, 6.23%)</title><rect x="0.2363%" y="309" width="6.2315%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="211"/><text x="0.4863%" y="319.50">colors`p..</text></g><g><title>colors`png::filter::filter (96 samples, 2.84%)</title><rect x="3.6326%" y="293" width="2.8352%" height="15" fill="rgb(249,33,26)" fg:x="123" fg:w="96"/><text x="3.8826%" y="303.50">co..</text></g><g><title>colors`png::filter::filter_internal (32 samples, 0.95%)</title><rect x="5.5227%" y="277" width="0.9451%" height="15" fill="rgb(235,183,28)" fg:x="187" fg:w="32"/><text x="5.7727%" y="287.50"></text></g><g><title>colors`image::image_reader::free_functions::save_buffer_with_format_impl (213 samples, 6.29%)</title><rect x="0.2363%" y="341" width="6.2906%" height="15" fill="rgb(221,5,38)" fg:x="8" fg:w="213"/><text x="0.4863%" y="351.50">colors`i..</text></g><g><title>colors`std::fs::OpenOptions::_open (2 samples, 0.06%)</title><rect x="6.4678%" y="325" width="0.0591%" height="15" fill="rgb(247,18,42)" fg:x="219" fg:w="2"/><text x="6.7178%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.06%)</title><rect x="6.4678%" y="309" width="0.0591%" height="15" fill="rgb(241,131,45)" fg:x="219" fg:w="2"/><text x="6.7178%" y="319.50"></text></g><g><title>colors`image::image_reader::free_functions::save_buffer_impl (216 samples, 6.38%)</title><rect x="0.2363%" y="357" width="6.3792%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="216"/><text x="0.4863%" y="367.50">colors`i..</text></g><g><title>libsystem_kernel.dylib`close (3 samples, 0.09%)</title><rect x="6.5269%" y="341" width="0.0886%" height="15" fill="rgb(225,111,53)" fg:x="221" fg:w="3"/><text x="6.7769%" y="351.50"></text></g><g><title>colors`&lt;cosmic_text::buffer::LayoutRunIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="8.5647%" y="341" width="0.0886%" height="15" fill="rgb(238,160,17)" fg:x="290" fg:w="3"/><text x="8.8147%" y="351.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="8.6533%" y="341" width="0.0295%" height="15" fill="rgb(214,148,48)" fg:x="293" fg:w="1"/><text x="8.9033%" y="351.50"></text></g><g><title>colors`DYLD-STUB$$memmove (1 samples, 0.03%)</title><rect x="8.6828%" y="341" width="0.0295%" height="15" fill="rgb(232,36,49)" fg:x="294" fg:w="1"/><text x="8.9328%" y="351.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::draw (66 samples, 1.95%)</title><rect x="8.7123%" y="341" width="1.9492%" height="15" fill="rgb(209,103,24)" fg:x="295" fg:w="66"/><text x="8.9623%" y="351.50">c..</text></g><g><title>colors`cosmic_text::swash::SwashCache::with_pixels (66 samples, 1.95%)</title><rect x="8.7123%" y="325" width="1.9492%" height="15" fill="rgb(229,88,8)" fg:x="295" fg:w="66"/><text x="8.9623%" y="335.50">c..</text></g><g><title>colors`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.03%)</title><rect x="10.6320%" y="309" width="0.0295%" height="15" fill="rgb(213,181,19)" fg:x="360" fg:w="1"/><text x="10.8820%" y="319.50"></text></g><g><title>colors`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="10.7206%" y="325" width="0.0295%" height="15" fill="rgb(254,191,54)" fg:x="363" fg:w="1"/><text x="10.9706%" y="335.50"></text></g><g><title>colors`&lt;cosmic_text::line_ending::LineIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="10.7501%" y="325" width="0.0591%" height="15" fill="rgb(241,83,37)" fg:x="364" fg:w="2"/><text x="11.0001%" y="335.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="10.8092%" y="325" width="0.0295%" height="15" fill="rgb(233,36,39)" fg:x="366" fg:w="1"/><text x="11.0592%" y="335.50"></text></g><g><title>colors`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="10.8387%" y="309" width="0.0591%" height="15" fill="rgb(226,3,54)" fg:x="367" fg:w="2"/><text x="11.0887%" y="319.50"></text></g><g><title>colors`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.03%)</title><rect x="10.8683%" y="293" width="0.0295%" height="15" fill="rgb(245,192,40)" fg:x="368" fg:w="1"/><text x="11.1183%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="10.8978%" y="293" width="0.0295%" height="15" fill="rgb(238,167,29)" fg:x="369" fg:w="1"/><text x="11.1478%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.03%)</title><rect x="10.9273%" y="293" width="0.0295%" height="15" fill="rgb(232,182,51)" fg:x="370" fg:w="1"/><text x="11.1773%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.06%)</title><rect x="11.0455%" y="261" width="0.0591%" height="15" fill="rgb(231,60,39)" fg:x="374" fg:w="2"/><text x="11.2955%" y="271.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;cosmic_text::shape::ShapeLine&gt;&gt; (8 samples, 0.24%)</title><rect x="10.8978%" y="309" width="0.2363%" height="15" fill="rgb(208,69,12)" fg:x="369" fg:w="8"/><text x="11.1478%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.18%)</title><rect x="10.9569%" y="293" width="0.1772%" height="15" fill="rgb(235,93,37)" fg:x="371" fg:w="6"/><text x="11.2069%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.15%)</title><rect x="10.9864%" y="277" width="0.1477%" height="15" fill="rgb(213,116,39)" fg:x="372" fg:w="5"/><text x="11.2364%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="11.1045%" y="261" width="0.0295%" height="15" fill="rgb(222,207,29)" fg:x="376" fg:w="1"/><text x="11.3545%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.06%)</title><rect x="11.1341%" y="309" width="0.0591%" height="15" fill="rgb(206,96,30)" fg:x="377" fg:w="2"/><text x="11.3841%" y="319.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::buffer_line::BufferLine&gt; (13 samples, 0.38%)</title><rect x="10.8387%" y="325" width="0.3839%" height="15" fill="rgb(218,138,4)" fg:x="367" fg:w="13"/><text x="11.0887%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="11.1931%" y="309" width="0.0295%" height="15" fill="rgb(250,191,14)" fg:x="379" fg:w="1"/><text x="11.4431%" y="319.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;alloc::vec::Vec&lt;cosmic_text::layout::LayoutLine&gt;&gt;&gt; (2 samples, 0.06%)</title><rect x="11.2227%" y="325" width="0.0591%" height="15" fill="rgb(239,60,40)" fg:x="380" fg:w="2"/><text x="11.4727%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.06%)</title><rect x="11.2227%" y="309" width="0.0591%" height="15" fill="rgb(206,27,48)" fg:x="380" fg:w="2"/><text x="11.4727%" y="319.50"></text></g><g><title>colors`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="11.3408%" y="309" width="0.0295%" height="15" fill="rgb(225,35,8)" fg:x="384" fg:w="1"/><text x="11.5908%" y="319.50"></text></g><g><title>colors`__rdl_alloc (1 samples, 0.03%)</title><rect x="11.3703%" y="309" width="0.0295%" height="15" fill="rgb(250,213,24)" fg:x="385" fg:w="1"/><text x="11.6203%" y="319.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.03%)</title><rect x="11.3999%" y="293" width="0.0295%" height="15" fill="rgb(247,123,22)" fg:x="386" fg:w="1"/><text x="11.6499%" y="303.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="11.4294%" y="277" width="0.0295%" height="15" fill="rgb(231,138,38)" fg:x="387" fg:w="1"/><text x="11.6794%" y="287.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.03%)</title><rect x="11.4589%" y="277" width="0.0295%" height="15" fill="rgb(231,145,46)" fg:x="388" fg:w="1"/><text x="11.7089%" y="287.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;cosmic_text::shape::ShapeLine&gt;&gt; (3 samples, 0.09%)</title><rect x="11.4885%" y="277" width="0.0886%" height="15" fill="rgb(251,118,11)" fg:x="389" fg:w="3"/><text x="11.7385%" y="287.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::defaults (2 samples, 0.06%)</title><rect x="11.5771%" y="277" width="0.0591%" height="15" fill="rgb(217,147,25)" fg:x="392" fg:w="2"/><text x="11.8271%" y="287.50"></text></g><g><title>colors`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.03%)</title><rect x="11.7247%" y="261" width="0.0295%" height="15" fill="rgb(247,81,37)" fg:x="397" fg:w="1"/><text x="11.9747%" y="271.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="11.7543%" y="261" width="0.0295%" height="15" fill="rgb(209,12,38)" fg:x="398" fg:w="1"/><text x="12.0043%" y="271.50"></text></g><g><title>colors`__rdl_alloc (1 samples, 0.03%)</title><rect x="11.7838%" y="261" width="0.0295%" height="15" fill="rgb(227,1,9)" fg:x="399" fg:w="1"/><text x="12.0338%" y="271.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="11.8133%" y="261" width="0.0295%" height="15" fill="rgb(248,47,43)" fg:x="400" fg:w="1"/><text x="12.0633%" y="271.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="11.8133%" y="245" width="0.0295%" height="15" fill="rgb(221,10,30)" fg:x="400" fg:w="1"/><text x="12.0633%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.03%)</title><rect x="11.8133%" y="229" width="0.0295%" height="15" fill="rgb(210,229,1)" fg:x="400" fg:w="1"/><text x="12.0633%" y="239.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="11.9905%" y="245" width="0.0295%" height="15" fill="rgb(222,148,37)" fg:x="406" fg:w="1"/><text x="12.2405%" y="255.50"></text></g><g><title>colors`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.12%)</title><rect x="12.0201%" y="245" width="0.1181%" height="15" fill="rgb(234,67,33)" fg:x="407" fg:w="4"/><text x="12.2701%" y="255.50"></text></g><g><title>colors`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.09%)</title><rect x="12.0496%" y="229" width="0.0886%" height="15" fill="rgb(247,98,35)" fg:x="408" fg:w="3"/><text x="12.2996%" y="239.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.09%)</title><rect x="12.1382%" y="245" width="0.0886%" height="15" fill="rgb(247,138,52)" fg:x="411" fg:w="3"/><text x="12.3882%" y="255.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (2 samples, 0.06%)</title><rect x="12.1677%" y="229" width="0.0591%" height="15" fill="rgb(213,79,30)" fg:x="412" fg:w="2"/><text x="12.4177%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.06%)</title><rect x="12.1677%" y="213" width="0.0591%" height="15" fill="rgb(246,177,23)" fg:x="412" fg:w="2"/><text x="12.4177%" y="223.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (4 samples, 0.12%)</title><rect x="12.4926%" y="229" width="0.1181%" height="15" fill="rgb(230,62,27)" fg:x="423" fg:w="4"/><text x="12.7426%" y="239.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::defaults (1 samples, 0.03%)</title><rect x="12.6108%" y="229" width="0.0295%" height="15" fill="rgb(216,154,8)" fg:x="427" fg:w="1"/><text x="12.8608%" y="239.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (2 samples, 0.06%)</title><rect x="12.6403%" y="229" width="0.0591%" height="15" fill="rgb(244,35,45)" fg:x="428" fg:w="2"/><text x="12.8903%" y="239.50"></text></g><g><title>colors`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (1 samples, 0.03%)</title><rect x="12.6698%" y="213" width="0.0295%" height="15" fill="rgb(251,115,12)" fg:x="429" fg:w="1"/><text x="12.9198%" y="223.50"></text></g><g><title>colors`__rdl_alloc (2 samples, 0.06%)</title><rect x="65.7118%" y="197" width="0.0591%" height="15" fill="rgb(240,54,50)" fg:x="2225" fg:w="2"/><text x="65.9618%" y="207.50"></text></g><g><title>colors`__rdl_alloc (2 samples, 0.06%)</title><rect x="66.1548%" y="181" width="0.0591%" height="15" fill="rgb(233,84,52)" fg:x="2240" fg:w="2"/><text x="66.4048%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="66.3910%" y="133" width="0.0295%" height="15" fill="rgb(207,117,47)" fg:x="2248" fg:w="1"/><text x="66.6410%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.18%)</title><rect x="66.3320%" y="165" width="0.1772%" height="15" fill="rgb(249,43,39)" fg:x="2246" fg:w="6"/><text x="66.5820%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.15%)</title><rect x="66.3615%" y="149" width="0.1477%" height="15" fill="rgb(209,38,44)" fg:x="2247" fg:w="5"/><text x="66.6115%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.09%)</title><rect x="66.4206%" y="133" width="0.0886%" height="15" fill="rgb(236,212,23)" fg:x="2249" fg:w="3"/><text x="66.6706%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.03%)</title><rect x="66.4796%" y="117" width="0.0295%" height="15" fill="rgb(242,79,21)" fg:x="2251" fg:w="1"/><text x="66.7296%" y="127.50"></text></g><g><title>colors`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (12 samples, 0.35%)</title><rect x="66.2138%" y="181" width="0.3544%" height="15" fill="rgb(211,96,35)" fg:x="2242" fg:w="12"/><text x="66.4638%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.06%)</title><rect x="66.5092%" y="165" width="0.0591%" height="15" fill="rgb(253,215,40)" fg:x="2252" fg:w="2"/><text x="66.7592%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="66.5682%" y="181" width="0.0295%" height="15" fill="rgb(211,81,21)" fg:x="2254" fg:w="1"/><text x="66.8182%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.06%)</title><rect x="66.6568%" y="165" width="0.0591%" height="15" fill="rgb(208,190,38)" fg:x="2257" fg:w="2"/><text x="66.9068%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.32%)</title><rect x="66.5978%" y="181" width="0.3249%" height="15" fill="rgb(235,213,38)" fg:x="2255" fg:w="11"/><text x="66.8478%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.21%)</title><rect x="66.7159%" y="165" width="0.2067%" height="15" fill="rgb(237,122,38)" fg:x="2259" fg:w="7"/><text x="66.9659%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.21%)</title><rect x="66.7159%" y="149" width="0.2067%" height="15" fill="rgb(244,218,35)" fg:x="2259" fg:w="7"/><text x="66.9659%" y="159.50"></text></g><g><title>colors`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (40 samples, 1.18%)</title><rect x="65.7708%" y="197" width="1.1813%" height="15" fill="rgb(240,68,47)" fg:x="2227" fg:w="40"/><text x="66.0208%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="66.9226%" y="181" width="0.0295%" height="15" fill="rgb(210,16,53)" fg:x="2266" fg:w="1"/><text x="67.1726%" y="191.50"></text></g><g><title>colors`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (1 samples, 0.03%)</title><rect x="66.9522%" y="181" width="0.0295%" height="15" fill="rgb(235,124,12)" fg:x="2267" fg:w="1"/><text x="67.2022%" y="191.50"></text></g><g><title>colors`alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (3 samples, 0.09%)</title><rect x="66.9522%" y="197" width="0.0886%" height="15" fill="rgb(224,169,11)" fg:x="2267" fg:w="3"/><text x="67.2022%" y="207.50"></text></g><g><title>colors`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (2 samples, 0.06%)</title><rect x="66.9817%" y="181" width="0.0591%" height="15" fill="rgb(250,166,2)" fg:x="2268" fg:w="2"/><text x="67.2317%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="67.0112%" y="165" width="0.0295%" height="15" fill="rgb(242,216,29)" fg:x="2269" fg:w="1"/><text x="67.2612%" y="175.50"></text></g><g><title>colors`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.12%)</title><rect x="67.0408%" y="197" width="0.1181%" height="15" fill="rgb(230,116,27)" fg:x="2270" fg:w="4"/><text x="67.2908%" y="207.50"></text></g><g><title>colors`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (47 samples, 1.39%)</title><rect x="67.1589%" y="197" width="1.3881%" height="15" fill="rgb(228,99,48)" fg:x="2274" fg:w="47"/><text x="67.4089%" y="207.50"></text></g><g><title>colors`core::str::count::char_count_general_case (6 samples, 0.18%)</title><rect x="68.5470%" y="197" width="0.1772%" height="15" fill="rgb(253,11,6)" fg:x="2321" fg:w="6"/><text x="68.7970%" y="207.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (20 samples, 0.59%)</title><rect x="68.7242%" y="197" width="0.5907%" height="15" fill="rgb(247,143,39)" fg:x="2327" fg:w="20"/><text x="68.9742%" y="207.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_supported_codepoints_in_word::_{{closure}} (25 samples, 0.74%)</title><rect x="69.3148%" y="197" width="0.7383%" height="15" fill="rgb(236,97,10)" fg:x="2347" fg:w="25"/><text x="69.5648%" y="207.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (1,940 samples, 57.29%)</title><rect x="12.7880%" y="213" width="57.2947%" height="15" fill="rgb(233,208,19)" fg:x="433" fg:w="1940"/><text x="13.0380%" y="223.50">colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="70.0532%" y="197" width="0.0295%" height="15" fill="rgb(216,164,2)" fg:x="2372" fg:w="1"/><text x="70.3032%" y="207.50"></text></g><g><title>colors`DYLD-STUB$$memcmp (3 samples, 0.09%)</title><rect x="70.0827%" y="213" width="0.0886%" height="15" fill="rgb(220,129,5)" fg:x="2373" fg:w="3"/><text x="70.3327%" y="223.50"></text></g><g><title>colors`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.15%)</title><rect x="70.1713%" y="213" width="0.1477%" height="15" fill="rgb(242,17,10)" fg:x="2376" fg:w="5"/><text x="70.4213%" y="223.50"></text></g><g><title>colors`core::str::count::char_count_general_case (4 samples, 0.12%)</title><rect x="70.3190%" y="213" width="0.1181%" height="15" fill="rgb(242,107,0)" fg:x="2381" fg:w="4"/><text x="70.5690%" y="223.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (4 samples, 0.12%)</title><rect x="70.4371%" y="213" width="0.1181%" height="15" fill="rgb(251,28,31)" fg:x="2385" fg:w="4"/><text x="70.6871%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.06%)</title><rect x="70.5848%" y="181" width="0.0591%" height="15" fill="rgb(233,223,10)" fg:x="2390" fg:w="2"/><text x="70.8348%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.03%)</title><rect x="70.7029%" y="165" width="0.0295%" height="15" fill="rgb(215,21,27)" fg:x="2394" fg:w="1"/><text x="70.9529%" y="175.50"></text></g><g><title>colors`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.30%)</title><rect x="70.5848%" y="197" width="0.2953%" height="15" fill="rgb(232,23,21)" fg:x="2390" fg:w="10"/><text x="70.8348%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.24%)</title><rect x="70.6438%" y="181" width="0.2363%" height="15" fill="rgb(244,5,23)" fg:x="2392" fg:w="8"/><text x="70.8938%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.15%)</title><rect x="70.7324%" y="165" width="0.1477%" height="15" fill="rgb(226,81,46)" fg:x="2395" fg:w="5"/><text x="70.9824%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="70.8506%" y="149" width="0.0295%" height="15" fill="rgb(247,70,30)" fg:x="2399" fg:w="1"/><text x="71.1006%" y="159.50"></text></g><g><title>colors`cosmic_text::font::fallback::FontFallbackIter::new (14 samples, 0.41%)</title><rect x="70.5552%" y="213" width="0.4135%" height="15" fill="rgb(212,68,19)" fg:x="2389" fg:w="14"/><text x="70.8052%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.09%)</title><rect x="70.8801%" y="197" width="0.0886%" height="15" fill="rgb(240,187,13)" fg:x="2400" fg:w="3"/><text x="71.1301%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="70.9392%" y="181" width="0.0295%" height="15" fill="rgb(223,113,26)" fg:x="2402" fg:w="1"/><text x="71.1892%" y="191.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (41 samples, 1.21%)</title><rect x="70.9687%" y="213" width="1.2109%" height="15" fill="rgb(206,192,2)" fg:x="2403" fg:w="41"/><text x="71.2187%" y="223.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_matches (6 samples, 0.18%)</title><rect x="72.1796%" y="213" width="0.1772%" height="15" fill="rgb(241,108,4)" fg:x="2444" fg:w="6"/><text x="72.4296%" y="223.50"></text></g><g><title>colors`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.03%)</title><rect x="72.3272%" y="197" width="0.0295%" height="15" fill="rgb(247,173,49)" fg:x="2449" fg:w="1"/><text x="72.5772%" y="207.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="72.6226%" y="197" width="0.0295%" height="15" fill="rgb(224,114,35)" fg:x="2459" fg:w="1"/><text x="72.8726%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.03%)</title><rect x="72.7702%" y="133" width="0.0295%" height="15" fill="rgb(245,159,27)" fg:x="2464" fg:w="1"/><text x="73.0202%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (5 samples, 0.15%)</title><rect x="72.7407%" y="181" width="0.1477%" height="15" fill="rgb(245,172,44)" fg:x="2463" fg:w="5"/><text x="72.9907%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.15%)</title><rect x="72.7407%" y="165" width="0.1477%" height="15" fill="rgb(236,23,11)" fg:x="2463" fg:w="5"/><text x="72.9907%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.12%)</title><rect x="72.7702%" y="149" width="0.1181%" height="15" fill="rgb(205,117,38)" fg:x="2464" fg:w="4"/><text x="73.0202%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.09%)</title><rect x="72.7998%" y="133" width="0.0886%" height="15" fill="rgb(237,72,25)" fg:x="2465" fg:w="3"/><text x="73.0498%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (9 samples, 0.27%)</title><rect x="72.6521%" y="197" width="0.2658%" height="15" fill="rgb(244,70,9)" fg:x="2460" fg:w="9"/><text x="72.9021%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="72.8884%" y="181" width="0.0295%" height="15" fill="rgb(217,125,39)" fg:x="2468" fg:w="1"/><text x="73.1384%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.21%)</title><rect x="72.9179%" y="181" width="0.2067%" height="15" fill="rgb(235,36,10)" fg:x="2469" fg:w="7"/><text x="73.1679%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="73.1246%" y="181" width="0.0295%" height="15" fill="rgb(251,123,47)" fg:x="2476" fg:w="1"/><text x="73.3746%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.03%)</title><rect x="73.1246%" y="165" width="0.0295%" height="15" fill="rgb(221,13,13)" fg:x="2476" fg:w="1"/><text x="73.3746%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.03%)</title><rect x="73.1542%" y="181" width="0.0295%" height="15" fill="rgb(238,131,9)" fg:x="2477" fg:w="1"/><text x="73.4042%" y="191.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t&gt; (11 samples, 0.32%)</title><rect x="72.9179%" y="197" width="0.3249%" height="15" fill="rgb(211,50,8)" fg:x="2469" fg:w="11"/><text x="73.1679%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.06%)</title><rect x="73.1837%" y="181" width="0.0591%" height="15" fill="rgb(245,182,24)" fg:x="2478" fg:w="2"/><text x="73.4337%" y="191.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (4 samples, 0.12%)</title><rect x="73.2428%" y="197" width="0.1181%" height="15" fill="rgb(242,14,37)" fg:x="2480" fg:w="4"/><text x="73.4928%" y="207.50"></text></g><g><title>colors`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (1 samples, 0.03%)</title><rect x="73.3314%" y="181" width="0.0295%" height="15" fill="rgb(246,228,12)" fg:x="2483" fg:w="1"/><text x="73.5814%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::clear (1 samples, 0.03%)</title><rect x="73.3609%" y="197" width="0.0295%" height="15" fill="rgb(213,55,15)" fg:x="2484" fg:w="1"/><text x="73.6109%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::guess_segment_properties (7 samples, 0.21%)</title><rect x="73.3904%" y="197" width="0.2067%" height="15" fill="rgb(209,9,3)" fg:x="2485" fg:w="7"/><text x="73.6404%" y="207.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (5 samples, 0.15%)</title><rect x="73.4495%" y="181" width="0.1477%" height="15" fill="rgb(230,59,30)" fg:x="2487" fg:w="5"/><text x="73.6995%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::push_str (3 samples, 0.09%)</title><rect x="73.5972%" y="197" width="0.0886%" height="15" fill="rgb(209,121,21)" fg:x="2492" fg:w="3"/><text x="73.8472%" y="207.50"></text></g><g><title>colors`core::str::count::char_count_general_case (2 samples, 0.06%)</title><rect x="73.6267%" y="181" width="0.0591%" height="15" fill="rgb(220,109,13)" fg:x="2493" fg:w="2"/><text x="73.8767%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::ot_layout::apply_layout_table (1 samples, 0.03%)</title><rect x="73.6858%" y="197" width="0.0295%" height="15" fill="rgb(232,18,1)" fg:x="2495" fg:w="1"/><text x="73.9358%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_complex::hb_ot_shape_complex_categorize (1 samples, 0.03%)</title><rect x="73.7153%" y="197" width="0.0295%" height="15" fill="rgb(215,41,42)" fg:x="2496" fg:w="1"/><text x="73.9653%" y="207.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::select_script (4 samples, 0.12%)</title><rect x="73.7448%" y="181" width="0.1181%" height="15" fill="rgb(224,123,36)" fg:x="2497" fg:w="4"/><text x="73.9948%" y="191.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::select_script_language (3 samples, 0.09%)</title><rect x="73.9220%" y="165" width="0.0886%" height="15" fill="rgb(240,125,3)" fg:x="2503" fg:w="3"/><text x="74.1720%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::new (26 samples, 0.77%)</title><rect x="73.8630%" y="181" width="0.7679%" height="15" fill="rgb(205,98,50)" fg:x="2501" fg:w="26"/><text x="74.1130%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::tag::tags_from_script_and_language (21 samples, 0.62%)</title><rect x="74.0106%" y="165" width="0.6202%" height="15" fill="rgb(205,185,37)" fg:x="2506" fg:w="21"/><text x="74.2606%" y="175.50"></text></g><g><title>colors`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="74.9852%" y="149" width="0.0295%" height="15" fill="rgb(238,207,15)" fg:x="2539" fg:w="1"/><text x="75.2352%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="75.2215%" y="101" width="0.0295%" height="15" fill="rgb(213,199,42)" fg:x="2547" fg:w="1"/><text x="75.4715%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="75.2510%" y="101" width="0.0295%" height="15" fill="rgb(235,201,11)" fg:x="2548" fg:w="1"/><text x="75.5010%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="75.2806%" y="85" width="0.0295%" height="15" fill="rgb(207,46,11)" fg:x="2549" fg:w="1"/><text x="75.5306%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.09%)</title><rect x="75.3396%" y="53" width="0.0886%" height="15" fill="rgb(241,35,35)" fg:x="2551" fg:w="3"/><text x="75.5896%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (6 samples, 0.18%)</title><rect x="75.2806%" y="101" width="0.1772%" height="15" fill="rgb(243,32,47)" fg:x="2549" fg:w="6"/><text x="75.5306%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.15%)</title><rect x="75.3101%" y="85" width="0.1477%" height="15" fill="rgb(247,202,23)" fg:x="2550" fg:w="5"/><text x="75.5601%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.12%)</title><rect x="75.3396%" y="69" width="0.1181%" height="15" fill="rgb(219,102,11)" fg:x="2551" fg:w="4"/><text x="75.5896%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="75.4282%" y="53" width="0.0295%" height="15" fill="rgb(243,110,44)" fg:x="2554" fg:w="1"/><text x="75.6782%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.03%)</title><rect x="75.4873%" y="85" width="0.0295%" height="15" fill="rgb(222,74,54)" fg:x="2556" fg:w="1"/><text x="75.7373%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="75.7236%" y="53" width="0.0295%" height="15" fill="rgb(216,99,12)" fg:x="2564" fg:w="1"/><text x="75.9736%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.27%)</title><rect x="75.5168%" y="85" width="0.2658%" height="15" fill="rgb(226,22,26)" fg:x="2557" fg:w="9"/><text x="75.7668%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.27%)</title><rect x="75.5168%" y="69" width="0.2658%" height="15" fill="rgb(217,163,10)" fg:x="2557" fg:w="9"/><text x="75.7668%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="75.7531%" y="53" width="0.0295%" height="15" fill="rgb(213,25,53)" fg:x="2565" fg:w="1"/><text x="76.0031%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.06%)</title><rect x="75.7826%" y="69" width="0.0591%" height="15" fill="rgb(252,105,26)" fg:x="2566" fg:w="2"/><text x="76.0326%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.03%)</title><rect x="75.8417%" y="69" width="0.0295%" height="15" fill="rgb(220,39,43)" fg:x="2568" fg:w="1"/><text x="76.0917%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (15 samples, 0.44%)</title><rect x="75.4578%" y="101" width="0.4430%" height="15" fill="rgb(229,68,48)" fg:x="2555" fg:w="15"/><text x="75.7078%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.12%)</title><rect x="75.7826%" y="85" width="0.1181%" height="15" fill="rgb(252,8,32)" fg:x="2566" fg:w="4"/><text x="76.0326%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="75.8712%" y="69" width="0.0295%" height="15" fill="rgb(223,20,43)" fg:x="2569" fg:w="1"/><text x="76.1212%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="75.8712%" y="53" width="0.0295%" height="15" fill="rgb(229,81,49)" fg:x="2569" fg:w="1"/><text x="76.1212%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.03%)</title><rect x="75.9008%" y="101" width="0.0295%" height="15" fill="rgb(236,28,36)" fg:x="2570" fg:w="1"/><text x="76.1508%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (30 samples, 0.89%)</title><rect x="75.1920%" y="117" width="0.8860%" height="15" fill="rgb(249,185,26)" fg:x="2546" fg:w="30"/><text x="75.4420%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.15%)</title><rect x="75.9303%" y="101" width="0.1477%" height="15" fill="rgb(249,174,33)" fg:x="2571" fg:w="5"/><text x="76.1803%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (34 samples, 1.00%)</title><rect x="75.1034%" y="133" width="1.0041%" height="15" fill="rgb(233,201,37)" fg:x="2543" fg:w="34"/><text x="75.3534%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="76.0780%" y="117" width="0.0295%" height="15" fill="rgb(221,78,26)" fg:x="2576" fg:w="1"/><text x="76.3280%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.03%)</title><rect x="76.1075%" y="133" width="0.0295%" height="15" fill="rgb(250,127,30)" fg:x="2577" fg:w="1"/><text x="76.3575%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (40 samples, 1.18%)</title><rect x="75.0148%" y="149" width="1.1813%" height="15" fill="rgb(230,49,44)" fg:x="2540" fg:w="40"/><text x="75.2648%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.06%)</title><rect x="76.1370%" y="133" width="0.0591%" height="15" fill="rgb(229,67,23)" fg:x="2578" fg:w="2"/><text x="76.3870%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="76.1961%" y="149" width="0.0591%" height="15" fill="rgb(249,83,47)" fg:x="2580" fg:w="2"/><text x="76.4461%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::collect_features (57 samples, 1.68%)</title><rect x="74.6308%" y="181" width="1.6834%" height="15" fill="rgb(215,43,3)" fg:x="2527" fg:w="57"/><text x="74.8808%" y="191.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (49 samples, 1.45%)</title><rect x="74.8671%" y="165" width="1.4471%" height="15" fill="rgb(238,154,13)" fg:x="2535" fg:w="49"/><text x="75.1171%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.06%)</title><rect x="76.2552%" y="149" width="0.0591%" height="15" fill="rgb(219,56,2)" fg:x="2582" fg:w="2"/><text x="76.5052%" y="159.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::find_language_feature (14 samples, 0.41%)</title><rect x="76.4619%" y="165" width="0.4135%" height="15" fill="rgb(233,0,4)" fg:x="2589" fg:w="14"/><text x="76.7119%" y="175.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::insert_tail (11 samples, 0.32%)</title><rect x="76.8754%" y="165" width="0.3249%" height="15" fill="rgb(235,30,7)" fg:x="2603" fg:w="11"/><text x="77.1254%" y="175.50"></text></g><g><title>colors`core::slice::sort::stable::driftsort_main (1 samples, 0.03%)</title><rect x="77.2002%" y="165" width="0.0295%" height="15" fill="rgb(250,79,13)" fg:x="2614" fg:w="1"/><text x="77.4502%" y="175.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Feature as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (114 samples, 3.37%)</title><rect x="78.9427%" y="149" width="3.3668%" height="15" fill="rgb(211,146,34)" fg:x="2673" fg:w="114"/><text x="79.1927%" y="159.50">col..</text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::find_language_feature (179 samples, 5.29%)</title><rect x="82.3095%" y="149" width="5.2865%" height="15" fill="rgb(228,22,38)" fg:x="2787" fg:w="179"/><text x="82.5595%" y="159.50">colors..</text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::get_required_language_feature (5 samples, 0.15%)</title><rect x="87.5960%" y="149" width="0.1477%" height="15" fill="rgb(235,168,5)" fg:x="2966" fg:w="5"/><text x="87.8460%" y="159.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Script as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (25 samples, 0.74%)</title><rect x="87.7437%" y="149" width="0.7383%" height="15" fill="rgb(221,155,16)" fg:x="2971" fg:w="25"/><text x="87.9937%" y="159.50"></text></g><g><title>colors`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="88.6297%" y="133" width="0.0295%" height="15" fill="rgb(215,215,53)" fg:x="3001" fg:w="1"/><text x="88.8797%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.06%)</title><rect x="88.8069%" y="85" width="0.0591%" height="15" fill="rgb(223,4,10)" fg:x="3007" fg:w="2"/><text x="89.0569%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.06%)</title><rect x="88.8659%" y="69" width="0.0591%" height="15" fill="rgb(234,103,6)" fg:x="3009" fg:w="2"/><text x="89.1159%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.06%)</title><rect x="88.9545%" y="37" width="0.0591%" height="15" fill="rgb(227,97,0)" fg:x="3012" fg:w="2"/><text x="89.2045%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.12%)</title><rect x="88.9250%" y="69" width="0.1181%" height="15" fill="rgb(234,150,53)" fg:x="3011" fg:w="4"/><text x="89.1750%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.12%)</title><rect x="88.9250%" y="53" width="0.1181%" height="15" fill="rgb(228,201,54)" fg:x="3011" fg:w="4"/><text x="89.1750%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="89.0136%" y="37" width="0.0295%" height="15" fill="rgb(222,22,37)" fg:x="3014" fg:w="1"/><text x="89.2636%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (10 samples, 0.30%)</title><rect x="88.7773%" y="101" width="0.2953%" height="15" fill="rgb(237,53,32)" fg:x="3006" fg:w="10"/><text x="89.0273%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.21%)</title><rect x="88.8659%" y="85" width="0.2067%" height="15" fill="rgb(233,25,53)" fg:x="3009" fg:w="7"/><text x="89.1159%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="89.0431%" y="69" width="0.0295%" height="15" fill="rgb(210,40,34)" fg:x="3015" fg:w="1"/><text x="89.2931%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (12 samples, 0.35%)</title><rect x="88.7478%" y="117" width="0.3544%" height="15" fill="rgb(241,220,44)" fg:x="3005" fg:w="12"/><text x="88.9978%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="89.0727%" y="101" width="0.0295%" height="15" fill="rgb(235,28,35)" fg:x="3016" fg:w="1"/><text x="89.3227%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (4 samples, 0.12%)</title><rect x="89.1022%" y="117" width="0.1181%" height="15" fill="rgb(210,56,17)" fg:x="3017" fg:w="4"/><text x="89.3522%" y="127.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (21 samples, 0.62%)</title><rect x="88.6592%" y="133" width="0.6202%" height="15" fill="rgb(224,130,29)" fg:x="3002" fg:w="21"/><text x="88.9092%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.06%)</title><rect x="89.2203%" y="117" width="0.0591%" height="15" fill="rgb(235,212,8)" fg:x="3021" fg:w="2"/><text x="89.4703%" y="127.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (29 samples, 0.86%)</title><rect x="88.4820%" y="149" width="0.8565%" height="15" fill="rgb(223,33,50)" fg:x="2996" fg:w="29"/><text x="88.7320%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="89.2794%" y="133" width="0.0591%" height="15" fill="rgb(219,149,13)" fg:x="3023" fg:w="2"/><text x="89.5294%" y="143.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="89.3385%" y="149" width="0.0295%" height="15" fill="rgb(250,156,29)" fg:x="3025" fg:w="1"/><text x="89.5885%" y="159.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (28 samples, 0.83%)</title><rect x="89.4861%" y="101" width="0.8269%" height="15" fill="rgb(216,193,19)" fg:x="3030" fg:w="28"/><text x="89.7361%" y="111.50"></text></g><g><title>colors`core::slice::sort::stable::driftsort_main (35 samples, 1.03%)</title><rect x="89.3680%" y="149" width="1.0337%" height="15" fill="rgb(216,135,14)" fg:x="3026" fg:w="35"/><text x="89.6180%" y="159.50"></text></g><g><title>colors`core::slice::sort::stable::drift::sort (34 samples, 1.00%)</title><rect x="89.3975%" y="133" width="1.0041%" height="15" fill="rgb(241,47,5)" fg:x="3027" fg:w="34"/><text x="89.6475%" y="143.50"></text></g><g><title>colors`core::slice::sort::stable::quicksort::quicksort (31 samples, 0.92%)</title><rect x="89.4861%" y="117" width="0.9155%" height="15" fill="rgb(233,42,35)" fg:x="3030" fg:w="31"/><text x="89.7361%" y="127.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::sort4_stable (3 samples, 0.09%)</title><rect x="90.3131%" y="101" width="0.0886%" height="15" fill="rgb(231,13,6)" fg:x="3058" fg:w="3"/><text x="90.5631%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.03%)</title><rect x="90.8742%" y="101" width="0.0295%" height="15" fill="rgb(207,181,40)" fg:x="3077" fg:w="1"/><text x="91.1242%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.03%)</title><rect x="91.0219%" y="69" width="0.0295%" height="15" fill="rgb(254,173,49)" fg:x="3082" fg:w="1"/><text x="91.2719%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="91.0514%" y="69" width="0.0295%" height="15" fill="rgb(221,1,38)" fg:x="3083" fg:w="1"/><text x="91.3014%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.09%)</title><rect x="91.0809%" y="69" width="0.0886%" height="15" fill="rgb(206,124,46)" fg:x="3084" fg:w="3"/><text x="91.3309%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.21%)</title><rect x="91.1695%" y="53" width="0.2067%" height="15" fill="rgb(249,21,11)" fg:x="3087" fg:w="7"/><text x="91.4195%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.18%)</title><rect x="91.3763%" y="53" width="0.1772%" height="15" fill="rgb(222,201,40)" fg:x="3094" fg:w="6"/><text x="91.6263%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (15 samples, 0.44%)</title><rect x="91.1695%" y="69" width="0.4430%" height="15" fill="rgb(235,61,29)" fg:x="3087" fg:w="15"/><text x="91.4195%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.06%)</title><rect x="91.5535%" y="53" width="0.0591%" height="15" fill="rgb(219,207,3)" fg:x="3100" fg:w="2"/><text x="91.8035%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (26 samples, 0.77%)</title><rect x="90.9037%" y="101" width="0.7679%" height="15" fill="rgb(222,56,46)" fg:x="3078" fg:w="26"/><text x="91.1537%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (25 samples, 0.74%)</title><rect x="90.9333%" y="85" width="0.7383%" height="15" fill="rgb(239,76,54)" fg:x="3079" fg:w="25"/><text x="91.1833%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.06%)</title><rect x="91.6125%" y="69" width="0.0591%" height="15" fill="rgb(231,124,27)" fg:x="3102" fg:w="2"/><text x="91.8625%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.06%)</title><rect x="91.6716%" y="101" width="0.0591%" height="15" fill="rgb(249,195,6)" fg:x="3104" fg:w="2"/><text x="91.9216%" y="111.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (33 samples, 0.97%)</title><rect x="90.7856%" y="117" width="0.9746%" height="15" fill="rgb(237,174,47)" fg:x="3074" fg:w="33"/><text x="91.0356%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="91.7307%" y="101" width="0.0295%" height="15" fill="rgb(206,201,31)" fg:x="3106" fg:w="1"/><text x="91.9807%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="91.7602%" y="117" width="0.0295%" height="15" fill="rgb(231,57,52)" fg:x="3107" fg:w="1"/><text x="92.0102%" y="127.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (39 samples, 1.15%)</title><rect x="90.6675%" y="133" width="1.1518%" height="15" fill="rgb(248,177,22)" fg:x="3070" fg:w="39"/><text x="90.9175%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.03%)</title><rect x="91.7897%" y="117" width="0.0295%" height="15" fill="rgb(215,211,37)" fg:x="3108" fg:w="1"/><text x="92.0397%" y="127.50"></text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::compile (495 samples, 14.62%)</title><rect x="77.2298%" y="165" width="14.6190%" height="15" fill="rgb(241,128,51)" fg:x="2615" fg:w="495"/><text x="77.4798%" y="175.50">colors`rustybuzz::hb::..</text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::add_lookups (49 samples, 1.45%)</title><rect x="90.4017%" y="149" width="1.4471%" height="15" fill="rgb(227,165,31)" fg:x="3061" fg:w="49"/><text x="90.6517%" y="159.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="91.8193%" y="133" width="0.0295%" height="15" fill="rgb(228,167,24)" fg:x="3109" fg:w="1"/><text x="92.0693%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.03%)</title><rect x="91.8488%" y="165" width="0.0295%" height="15" fill="rgb(228,143,12)" fg:x="3110" fg:w="1"/><text x="92.0988%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="91.8783%" y="165" width="0.0295%" height="15" fill="rgb(249,149,8)" fg:x="3111" fg:w="1"/><text x="92.1283%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.03%)</title><rect x="91.9079%" y="165" width="0.0295%" height="15" fill="rgb(243,35,44)" fg:x="3112" fg:w="1"/><text x="92.1579%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::compile (530 samples, 15.65%)</title><rect x="76.3142%" y="181" width="15.6527%" height="15" fill="rgb(246,89,9)" fg:x="2584" fg:w="530"/><text x="76.5642%" y="191.50">colors`rustybuzz::hb::ot..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="91.9374%" y="165" width="0.0295%" height="15" fill="rgb(233,213,13)" fg:x="3113" fg:w="1"/><text x="92.1874%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::tag::tags_from_script_and_language (1 samples, 0.03%)</title><rect x="91.9669%" y="181" width="0.0295%" height="15" fill="rgb(233,141,41)" fg:x="3114" fg:w="1"/><text x="92.2169%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (5 samples, 0.15%)</title><rect x="91.9965%" y="181" width="0.1477%" height="15" fill="rgb(239,167,4)" fg:x="3115" fg:w="5"/><text x="92.2465%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="92.1441%" y="181" width="0.0295%" height="15" fill="rgb(209,217,16)" fg:x="3120" fg:w="1"/><text x="92.3941%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.03%)</title><rect x="92.1737%" y="181" width="0.0295%" height="15" fill="rgb(219,88,35)" fg:x="3121" fg:w="1"/><text x="92.4237%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t::new (628 samples, 18.55%)</title><rect x="73.7448%" y="197" width="18.5470%" height="15" fill="rgb(220,193,23)" fg:x="2497" fg:w="628"/><text x="73.9948%" y="207.50">colors`rustybuzz::hb::ot_shap..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.09%)</title><rect x="92.2032%" y="181" width="0.0886%" height="15" fill="rgb(230,90,52)" fg:x="3122" fg:w="3"/><text x="92.4532%" y="191.50"></text></g><g><title>colors`&lt;char as unicode_properties::general_category::UnicodeGeneralCategory&gt;::general_category (1 samples, 0.03%)</title><rect x="92.7053%" y="181" width="0.0295%" height="15" fill="rgb(252,106,19)" fg:x="3139" fg:w="1"/><text x="92.9553%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::guess_segment_properties (2 samples, 0.06%)</title><rect x="92.7348%" y="181" width="0.0591%" height="15" fill="rgb(206,74,20)" fg:x="3140" fg:w="2"/><text x="92.9848%" y="191.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (2 samples, 0.06%)</title><rect x="92.7348%" y="165" width="0.0591%" height="15" fill="rgb(230,138,44)" fg:x="3140" fg:w="2"/><text x="92.9848%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::next_glyphs (1 samples, 0.03%)</title><rect x="92.7939%" y="181" width="0.0295%" height="15" fill="rgb(235,182,43)" fg:x="3142" fg:w="1"/><text x="93.0439%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::sync (4 samples, 0.12%)</title><rect x="92.8234%" y="181" width="0.1181%" height="15" fill="rgb(242,16,51)" fg:x="3143" fg:w="4"/><text x="93.0734%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_glyph_info_t::init_unicode_props (1 samples, 0.03%)</title><rect x="92.9415%" y="181" width="0.0295%" height="15" fill="rgb(248,9,4)" fg:x="3147" fg:w="1"/><text x="93.1915%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::get_nominal_glyph (1 samples, 0.03%)</title><rect x="92.9711%" y="181" width="0.0295%" height="15" fill="rgb(210,31,22)" fg:x="3148" fg:w="1"/><text x="93.2211%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::ot_layout::apply_layout_table (38 samples, 1.12%)</title><rect x="93.0006%" y="181" width="1.1223%" height="15" fill="rgb(239,54,39)" fg:x="3149" fg:w="38"/><text x="93.2506%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::sync (5 samples, 0.15%)</title><rect x="93.9752%" y="165" width="0.1477%" height="15" fill="rgb(230,99,41)" fg:x="3182" fg:w="5"/><text x="94.2252%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_normalize::_hb_ot_shape_normalize (11 samples, 0.32%)</title><rect x="94.1229%" y="181" width="0.3249%" height="15" fill="rgb(253,106,12)" fg:x="3187" fg:w="11"/><text x="94.3729%" y="191.50"></text></g><g><title>colors`ttf_parser::tables::cmap::format12::Subtable12::glyph_index (11 samples, 0.32%)</title><rect x="94.1229%" y="165" width="0.3249%" height="15" fill="rgb(213,46,41)" fg:x="3187" fg:w="11"/><text x="94.3729%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::shape::shape_with_plan (76 samples, 2.24%)</title><rect x="92.2918%" y="197" width="2.2445%" height="15" fill="rgb(215,133,35)" fg:x="3125" fg:w="76"/><text x="92.5418%" y="207.50">c..</text></g><g><title>colors`ttf_parser::ggg::ClassDefinition::get (3 samples, 0.09%)</title><rect x="94.4477%" y="181" width="0.0886%" height="15" fill="rgb(213,28,5)" fg:x="3198" fg:w="3"/><text x="94.6977%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.03%)</title><rect x="94.5363%" y="197" width="0.0295%" height="15" fill="rgb(215,77,49)" fg:x="3201" fg:w="1"/><text x="94.7863%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="94.5659%" y="197" width="0.0295%" height="15" fill="rgb(248,100,22)" fg:x="3202" fg:w="1"/><text x="94.8159%" y="207.50"></text></g><g><title>colors`cosmic_text::shape::shape_fallback (755 samples, 22.30%)</title><rect x="72.3568%" y="213" width="22.2977%" height="15" fill="rgb(208,67,9)" fg:x="2450" fg:w="755"/><text x="72.6068%" y="223.50">colors`cosmic_text::shape::shape_fa..</text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.06%)</title><rect x="94.5954%" y="197" width="0.0591%" height="15" fill="rgb(219,133,21)" fg:x="3203" fg:w="2"/><text x="94.8454%" y="207.50"></text></g><g><title>colors`fontdb::Database::face (76 samples, 2.24%)</title><rect x="94.6545%" y="213" width="2.2445%" height="15" fill="rgb(246,46,29)" fg:x="3205" fg:w="76"/><text x="94.9045%" y="223.50">c..</text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.03%)</title><rect x="96.8990%" y="213" width="0.0295%" height="15" fill="rgb(246,185,52)" fg:x="3281" fg:w="1"/><text x="97.1490%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="96.9285%" y="213" width="0.0295%" height="15" fill="rgb(252,136,11)" fg:x="3282" fg:w="1"/><text x="97.1785%" y="223.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (2,867 samples, 84.67%)</title><rect x="12.6994%" y="229" width="84.6722%" height="15" fill="rgb(219,138,53)" fg:x="430" fg:w="2867"/><text x="12.9494%" y="239.50">colors`cosmic_text::shape::Shaping::run</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (14 samples, 0.41%)</title><rect x="96.9581%" y="213" width="0.4135%" height="15" fill="rgb(211,51,23)" fg:x="3283" fg:w="14"/><text x="97.2081%" y="223.50"></text></g><g><title>colors`unicode_segmentation::grapheme::GraphemeCursor::grapheme_category (1 samples, 0.03%)</title><rect x="97.3715%" y="229" width="0.0295%" height="15" fill="rgb(247,221,28)" fg:x="3297" fg:w="1"/><text x="97.6215%" y="239.50"></text></g><g><title>colors`unicode_segmentation::tables::grapheme::grapheme_category (1 samples, 0.03%)</title><rect x="97.3715%" y="213" width="0.0295%" height="15" fill="rgb(251,222,45)" fg:x="3297" fg:w="1"/><text x="97.6215%" y="223.50"></text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (2,885 samples, 85.20%)</title><rect x="12.2268%" y="245" width="85.2038%" height="15" fill="rgb(217,162,53)" fg:x="414" fg:w="2885"/><text x="12.4768%" y="255.50">colors`cosmic_text::shape::ShapeWord::build</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="97.4011%" y="229" width="0.0295%" height="15" fill="rgb(229,93,14)" fg:x="3298" fg:w="1"/><text x="97.6511%" y="239.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (2,899 samples, 85.62%)</title><rect x="11.8429%" y="261" width="85.6172%" height="15" fill="rgb(209,67,49)" fg:x="401" fg:w="2899"/><text x="12.0929%" y="271.50">colors`cosmic_text::shape::ShapeSpan::build</text></g><g><title>colors`unicode_segmentation::grapheme::GraphemeCursor::grapheme_category (1 samples, 0.03%)</title><rect x="97.4306%" y="245" width="0.0295%" height="15" fill="rgb(213,87,29)" fg:x="3299" fg:w="1"/><text x="97.6806%" y="255.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (2 samples, 0.06%)</title><rect x="97.6669%" y="229" width="0.0591%" height="15" fill="rgb(205,151,52)" fg:x="3307" fg:w="2"/><text x="97.9169%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.06%)</title><rect x="97.6669%" y="213" width="0.0591%" height="15" fill="rgb(253,215,39)" fg:x="3307" fg:w="2"/><text x="97.9169%" y="223.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.18%)</title><rect x="97.6373%" y="245" width="0.1772%" height="15" fill="rgb(221,220,41)" fg:x="3306" fg:w="6"/><text x="97.8873%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.09%)</title><rect x="97.7259%" y="229" width="0.0886%" height="15" fill="rgb(218,133,21)" fg:x="3309" fg:w="3"/><text x="97.9759%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.09%)</title><rect x="97.8145%" y="245" width="0.0886%" height="15" fill="rgb(221,193,43)" fg:x="3312" fg:w="3"/><text x="98.0645%" y="255.50"></text></g><g><title>colors`unicode_bidi::BidiInfo::new_with_data_source (21 samples, 0.62%)</title><rect x="97.4601%" y="261" width="0.6202%" height="15" fill="rgb(240,128,52)" fg:x="3300" fg:w="21"/><text x="97.7101%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (6 samples, 0.18%)</title><rect x="97.9031%" y="245" width="0.1772%" height="15" fill="rgb(253,114,12)" fg:x="3315" fg:w="6"/><text x="98.1531%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="98.0803%" y="261" width="0.0591%" height="15" fill="rgb(215,223,47)" fg:x="3321" fg:w="2"/><text x="98.3303%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.15%)</title><rect x="98.1394%" y="261" width="0.1477%" height="15" fill="rgb(248,225,23)" fg:x="3323" fg:w="5"/><text x="98.3894%" y="271.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (2,935 samples, 86.68%)</title><rect x="11.6361%" y="277" width="86.6804%" height="15" fill="rgb(250,108,0)" fg:x="394" fg:w="2935"/><text x="11.8861%" y="287.50">colors`cosmic_text::shape::ShapeLine::build</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="98.2871%" y="261" width="0.0295%" height="15" fill="rgb(228,208,7)" fg:x="3328" fg:w="1"/><text x="98.5371%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.12%)</title><rect x="98.3166%" y="277" width="0.1181%" height="15" fill="rgb(244,45,10)" fg:x="3329" fg:w="4"/><text x="98.5666%" y="287.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (2,947 samples, 87.03%)</title><rect x="11.4294%" y="293" width="87.0348%" height="15" fill="rgb(207,125,25)" fg:x="387" fg:w="2947"/><text x="11.6794%" y="303.50">colors`cosmic_text::buffer_line::BufferLine::shape</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="98.4347%" y="277" width="0.0295%" height="15" fill="rgb(210,195,18)" fg:x="3333" fg:w="1"/><text x="98.6847%" y="287.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="98.5824%" y="277" width="0.0295%" height="15" fill="rgb(249,80,12)" fg:x="3338" fg:w="1"/><text x="98.8324%" y="287.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.03%)</title><rect x="98.6119%" y="277" width="0.0295%" height="15" fill="rgb(221,65,9)" fg:x="3339" fg:w="1"/><text x="98.8619%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="98.6119%" y="261" width="0.0295%" height="15" fill="rgb(235,49,36)" fg:x="3339" fg:w="1"/><text x="98.8619%" y="271.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer::_{{closure}} (5 samples, 0.15%)</title><rect x="98.6415%" y="277" width="0.1477%" height="15" fill="rgb(225,32,20)" fg:x="3340" fg:w="5"/><text x="98.8915%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.06%)</title><rect x="98.7891%" y="277" width="0.0591%" height="15" fill="rgb(215,141,46)" fg:x="3345" fg:w="2"/><text x="99.0391%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer (17 samples, 0.50%)</title><rect x="98.4643%" y="293" width="0.5021%" height="15" fill="rgb(250,160,47)" fg:x="3334" fg:w="17"/><text x="98.7143%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (4 samples, 0.12%)</title><rect x="98.8482%" y="277" width="0.1181%" height="15" fill="rgb(216,222,40)" fg:x="3347" fg:w="4"/><text x="99.0982%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.03%)</title><rect x="98.9663%" y="293" width="0.0295%" height="15" fill="rgb(234,217,39)" fg:x="3351" fg:w="1"/><text x="99.2163%" y="303.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (2,975 samples, 87.86%)</title><rect x="11.2817%" y="325" width="87.8618%" height="15" fill="rgb(207,178,40)" fg:x="382" fg:w="2975"/><text x="11.5317%" y="335.50">colors`cosmic_text::buffer::Buffer::shape_until_scroll</text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (2,971 samples, 87.74%)</title><rect x="11.3999%" y="309" width="87.7437%" height="15" fill="rgb(221,136,13)" fg:x="386" fg:w="2971"/><text x="11.6499%" y="319.50">colors`cosmic_text::buffer_line::BufferLine::layout</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.15%)</title><rect x="98.9959%" y="293" width="0.1477%" height="15" fill="rgb(249,199,10)" fg:x="3352" fg:w="5"/><text x="99.2459%" y="303.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (2,997 samples, 88.51%)</title><rect x="10.6615%" y="341" width="88.5115%" height="15" fill="rgb(249,222,13)" fg:x="361" fg:w="2997"/><text x="10.9115%" y="351.50">colors`cosmic_text::buffer::Buffer::set_text</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="99.1435%" y="325" width="0.0295%" height="15" fill="rgb(244,185,38)" fg:x="3357" fg:w="1"/><text x="99.3935%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.06%)</title><rect x="99.1731%" y="341" width="0.0591%" height="15" fill="rgb(236,202,9)" fg:x="3358" fg:w="2"/><text x="99.4231%" y="351.50"></text></g><g><title>colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw (3,356 samples, 99.11%)</title><rect x="0.1477%" y="373" width="99.1140%" height="15" fill="rgb(250,229,37)" fg:x="5" fg:w="3356"/><text x="0.3977%" y="383.50">colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw</text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::draw_cell (3,137 samples, 92.65%)</title><rect x="6.6155%" y="357" width="92.6462%" height="15" fill="rgb(206,174,23)" fg:x="224" fg:w="3137"/><text x="6.8655%" y="367.50">colors`soft_ratatui::soft_backend::SoftBackend::draw_cell</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="99.2321%" y="341" width="0.0295%" height="15" fill="rgb(211,33,43)" fg:x="3360" fg:w="1"/><text x="99.4821%" y="351.50"></text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (1 samples, 0.03%)</title><rect x="99.2617%" y="373" width="0.0295%" height="15" fill="rgb(245,58,50)" fg:x="3361" fg:w="1"/><text x="99.5117%" y="383.50"></text></g><g><title>colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw (3,367 samples, 99.44%)</title><rect x="0.0000%" y="389" width="99.4389%" height="15" fill="rgb(244,68,36)" fg:x="0" fg:w="3367"/><text x="0.2500%" y="399.50">colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw</text></g><g><title>colors`ratatui::buffer::buffer::Buffer::diff (5 samples, 0.15%)</title><rect x="99.2912%" y="373" width="0.1477%" height="15" fill="rgb(232,229,15)" fg:x="3362" fg:w="5"/><text x="99.5412%" y="383.50"></text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (5 samples, 0.15%)</title><rect x="99.2912%" y="357" width="0.1477%" height="15" fill="rgb(254,30,23)" fg:x="3362" fg:w="5"/><text x="99.5412%" y="367.50"></text></g><g><title>colors`unicode_width::tables::lookup_width (3 samples, 0.09%)</title><rect x="99.3503%" y="341" width="0.0886%" height="15" fill="rgb(235,160,14)" fg:x="3364" fg:w="3"/><text x="99.6003%" y="351.50"></text></g><g><title>colors`core::iter::traits::iterator::Iterator::eq_by (1 samples, 0.03%)</title><rect x="99.4389%" y="181" width="0.0295%" height="15" fill="rgb(212,155,44)" fg:x="3367" fg:w="1"/><text x="99.6889%" y="191.50"></text></g><g><title>colors`&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.03%)</title><rect x="99.4389%" y="165" width="0.0295%" height="15" fill="rgb(226,2,50)" fg:x="3367" fg:w="1"/><text x="99.6889%" y="175.50"></text></g><g><title>colors`fontdb::Database::make_shared_face_data (2 samples, 0.06%)</title><rect x="99.4389%" y="213" width="0.0591%" height="15" fill="rgb(234,177,6)" fg:x="3367" fg:w="2"/><text x="99.6889%" y="223.50"></text></g><g><title>colors`&lt;std::path::PathBuf as core::cmp::PartialEq&gt;::eq (2 samples, 0.06%)</title><rect x="99.4389%" y="197" width="0.0591%" height="15" fill="rgb(217,24,9)" fg:x="3367" fg:w="2"/><text x="99.6889%" y="207.50"></text></g><g><title>colors`std::path::Path::components (1 samples, 0.03%)</title><rect x="99.4684%" y="181" width="0.0295%" height="15" fill="rgb(220,13,46)" fg:x="3368" fg:w="1"/><text x="99.7184%" y="191.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (3 samples, 0.09%)</title><rect x="99.4389%" y="373" width="0.0886%" height="15" fill="rgb(239,221,27)" fg:x="3367" fg:w="3"/><text x="99.6889%" y="383.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (3 samples, 0.09%)</title><rect x="99.4389%" y="357" width="0.0886%" height="15" fill="rgb(222,198,25)" fg:x="3367" fg:w="3"/><text x="99.6889%" y="367.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (3 samples, 0.09%)</title><rect x="99.4389%" y="341" width="0.0886%" height="15" fill="rgb(211,99,13)" fg:x="3367" fg:w="3"/><text x="99.6889%" y="351.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (3 samples, 0.09%)</title><rect x="99.4389%" y="325" width="0.0886%" height="15" fill="rgb(232,111,31)" fg:x="3367" fg:w="3"/><text x="99.6889%" y="335.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (3 samples, 0.09%)</title><rect x="99.4389%" y="309" width="0.0886%" height="15" fill="rgb(245,82,37)" fg:x="3367" fg:w="3"/><text x="99.6889%" y="319.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (3 samples, 0.09%)</title><rect x="99.4389%" y="293" width="0.0886%" height="15" fill="rgb(227,149,46)" fg:x="3367" fg:w="3"/><text x="99.6889%" y="303.50"></text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (3 samples, 0.09%)</title><rect x="99.4389%" y="277" width="0.0886%" height="15" fill="rgb(218,36,50)" fg:x="3367" fg:w="3"/><text x="99.6889%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (3 samples, 0.09%)</title><rect x="99.4389%" y="261" width="0.0886%" height="15" fill="rgb(226,80,48)" fg:x="3367" fg:w="3"/><text x="99.6889%" y="271.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="99.4389%" y="245" width="0.0886%" height="15" fill="rgb(238,224,15)" fg:x="3367" fg:w="3"/><text x="99.6889%" y="255.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (3 samples, 0.09%)</title><rect x="99.4389%" y="229" width="0.0886%" height="15" fill="rgb(241,136,10)" fg:x="3367" fg:w="3"/><text x="99.6889%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::from_slice (1 samples, 0.03%)</title><rect x="99.4979%" y="213" width="0.0295%" height="15" fill="rgb(208,32,45)" fg:x="3369" fg:w="1"/><text x="99.7479%" y="223.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:] (1 samples, 0.03%)</title><rect x="99.5275%" y="261" width="0.0295%" height="15" fill="rgb(207,135,9)" fg:x="3370" fg:w="1"/><text x="99.7775%" y="271.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchListForIdentifier:container:cloudConfigurationURL:perform:] (1 samples, 0.03%)</title><rect x="99.5275%" y="245" width="0.0295%" height="15" fill="rgb(206,86,44)" fg:x="3370" fg:w="1"/><text x="99.7775%" y="255.50"></text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke (1 samples, 0.03%)</title><rect x="99.5275%" y="229" width="0.0295%" height="15" fill="rgb(245,177,15)" fg:x="3370" fg:w="1"/><text x="99.7775%" y="239.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchLists:] (1 samples, 0.03%)</title><rect x="99.5275%" y="213" width="0.0295%" height="15" fill="rgb(206,64,50)" fg:x="3370" fg:w="1"/><text x="99.7775%" y="223.50"></text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke.152 (1 samples, 0.03%)</title><rect x="99.5275%" y="197" width="0.0295%" height="15" fill="rgb(234,36,40)" fg:x="3370" fg:w="1"/><text x="99.7775%" y="207.50"></text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource addSourceForIdentifier:user:byHost:container:] (1 samples, 0.03%)</title><rect x="99.5275%" y="181" width="0.0295%" height="15" fill="rgb(213,64,8)" fg:x="3370" fg:w="1"/><text x="99.7775%" y="191.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSourceForIdentifier:user:byHost:container:cloud:perform:] (1 samples, 0.03%)</title><rect x="99.5275%" y="165" width="0.0295%" height="15" fill="rgb(210,75,36)" fg:x="3370" fg:w="1"/><text x="99.7775%" y="175.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.03%)</title><rect x="99.5275%" y="149" width="0.0295%" height="15" fill="rgb(229,88,21)" fg:x="3370" fg:w="1"/><text x="99.7775%" y="159.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.03%)</title><rect x="99.5275%" y="133" width="0.0295%" height="15" fill="rgb(252,204,47)" fg:x="3370" fg:w="1"/><text x="99.7775%" y="143.50"></text></g><g><title>CoreFoundation`__96-[_CFXPreferences(SourceAdditions) withSourceForIdentifier:user:byHost:container:cloud:perform:]_block_invoke_2 (1 samples, 0.03%)</title><rect x="99.5275%" y="117" width="0.0295%" height="15" fill="rgb(208,77,27)" fg:x="3370" fg:w="1"/><text x="99.7775%" y="127.50"></text></g><g><title>libsystem_notify.dylib`0x000000018d902314 (1 samples, 0.03%)</title><rect x="99.5275%" y="101" width="0.0295%" height="15" fill="rgb(221,76,26)" fg:x="3370" fg:w="1"/><text x="99.7775%" y="111.50"></text></g><g><title>libsystem_notify.dylib`0x000000018d9025a0 (1 samples, 0.03%)</title><rect x="99.5275%" y="85" width="0.0295%" height="15" fill="rgb(225,139,18)" fg:x="3370" fg:w="1"/><text x="99.7775%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (1 samples, 0.03%)</title><rect x="99.5275%" y="69" width="0.0295%" height="15" fill="rgb(230,137,11)" fg:x="3370" fg:w="1"/><text x="99.7775%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (1 samples, 0.03%)</title><rect x="99.5275%" y="53" width="0.0295%" height="15" fill="rgb(212,28,1)" fg:x="3370" fg:w="1"/><text x="99.7775%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (1 samples, 0.03%)</title><rect x="99.5275%" y="37" width="0.0295%" height="15" fill="rgb(248,164,17)" fg:x="3370" fg:w="1"/><text x="99.7775%" y="47.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_locale (2 samples, 0.06%)</title><rect x="99.5275%" y="357" width="0.0591%" height="15" fill="rgb(222,171,42)" fg:x="3370" fg:w="2"/><text x="99.7775%" y="367.50"></text></g><g><title>colors`sys_locale::get_locale (2 samples, 0.06%)</title><rect x="99.5275%" y="341" width="0.0591%" height="15" fill="rgb(243,84,45)" fg:x="3370" fg:w="2"/><text x="99.7775%" y="351.50"></text></g><g><title>CoreFoundation`CFLocaleCopyPreferredLanguages (2 samples, 0.06%)</title><rect x="99.5275%" y="325" width="0.0591%" height="15" fill="rgb(252,49,23)" fg:x="3370" fg:w="2"/><text x="99.7775%" y="335.50"></text></g><g><title>Foundation`@objc static NSLocale._preferredLanguagesForCurrentUser(_:) (2 samples, 0.06%)</title><rect x="99.5275%" y="309" width="0.0591%" height="15" fill="rgb(215,19,7)" fg:x="3370" fg:w="2"/><text x="99.7775%" y="319.50"></text></g><g><title>Foundation`LocaleCache.preferredLanguages(forCurrentUser:) (2 samples, 0.06%)</title><rect x="99.5275%" y="293" width="0.0591%" height="15" fill="rgb(238,81,41)" fg:x="3370" fg:w="2"/><text x="99.7775%" y="303.50"></text></g><g><title>CoreFoundation`_CFPreferencesCopyAppValueWithContainerAndConfiguration (2 samples, 0.06%)</title><rect x="99.5275%" y="277" width="0.0591%" height="15" fill="rgb(210,199,37)" fg:x="3370" fg:w="2"/><text x="99.7775%" y="287.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.03%)</title><rect x="99.5570%" y="261" width="0.0295%" height="15" fill="rgb(244,192,49)" fg:x="3371" fg:w="1"/><text x="99.8070%" y="271.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.03%)</title><rect x="99.5570%" y="245" width="0.0295%" height="15" fill="rgb(226,211,11)" fg:x="3371" fg:w="1"/><text x="99.8070%" y="255.50"></text></g><g><title>CoreFoundation`___CFPrefsCopyDefaultPreferences_block_invoke (1 samples, 0.03%)</title><rect x="99.5570%" y="229" width="0.0295%" height="15" fill="rgb(236,162,54)" fg:x="3371" fg:w="1"/><text x="99.8070%" y="239.50"></text></g><g><title>libobjc.A.dylib`objc_alloc_init (1 samples, 0.03%)</title><rect x="99.5570%" y="213" width="0.0295%" height="15" fill="rgb(220,229,9)" fg:x="3371" fg:w="1"/><text x="99.8070%" y="223.50"></text></g><g><title>libobjc.A.dylib`_objc_msgSend_uncached (1 samples, 0.03%)</title><rect x="99.5570%" y="197" width="0.0295%" height="15" fill="rgb(250,87,22)" fg:x="3371" fg:w="1"/><text x="99.8070%" y="207.50"></text></g><g><title>libobjc.A.dylib`lookUpImpOrForward (1 samples, 0.03%)</title><rect x="99.5570%" y="181" width="0.0295%" height="15" fill="rgb(239,43,17)" fg:x="3371" fg:w="1"/><text x="99.8070%" y="191.50"></text></g><g><title>libobjc.A.dylib`initializeAndMaybeRelock(objc_class*, objc_object*, locker_mixin&lt;lockdebug::lock_mixin (1 samples, 0.03%)</title><rect x="99.5570%" y="165" width="0.0295%" height="15" fill="rgb(231,177,25)" fg:x="3371" fg:w="1"/><text x="99.8070%" y="175.50"></text></g><g><title>libobjc.A.dylib`initializeNonMetaClass (1 samples, 0.03%)</title><rect x="99.5570%" y="149" width="0.0295%" height="15" fill="rgb(219,179,1)" fg:x="3371" fg:w="1"/><text x="99.8070%" y="159.50"></text></g><g><title>libobjc.A.dylib`lockAndFinishInitializing(objc_class*, objc_class*) (1 samples, 0.03%)</title><rect x="99.5570%" y="133" width="0.0295%" height="15" fill="rgb(238,219,53)" fg:x="3371" fg:w="1"/><text x="99.8070%" y="143.50"></text></g><g><title>libobjc.A.dylib`_finishInitializing(objc_class*, objc_class*) (1 samples, 0.03%)</title><rect x="99.5570%" y="117" width="0.0295%" height="15" fill="rgb(232,167,36)" fg:x="3371" fg:w="1"/><text x="99.8070%" y="127.50"></text></g><g><title>libobjc.A.dylib`objc::Scanner::scanAddedClassImpl (1 samples, 0.03%)</title><rect x="99.5570%" y="101" width="0.0295%" height="15" fill="rgb(244,19,51)" fg:x="3371" fg:w="1"/><text x="99.8070%" y="111.50"></text></g><g><title>colors`fontdb::parse_face_info (1 samples, 0.03%)</title><rect x="99.5865%" y="309" width="0.0295%" height="15" fill="rgb(224,6,22)" fg:x="3372" fg:w="1"/><text x="99.8365%" y="319.50"></text></g><g><title>colors`fontdb::collect_families (1 samples, 0.03%)</title><rect x="99.5865%" y="293" width="0.0295%" height="15" fill="rgb(224,145,5)" fg:x="3372" fg:w="1"/><text x="99.8365%" y="303.50"></text></g><g><title>colors`fontdb::name_to_unicode (1 samples, 0.03%)</title><rect x="99.5865%" y="277" width="0.0295%" height="15" fill="rgb(234,130,49)" fg:x="3372" fg:w="1"/><text x="99.8365%" y="287.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.03%)</title><rect x="99.5865%" y="261" width="0.0295%" height="15" fill="rgb(254,6,2)" fg:x="3372" fg:w="1"/><text x="99.8365%" y="271.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (3 samples, 0.09%)</title><rect x="99.5865%" y="325" width="0.0886%" height="15" fill="rgb(208,96,46)" fg:x="3372" fg:w="3"/><text x="99.8365%" y="335.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (2 samples, 0.06%)</title><rect x="99.6161%" y="309" width="0.0591%" height="15" fill="rgb(239,3,39)" fg:x="3373" fg:w="2"/><text x="99.8661%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.06%)</title><rect x="99.6161%" y="293" width="0.0591%" height="15" fill="rgb(233,210,1)" fg:x="3373" fg:w="2"/><text x="99.8661%" y="303.50"></text></g><g><title>colors`fontdb::parse_face_info (1 samples, 0.03%)</title><rect x="99.6751%" y="293" width="0.0295%" height="15" fill="rgb(244,137,37)" fg:x="3375" fg:w="1"/><text x="99.9251%" y="303.50"></text></g><g><title>colors`memmap2::os::file_len (2 samples, 0.06%)</title><rect x="99.7047%" y="293" width="0.0591%" height="15" fill="rgb(240,136,2)" fg:x="3376" fg:w="2"/><text x="99.9547%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`fstat (2 samples, 0.06%)</title><rect x="99.7047%" y="277" width="0.0591%" height="15" fill="rgb(239,18,37)" fg:x="3376" fg:w="2"/><text x="99.9547%" y="287.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (9 samples, 0.27%)</title><rect x="99.6751%" y="309" width="0.2658%" height="15" fill="rgb(218,185,22)" fg:x="3375" fg:w="9"/><text x="99.9251%" y="319.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (6 samples, 0.18%)</title><rect x="99.7637%" y="293" width="0.1772%" height="15" fill="rgb(225,218,4)" fg:x="3378" fg:w="6"/><text x="100.0137%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__open (6 samples, 0.18%)</title><rect x="99.7637%" y="277" width="0.1772%" height="15" fill="rgb(230,182,32)" fg:x="3378" fg:w="6"/><text x="100.0137%" y="287.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (10 samples, 0.30%)</title><rect x="99.6751%" y="325" width="0.2953%" height="15" fill="rgb(242,56,43)" fg:x="3375" fg:w="10"/><text x="99.9251%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`stat (1 samples, 0.03%)</title><rect x="99.9409%" y="309" width="0.0295%" height="15" fill="rgb(233,99,24)" fg:x="3384" fg:w="1"/><text x="100.1909%" y="319.50"></text></g><g><title>all (3,386 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(234,209,42)" fg:x="0" fg:w="3386"/><text x="0.2500%" y="511.50"></text></g><g><title>dyld`start (3,386 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(227,7,12)" fg:x="0" fg:w="3386"/><text x="0.2500%" y="495.50">dyld`start</text></g><g><title>colors`main (3,386 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(245,203,43)" fg:x="0" fg:w="3386"/><text x="0.2500%" y="479.50">colors`main</text></g><g><title>colors`std::rt::lang_start_internal (3,386 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(238,205,33)" fg:x="0" fg:w="3386"/><text x="0.2500%" y="463.50">colors`std::rt::lang_start_internal</text></g><g><title>colors`std::rt::lang_start::_{{closure}} (3,386 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(231,56,7)" fg:x="0" fg:w="3386"/><text x="0.2500%" y="447.50">colors`std::rt::lang_start::_{{closure}}</text></g><g><title>colors`std::sys::backtrace::__rust_begin_short_backtrace (3,386 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(244,186,29)" fg:x="0" fg:w="3386"/><text x="0.2500%" y="431.50">colors`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>colors`colors::main (3,386 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(234,111,31)" fg:x="0" fg:w="3386"/><text x="0.2500%" y="415.50">colors`colors::main</text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::new (19 samples, 0.56%)</title><rect x="99.4389%" y="389" width="0.5611%" height="15" fill="rgb(241,149,10)" fg:x="3367" fg:w="19"/><text x="99.6889%" y="399.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::new (16 samples, 0.47%)</title><rect x="99.5275%" y="373" width="0.4725%" height="15" fill="rgb(249,206,44)" fg:x="3370" fg:w="16"/><text x="99.7775%" y="383.50"></text></g><g><title>colors`fontdb::Database::load_system_fonts (14 samples, 0.41%)</title><rect x="99.5865%" y="357" width="0.4135%" height="15" fill="rgb(251,153,30)" fg:x="3372" fg:w="14"/><text x="99.8365%" y="367.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (14 samples, 0.41%)</title><rect x="99.5865%" y="341" width="0.4135%" height="15" fill="rgb(239,152,38)" fg:x="3372" fg:w="14"/><text x="99.8365%" y="351.50"></text></g><g><title>colors`std::sys::pal::unix::fs::readdir (1 samples, 0.03%)</title><rect x="99.9705%" y="325" width="0.0295%" height="15" fill="rgb(249,139,47)" fg:x="3385" fg:w="1"/><text x="100.2205%" y="335.50"></text></g><g><title>libsystem_c.dylib`__opendir2 (1 samples, 0.03%)</title><rect x="99.9705%" y="309" width="0.0295%" height="15" fill="rgb(244,64,35)" fg:x="3385" fg:w="1"/><text x="100.2205%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__open_nocancel (1 samples, 0.03%)</title><rect x="99.9705%" y="293" width="0.0295%" height="15" fill="rgb(216,46,15)" fg:x="3385" fg:w="1"/><text x="100.2205%" y="303.50"></text></g></svg></svg>
<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="5256"><g><title>colors`color_eyre::install (1 samples, 0.02%)</title><rect x="0.0000%" y="373" width="0.0190%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>colors`color_eyre::config::HookBuilder::new (1 samples, 0.02%)</title><rect x="0.0000%" y="357" width="0.0190%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>colors`&lt;cosmic_text::buffer::LayoutRunIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.0190%" y="325" width="0.0190%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2690%" y="335.50"></text></g><g><title>colors`tiny_skia::painter::Paint::set_color (6 samples, 0.11%)</title><rect x="0.3805%" y="293" width="0.1142%" height="15" fill="rgb(248,212,6)" fg:x="20" fg:w="6"/><text x="0.6305%" y="303.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (3 samples, 0.06%)</title><rect x="0.6088%" y="277" width="0.0571%" height="15" fill="rgb(208,68,35)" fg:x="32" fg:w="3"/><text x="0.8588%" y="287.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (3 samples, 0.06%)</title><rect x="2.0738%" y="261" width="0.0571%" height="15" fill="rgb(232,128,0)" fg:x="109" fg:w="3"/><text x="2.3238%" y="271.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (29 samples, 0.55%)</title><rect x="2.1309%" y="261" width="0.5518%" height="15" fill="rgb(207,160,47)" fg:x="112" fg:w="29"/><text x="2.3809%" y="271.50"></text></g><g><title>colors`tiny_skia::blend_mode::BlendMode::to_stage (6 samples, 0.11%)</title><rect x="2.6826%" y="261" width="0.1142%" height="15" fill="rgb(228,23,34)" fg:x="141" fg:w="6"/><text x="2.9326%" y="271.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (25 samples, 0.48%)</title><rect x="2.7968%" y="261" width="0.4756%" height="15" fill="rgb(218,30,26)" fg:x="147" fg:w="25"/><text x="3.0468%" y="271.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::push (9 samples, 0.17%)</title><rect x="3.2725%" y="261" width="0.1712%" height="15" fill="rgb(220,122,19)" fg:x="172" fg:w="9"/><text x="3.5225%" y="271.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (120 samples, 2.28%)</title><rect x="8.5426%" y="245" width="2.2831%" height="15" fill="rgb(250,228,42)" fg:x="449" fg:w="120"/><text x="8.7926%" y="255.50">c..</text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (806 samples, 15.33%)</title><rect x="10.8257%" y="245" width="15.3349%" height="15" fill="rgb(240,193,28)" fg:x="569" fg:w="806"/><text x="11.0757%" y="255.50">colors`tiny_skia::pipel..</text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (132 samples, 2.51%)</title><rect x="26.1606%" y="245" width="2.5114%" height="15" fill="rgb(216,20,37)" fg:x="1375" fg:w="132"/><text x="26.4106%" y="255.50">co..</text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (1,811 samples, 34.46%)</title><rect x="3.4437%" y="261" width="34.4559%" height="15" fill="rgb(206,188,39)" fg:x="181" fg:w="1811"/><text x="3.6937%" y="271.50">colors`tiny_skia::pipeline::blitter::RasterPipelineBlitt..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (485 samples, 9.23%)</title><rect x="28.6720%" y="245" width="9.2275%" height="15" fill="rgb(217,207,13)" fg:x="1507" fg:w="485"/><text x="28.9220%" y="255.50">libsystem_pla..</text></g><g><title>colors`tiny_skia::pipeline::lowp::null_fn (2 samples, 0.04%)</title><rect x="39.7070%" y="229" width="0.0381%" height="15" fill="rgb(231,73,38)" fg:x="2087" fg:w="2"/><text x="39.9570%" y="239.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::source_over_rgba_tail (1 samples, 0.02%)</title><rect x="39.7451%" y="229" width="0.0190%" height="15" fill="rgb(225,20,46)" fg:x="2089" fg:w="1"/><text x="39.9951%" y="239.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (2 samples, 0.04%)</title><rect x="39.9734%" y="213" width="0.0381%" height="15" fill="rgb(210,31,41)" fg:x="2101" fg:w="2"/><text x="40.2234%" y="223.50"></text></g><g><title>colors`DYLD-STUB$$memset_pattern16 (2 samples, 0.04%)</title><rect x="40.0114%" y="213" width="0.0381%" height="15" fill="rgb(221,200,47)" fg:x="2103" fg:w="2"/><text x="40.2614%" y="223.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::source_over_rgba_tail (43 samples, 0.82%)</title><rect x="40.0495%" y="213" width="0.8181%" height="15" fill="rgb(226,26,5)" fg:x="2105" fg:w="43"/><text x="40.2995%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.10%)</title><rect x="40.8676%" y="213" width="0.0951%" height="15" fill="rgb(249,33,26)" fg:x="2148" fg:w="5"/><text x="41.1176%" y="223.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::start (64 samples, 1.22%)</title><rect x="39.7641%" y="229" width="1.2177%" height="15" fill="rgb(235,183,28)" fg:x="2090" fg:w="64"/><text x="40.0141%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (1 samples, 0.02%)</title><rect x="40.9627%" y="213" width="0.0190%" height="15" fill="rgb(221,5,38)" fg:x="2153" fg:w="1"/><text x="41.2127%" y="223.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (198 samples, 3.77%)</title><rect x="37.8995%" y="261" width="3.7671%" height="15" fill="rgb(247,18,42)" fg:x="1992" fg:w="198"/><text x="38.1495%" y="271.50">colo..</text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (130 samples, 2.47%)</title><rect x="39.1933%" y="245" width="2.4734%" height="15" fill="rgb(241,131,45)" fg:x="2060" fg:w="130"/><text x="39.4433%" y="255.50">co..</text></g><g><title>colors`tiny_skia::pipeline::lowp::uniform_color (36 samples, 0.68%)</title><rect x="40.9817%" y="229" width="0.6849%" height="15" fill="rgb(249,31,29)" fg:x="2154" fg:w="36"/><text x="41.2317%" y="239.50"></text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (6 samples, 0.11%)</title><rect x="41.6667%" y="261" width="0.1142%" height="15" fill="rgb(225,111,53)" fg:x="2190" fg:w="6"/><text x="41.9167%" y="271.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::from_xywh (14 samples, 0.27%)</title><rect x="41.7808%" y="261" width="0.2664%" height="15" fill="rgb(238,160,17)" fg:x="2196" fg:w="14"/><text x="42.0308%" y="271.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::intersect (111 samples, 2.11%)</title><rect x="42.0472%" y="261" width="2.1119%" height="15" fill="rgb(214,148,48)" fg:x="2210" fg:w="111"/><text x="42.2972%" y="271.50">c..</text></g><g><title>colors`tiny_skia_path::rect::Rect::round (23 samples, 0.44%)</title><rect x="44.1591%" y="261" width="0.4376%" height="15" fill="rgb(232,36,49)" fg:x="2321" fg:w="23"/><text x="44.4091%" y="271.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (2,996 samples, 57.00%)</title><rect x="0.6659%" y="277" width="57.0015%" height="15" fill="rgb(209,103,24)" fg:x="35" fg:w="2996"/><text x="0.9159%" y="287.50">colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect</text></g><g><title>libsystem_platform.dylib`_platform_memmove (687 samples, 13.07%)</title><rect x="44.5967%" y="261" width="13.0708%" height="15" fill="rgb(229,88,8)" fg:x="2344" fg:w="687"/><text x="44.8467%" y="271.50">libsystem_platform.d..</text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (13 samples, 0.25%)</title><rect x="57.6674%" y="277" width="0.2473%" height="15" fill="rgb(213,181,19)" fg:x="3031" fg:w="13"/><text x="57.9174%" y="287.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (2 samples, 0.04%)</title><rect x="57.9148%" y="277" width="0.0381%" height="15" fill="rgb(254,191,54)" fg:x="3044" fg:w="2"/><text x="58.1648%" y="287.50"></text></g><g><title>colors`tiny_skia_path::transform::Transform::is_identity (18 samples, 0.34%)</title><rect x="57.9528%" y="277" width="0.3425%" height="15" fill="rgb(241,83,37)" fg:x="3046" fg:w="18"/><text x="58.2028%" y="287.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::fill_rect (3,435 samples, 65.35%)</title><rect x="0.4947%" y="293" width="65.3539%" height="15" fill="rgb(233,36,39)" fg:x="26" fg:w="3435"/><text x="0.7447%" y="303.50">colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::fill_rect</text></g><g><title>libsystem_platform.dylib`_platform_memmove (397 samples, 7.55%)</title><rect x="58.2953%" y="277" width="7.5533%" height="15" fill="rgb(226,3,54)" fg:x="3064" fg:w="397"/><text x="58.5453%" y="287.50">libsystem_..</text></g><g><title>colors`cosmic_text::swash::SwashCache::with_pixels (3,464 samples, 65.91%)</title><rect x="0.0381%" y="309" width="65.9056%" height="15" fill="rgb(245,192,40)" fg:x="2" fg:w="3464"/><text x="0.2881%" y="319.50">colors`cosmic_text::swash::SwashCache::with_pixels</text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (5 samples, 0.10%)</title><rect x="65.8486%" y="293" width="0.0951%" height="15" fill="rgb(238,167,29)" fg:x="3461" fg:w="5"/><text x="66.0986%" y="303.50"></text></g><g><title>colors`tiny_skia::painter::Paint::set_color (10 samples, 0.19%)</title><rect x="65.9437%" y="309" width="0.1903%" height="15" fill="rgb(232,182,51)" fg:x="3466" fg:w="10"/><text x="66.1937%" y="319.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::draw (3,497 samples, 66.53%)</title><rect x="0.0381%" y="325" width="66.5335%" height="15" fill="rgb(231,60,39)" fg:x="2" fg:w="3497"/><text x="0.2881%" y="335.50">colors`cosmic_text::buffer::Buffer::draw</text></g><g><title>colors`tiny_skia_path::rect::Rect::from_xywh (23 samples, 0.44%)</title><rect x="66.1339%" y="309" width="0.4376%" height="15" fill="rgb(208,69,12)" fg:x="3476" fg:w="23"/><text x="66.3839%" y="319.50"></text></g><g><title>colors`__rdl_dealloc (1 samples, 0.02%)</title><rect x="66.5906%" y="293" width="0.0190%" height="15" fill="rgb(235,93,37)" fg:x="3500" fg:w="1"/><text x="66.8406%" y="303.50"></text></g><g><title>colors`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.02%)</title><rect x="66.6096%" y="293" width="0.0190%" height="15" fill="rgb(213,116,39)" fg:x="3501" fg:w="1"/><text x="66.8596%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="66.6286%" y="277" width="0.0190%" height="15" fill="rgb(222,207,29)" fg:x="3502" fg:w="1"/><text x="66.8786%" y="287.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;cosmic_text::shape::ShapeLine&gt;&gt; (2 samples, 0.04%)</title><rect x="66.6286%" y="293" width="0.0381%" height="15" fill="rgb(206,96,30)" fg:x="3502" fg:w="2"/><text x="66.8786%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="66.6476%" y="277" width="0.0190%" height="15" fill="rgb(218,138,4)" fg:x="3503" fg:w="1"/><text x="66.8976%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="66.6667%" y="293" width="0.0190%" height="15" fill="rgb(250,191,14)" fg:x="3504" fg:w="1"/><text x="66.9167%" y="303.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::buffer_line::BufferLine&gt; (7 samples, 0.13%)</title><rect x="66.5906%" y="309" width="0.1332%" height="15" fill="rgb(239,60,40)" fg:x="3500" fg:w="7"/><text x="66.8406%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="66.6857%" y="293" width="0.0381%" height="15" fill="rgb(206,27,48)" fg:x="3505" fg:w="2"/><text x="66.9357%" y="303.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;alloc::vec::Vec&lt;cosmic_text::layout::LayoutLine&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="66.7237%" y="309" width="0.0190%" height="15" fill="rgb(225,35,8)" fg:x="3507" fg:w="1"/><text x="66.9737%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="66.7237%" y="293" width="0.0190%" height="15" fill="rgb(250,213,24)" fg:x="3507" fg:w="1"/><text x="66.9737%" y="303.50"></text></g><g><title>colors`__rdl_dealloc (1 samples, 0.02%)</title><rect x="66.7998%" y="261" width="0.0190%" height="15" fill="rgb(247,123,22)" fg:x="3511" fg:w="1"/><text x="67.0498%" y="271.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="66.8760%" y="245" width="0.0190%" height="15" fill="rgb(231,138,38)" fg:x="3515" fg:w="1"/><text x="67.1260%" y="255.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="66.9330%" y="229" width="0.0190%" height="15" fill="rgb(231,145,46)" fg:x="3518" fg:w="1"/><text x="67.1830%" y="239.50"></text></g><g><title>colors`&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="66.9330%" y="213" width="0.0190%" height="15" fill="rgb(251,118,11)" fg:x="3518" fg:w="1"/><text x="67.1830%" y="223.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (3 samples, 0.06%)</title><rect x="67.0282%" y="213" width="0.0571%" height="15" fill="rgb(217,147,25)" fg:x="3523" fg:w="3"/><text x="67.2782%" y="223.50"></text></g><g><title>colors`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.08%)</title><rect x="82.8387%" y="165" width="0.0761%" height="15" fill="rgb(247,81,37)" fg:x="4354" fg:w="4"/><text x="83.0887%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.08%)</title><rect x="82.8387%" y="149" width="0.0761%" height="15" fill="rgb(209,12,38)" fg:x="4354" fg:w="4"/><text x="83.0887%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.08%)</title><rect x="82.8387%" y="133" width="0.0761%" height="15" fill="rgb(227,1,9)" fg:x="4354" fg:w="4"/><text x="83.0887%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.08%)</title><rect x="82.8387%" y="117" width="0.0761%" height="15" fill="rgb(248,47,43)" fg:x="4354" fg:w="4"/><text x="83.0887%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="82.9148%" y="165" width="0.0190%" height="15" fill="rgb(221,10,30)" fg:x="4358" fg:w="1"/><text x="83.1648%" y="175.50"></text></g><g><title>colors`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (11 samples, 0.21%)</title><rect x="82.8196%" y="181" width="0.2093%" height="15" fill="rgb(210,229,1)" fg:x="4353" fg:w="11"/><text x="83.0696%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.10%)</title><rect x="82.9338%" y="165" width="0.0951%" height="15" fill="rgb(222,148,37)" fg:x="4359" fg:w="5"/><text x="83.1838%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.10%)</title><rect x="82.9338%" y="149" width="0.0951%" height="15" fill="rgb(234,67,33)" fg:x="4359" fg:w="5"/><text x="83.1838%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.10%)</title><rect x="82.9338%" y="133" width="0.0951%" height="15" fill="rgb(247,98,35)" fg:x="4359" fg:w="5"/><text x="83.1838%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.04%)</title><rect x="82.9909%" y="117" width="0.0381%" height="15" fill="rgb(247,138,52)" fg:x="4362" fg:w="2"/><text x="83.2409%" y="127.50"></text></g><g><title>colors`alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (2 samples, 0.04%)</title><rect x="83.0289%" y="181" width="0.0381%" height="15" fill="rgb(213,79,30)" fg:x="4364" fg:w="2"/><text x="83.2789%" y="191.50"></text></g><g><title>colors`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (2 samples, 0.04%)</title><rect x="83.0289%" y="165" width="0.0381%" height="15" fill="rgb(246,177,23)" fg:x="4364" fg:w="2"/><text x="83.2789%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="83.0289%" y="149" width="0.0381%" height="15" fill="rgb(230,62,27)" fg:x="4364" fg:w="2"/><text x="83.2789%" y="159.50"></text></g><g><title>colors`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.08%)</title><rect x="83.0670%" y="181" width="0.0761%" height="15" fill="rgb(216,154,8)" fg:x="4366" fg:w="4"/><text x="83.3170%" y="191.50"></text></g><g><title>colors`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (17 samples, 0.32%)</title><rect x="83.1431%" y="181" width="0.3234%" height="15" fill="rgb(244,35,45)" fg:x="4370" fg:w="17"/><text x="83.3931%" y="191.50"></text></g><g><title>colors`core::str::count::char_count_general_case (5 samples, 0.10%)</title><rect x="83.4665%" y="181" width="0.0951%" height="15" fill="rgb(251,115,12)" fg:x="4387" fg:w="5"/><text x="83.7165%" y="191.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (6 samples, 0.11%)</title><rect x="83.5616%" y="181" width="0.1142%" height="15" fill="rgb(240,54,50)" fg:x="4392" fg:w="6"/><text x="83.8116%" y="191.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_supported_codepoints_in_word::_{{closure}} (14 samples, 0.27%)</title><rect x="83.6758%" y="181" width="0.2664%" height="15" fill="rgb(233,84,52)" fg:x="4398" fg:w="14"/><text x="83.9258%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.06%)</title><rect x="83.9422%" y="181" width="0.0571%" height="15" fill="rgb(207,117,47)" fg:x="4412" fg:w="3"/><text x="84.1922%" y="191.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (890 samples, 16.93%)</title><rect x="67.0852%" y="197" width="16.9330%" height="15" fill="rgb(249,43,39)" fg:x="3526" fg:w="890"/><text x="67.3352%" y="207.50">colors`&lt;cosmic_text::font:..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="83.9992%" y="181" width="0.0190%" height="15" fill="rgb(209,38,44)" fg:x="4415" fg:w="1"/><text x="84.2492%" y="191.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (4 samples, 0.08%)</title><rect x="84.0183%" y="197" width="0.0761%" height="15" fill="rgb(236,212,23)" fg:x="4416" fg:w="4"/><text x="84.2683%" y="207.50"></text></g><g><title>colors`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (1 samples, 0.02%)</title><rect x="84.0753%" y="181" width="0.0190%" height="15" fill="rgb(242,79,21)" fg:x="4419" fg:w="1"/><text x="84.3253%" y="191.50"></text></g><g><title>colors`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.13%)</title><rect x="84.0944%" y="181" width="0.1332%" height="15" fill="rgb(211,96,35)" fg:x="4420" fg:w="7"/><text x="84.3444%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.10%)</title><rect x="84.1324%" y="165" width="0.0951%" height="15" fill="rgb(253,215,40)" fg:x="4422" fg:w="5"/><text x="84.3824%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.06%)</title><rect x="84.1705%" y="149" width="0.0571%" height="15" fill="rgb(211,81,21)" fg:x="4424" fg:w="3"/><text x="84.4205%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.04%)</title><rect x="84.1895%" y="133" width="0.0381%" height="15" fill="rgb(208,190,38)" fg:x="4425" fg:w="2"/><text x="84.4395%" y="143.50"></text></g><g><title>colors`cosmic_text::font::fallback::FontFallbackIter::new (9 samples, 0.17%)</title><rect x="84.0944%" y="197" width="0.1712%" height="15" fill="rgb(235,213,38)" fg:x="4420" fg:w="9"/><text x="84.3444%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.04%)</title><rect x="84.2275%" y="181" width="0.0381%" height="15" fill="rgb(237,122,38)" fg:x="4427" fg:w="2"/><text x="84.4775%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="84.2466%" y="165" width="0.0190%" height="15" fill="rgb(244,218,35)" fg:x="4428" fg:w="1"/><text x="84.4966%" y="175.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (14 samples, 0.27%)</title><rect x="84.2656%" y="197" width="0.2664%" height="15" fill="rgb(240,68,47)" fg:x="4429" fg:w="14"/><text x="84.5156%" y="207.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_matches (3 samples, 0.06%)</title><rect x="84.5320%" y="197" width="0.0571%" height="15" fill="rgb(210,16,53)" fg:x="4443" fg:w="3"/><text x="84.7820%" y="207.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_supported_codepoints_in_word::_{{closure}} (1 samples, 0.02%)</title><rect x="84.5890%" y="197" width="0.0190%" height="15" fill="rgb(235,124,12)" fg:x="4446" fg:w="1"/><text x="84.8390%" y="207.50"></text></g><g><title>colors`DYLD-STUB$$free (2 samples, 0.04%)</title><rect x="84.6651%" y="181" width="0.0381%" height="15" fill="rgb(224,169,11)" fg:x="4450" fg:w="2"/><text x="84.9151%" y="191.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.06%)</title><rect x="84.7032%" y="181" width="0.0571%" height="15" fill="rgb(250,166,2)" fg:x="4452" fg:w="3"/><text x="84.9532%" y="191.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (3 samples, 0.06%)</title><rect x="84.7032%" y="165" width="0.0571%" height="15" fill="rgb(242,216,29)" fg:x="4452" fg:w="3"/><text x="84.9532%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.06%)</title><rect x="84.7032%" y="149" width="0.0571%" height="15" fill="rgb(230,116,27)" fg:x="4452" fg:w="3"/><text x="84.9532%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.06%)</title><rect x="84.7032%" y="133" width="0.0571%" height="15" fill="rgb(228,99,48)" fg:x="4452" fg:w="3"/><text x="84.9532%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.06%)</title><rect x="84.7032%" y="117" width="0.0571%" height="15" fill="rgb(253,11,6)" fg:x="4452" fg:w="3"/><text x="84.9532%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="84.7793%" y="165" width="0.0381%" height="15" fill="rgb(247,143,39)" fg:x="4456" fg:w="2"/><text x="85.0293%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.02%)</title><rect x="84.8364%" y="149" width="0.0190%" height="15" fill="rgb(236,97,10)" fg:x="4459" fg:w="1"/><text x="85.0864%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.06%)</title><rect x="84.8174%" y="165" width="0.0571%" height="15" fill="rgb(233,208,19)" fg:x="4458" fg:w="3"/><text x="85.0674%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="84.8554%" y="149" width="0.0190%" height="15" fill="rgb(216,164,2)" fg:x="4460" fg:w="1"/><text x="85.1054%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="84.8554%" y="133" width="0.0190%" height="15" fill="rgb(220,129,5)" fg:x="4460" fg:w="1"/><text x="85.1054%" y="143.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t&gt; (7 samples, 0.13%)</title><rect x="84.7603%" y="181" width="0.1332%" height="15" fill="rgb(242,17,10)" fg:x="4455" fg:w="7"/><text x="85.0103%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="84.8744%" y="165" width="0.0190%" height="15" fill="rgb(242,107,0)" fg:x="4461" fg:w="1"/><text x="85.1244%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::clear (1 samples, 0.02%)</title><rect x="84.8935%" y="181" width="0.0190%" height="15" fill="rgb(251,28,31)" fg:x="4462" fg:w="1"/><text x="85.1435%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::guess_segment_properties (3 samples, 0.06%)</title><rect x="84.9125%" y="181" width="0.0571%" height="15" fill="rgb(233,223,10)" fg:x="4463" fg:w="3"/><text x="85.1625%" y="191.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (1 samples, 0.02%)</title><rect x="84.9505%" y="165" width="0.0190%" height="15" fill="rgb(215,21,27)" fg:x="4465" fg:w="1"/><text x="85.2005%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::collect_features (1 samples, 0.02%)</title><rect x="84.9696%" y="181" width="0.0190%" height="15" fill="rgb(232,23,21)" fg:x="4466" fg:w="1"/><text x="85.2196%" y="191.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::select_script (3 samples, 0.06%)</title><rect x="84.9886%" y="165" width="0.0571%" height="15" fill="rgb(244,5,23)" fg:x="4467" fg:w="3"/><text x="85.2386%" y="175.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::select_script_language (1 samples, 0.02%)</title><rect x="85.0457%" y="165" width="0.0190%" height="15" fill="rgb(226,81,46)" fg:x="4470" fg:w="1"/><text x="85.2957%" y="175.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.02%)</title><rect x="85.0647%" y="165" width="0.0190%" height="15" fill="rgb(247,70,30)" fg:x="4471" fg:w="1"/><text x="85.3147%" y="175.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::select_script_language (1 samples, 0.02%)</title><rect x="85.0837%" y="149" width="0.0190%" height="15" fill="rgb(212,68,19)" fg:x="4472" fg:w="1"/><text x="85.3337%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::new (9 samples, 0.17%)</title><rect x="85.0837%" y="165" width="0.1712%" height="15" fill="rgb(240,187,13)" fg:x="4472" fg:w="9"/><text x="85.3337%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::tag::tags_from_script_and_language (8 samples, 0.15%)</title><rect x="85.1027%" y="149" width="0.1522%" height="15" fill="rgb(223,113,26)" fg:x="4473" fg:w="8"/><text x="85.3527%" y="159.50"></text></g><g><title>colors`__rust_realloc (1 samples, 0.02%)</title><rect x="85.3311%" y="133" width="0.0190%" height="15" fill="rgb(206,192,2)" fg:x="4485" fg:w="1"/><text x="85.5811%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="85.4642%" y="85" width="0.0190%" height="15" fill="rgb(241,108,4)" fg:x="4492" fg:w="1"/><text x="85.7142%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.06%)</title><rect x="85.4833%" y="85" width="0.0571%" height="15" fill="rgb(247,173,49)" fg:x="4493" fg:w="3"/><text x="85.7333%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="85.5023%" y="69" width="0.0381%" height="15" fill="rgb(224,114,35)" fg:x="4494" fg:w="2"/><text x="85.7523%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="85.5023%" y="53" width="0.0381%" height="15" fill="rgb(245,159,27)" fg:x="4494" fg:w="2"/><text x="85.7523%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.04%)</title><rect x="85.5023%" y="37" width="0.0381%" height="15" fill="rgb(245,172,44)" fg:x="4494" fg:w="2"/><text x="85.7523%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="85.5403%" y="69" width="0.0190%" height="15" fill="rgb(236,23,11)" fg:x="4496" fg:w="1"/><text x="85.7903%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.04%)</title><rect x="85.5594%" y="69" width="0.0381%" height="15" fill="rgb(205,117,38)" fg:x="4497" fg:w="2"/><text x="85.8094%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="85.5784%" y="53" width="0.0190%" height="15" fill="rgb(237,72,25)" fg:x="4498" fg:w="1"/><text x="85.8284%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.02%)</title><rect x="85.5974%" y="69" width="0.0190%" height="15" fill="rgb(244,70,9)" fg:x="4499" fg:w="1"/><text x="85.8474%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.10%)</title><rect x="85.5403%" y="85" width="0.0951%" height="15" fill="rgb(217,125,39)" fg:x="4496" fg:w="5"/><text x="85.7903%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="85.6164%" y="69" width="0.0190%" height="15" fill="rgb(235,36,10)" fg:x="4500" fg:w="1"/><text x="85.8664%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (10 samples, 0.19%)</title><rect x="85.4642%" y="117" width="0.1903%" height="15" fill="rgb(251,123,47)" fg:x="4492" fg:w="10"/><text x="85.7142%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (10 samples, 0.19%)</title><rect x="85.4642%" y="101" width="0.1903%" height="15" fill="rgb(221,13,13)" fg:x="4492" fg:w="10"/><text x="85.7142%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="85.6355%" y="85" width="0.0190%" height="15" fill="rgb(238,131,9)" fg:x="4501" fg:w="1"/><text x="85.8855%" y="95.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::collect_features (22 samples, 0.42%)</title><rect x="85.2549%" y="165" width="0.4186%" height="15" fill="rgb(211,50,8)" fg:x="4481" fg:w="22"/><text x="85.5049%" y="175.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (18 samples, 0.34%)</title><rect x="85.3311%" y="149" width="0.3425%" height="15" fill="rgb(245,182,24)" fg:x="4485" fg:w="18"/><text x="85.5811%" y="159.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (17 samples, 0.32%)</title><rect x="85.3501%" y="133" width="0.3234%" height="15" fill="rgb(242,14,37)" fg:x="4486" fg:w="17"/><text x="85.6001%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="85.6545%" y="117" width="0.0190%" height="15" fill="rgb(246,228,12)" fg:x="4502" fg:w="1"/><text x="85.9045%" y="127.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::find_language_feature (8 samples, 0.15%)</title><rect x="85.7306%" y="149" width="0.1522%" height="15" fill="rgb(213,55,15)" fg:x="4506" fg:w="8"/><text x="85.9806%" y="159.50"></text></g><g><title>colors`__rdl_dealloc (1 samples, 0.02%)</title><rect x="85.8828%" y="149" width="0.0190%" height="15" fill="rgb(209,9,3)" fg:x="4514" fg:w="1"/><text x="86.1328%" y="159.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.04%)</title><rect x="85.9018%" y="149" width="0.0381%" height="15" fill="rgb(230,59,30)" fg:x="4515" fg:w="2"/><text x="86.1518%" y="159.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::insert_tail (10 samples, 0.19%)</title><rect x="85.9399%" y="149" width="0.1903%" height="15" fill="rgb(209,121,21)" fg:x="4517" fg:w="10"/><text x="86.1899%" y="159.50"></text></g><g><title>colors`core::slice::sort::stable::driftsort_main (1 samples, 0.02%)</title><rect x="86.1301%" y="149" width="0.0190%" height="15" fill="rgb(220,109,13)" fg:x="4527" fg:w="1"/><text x="86.3801%" y="159.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Feature as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (46 samples, 0.88%)</title><rect x="86.9482%" y="133" width="0.8752%" height="15" fill="rgb(232,18,1)" fg:x="4570" fg:w="46"/><text x="87.1982%" y="143.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::find_language_feature (91 samples, 1.73%)</title><rect x="87.8234%" y="133" width="1.7314%" height="15" fill="rgb(215,41,42)" fg:x="4616" fg:w="91"/><text x="88.0734%" y="143.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::get_required_language_feature (1 samples, 0.02%)</title><rect x="89.5548%" y="133" width="0.0190%" height="15" fill="rgb(224,123,36)" fg:x="4707" fg:w="1"/><text x="89.8048%" y="143.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Script as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (19 samples, 0.36%)</title><rect x="89.5738%" y="133" width="0.3615%" height="15" fill="rgb(240,125,3)" fg:x="4708" fg:w="19"/><text x="89.8238%" y="143.50"></text></g><g><title>colors`__rdl_alloc (1 samples, 0.02%)</title><rect x="90.0114%" y="117" width="0.0190%" height="15" fill="rgb(205,98,50)" fg:x="4731" fg:w="1"/><text x="90.2614%" y="127.50"></text></g><g><title>colors`__rdl_realloc (1 samples, 0.02%)</title><rect x="90.0304%" y="117" width="0.0190%" height="15" fill="rgb(205,185,37)" fg:x="4732" fg:w="1"/><text x="90.2804%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="90.1256%" y="69" width="0.0190%" height="15" fill="rgb(238,207,15)" fg:x="4737" fg:w="1"/><text x="90.3756%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="90.1446%" y="69" width="0.0190%" height="15" fill="rgb(213,199,42)" fg:x="4738" fg:w="1"/><text x="90.3946%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="90.1636%" y="53" width="0.0381%" height="15" fill="rgb(235,201,11)" fg:x="4739" fg:w="2"/><text x="90.4136%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.08%)</title><rect x="90.2017%" y="53" width="0.0761%" height="15" fill="rgb(207,46,11)" fg:x="4741" fg:w="4"/><text x="90.4517%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.13%)</title><rect x="90.1636%" y="69" width="0.1332%" height="15" fill="rgb(241,35,35)" fg:x="4739" fg:w="7"/><text x="90.4136%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="90.2778%" y="53" width="0.0190%" height="15" fill="rgb(243,32,47)" fg:x="4745" fg:w="1"/><text x="90.5278%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (12 samples, 0.23%)</title><rect x="90.0875%" y="101" width="0.2283%" height="15" fill="rgb(247,202,23)" fg:x="4735" fg:w="12"/><text x="90.3375%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (11 samples, 0.21%)</title><rect x="90.1065%" y="85" width="0.2093%" height="15" fill="rgb(219,102,11)" fg:x="4736" fg:w="11"/><text x="90.3565%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="90.2968%" y="69" width="0.0190%" height="15" fill="rgb(243,110,44)" fg:x="4746" fg:w="1"/><text x="90.5468%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.06%)</title><rect x="90.3158%" y="101" width="0.0571%" height="15" fill="rgb(222,74,54)" fg:x="4747" fg:w="3"/><text x="90.5658%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="90.3539%" y="85" width="0.0190%" height="15" fill="rgb(216,99,12)" fg:x="4749" fg:w="1"/><text x="90.6039%" y="95.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (21 samples, 0.40%)</title><rect x="90.0495%" y="117" width="0.3995%" height="15" fill="rgb(226,22,26)" fg:x="4733" fg:w="21"/><text x="90.2995%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.08%)</title><rect x="90.3729%" y="101" width="0.0761%" height="15" fill="rgb(217,163,10)" fg:x="4750" fg:w="4"/><text x="90.6229%" y="111.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (28 samples, 0.53%)</title><rect x="89.9353%" y="133" width="0.5327%" height="15" fill="rgb(213,25,53)" fg:x="4727" fg:w="28"/><text x="90.1853%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="90.4490%" y="117" width="0.0190%" height="15" fill="rgb(252,105,26)" fg:x="4754" fg:w="1"/><text x="90.6990%" y="127.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="90.4680%" y="133" width="0.0190%" height="15" fill="rgb(220,39,43)" fg:x="4755" fg:w="1"/><text x="90.7180%" y="143.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (20 samples, 0.38%)</title><rect x="90.5251%" y="85" width="0.3805%" height="15" fill="rgb(229,68,48)" fg:x="4758" fg:w="20"/><text x="90.7751%" y="95.50"></text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::compile (251 samples, 4.78%)</title><rect x="86.1492%" y="149" width="4.7755%" height="15" fill="rgb(252,8,32)" fg:x="4528" fg:w="251"/><text x="86.3992%" y="159.50">colors..</text></g><g><title>colors`core::slice::sort::stable::driftsort_main (23 samples, 0.44%)</title><rect x="90.4871%" y="133" width="0.4376%" height="15" fill="rgb(223,20,43)" fg:x="4756" fg:w="23"/><text x="90.7371%" y="143.50"></text></g><g><title>colors`core::slice::sort::stable::drift::sort (23 samples, 0.44%)</title><rect x="90.4871%" y="117" width="0.4376%" height="15" fill="rgb(229,81,49)" fg:x="4756" fg:w="23"/><text x="90.7371%" y="127.50"></text></g><g><title>colors`core::slice::sort::stable::quicksort::quicksort (21 samples, 0.40%)</title><rect x="90.5251%" y="101" width="0.3995%" height="15" fill="rgb(236,28,36)" fg:x="4758" fg:w="21"/><text x="90.7751%" y="111.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::sort4_stable (1 samples, 0.02%)</title><rect x="90.9056%" y="85" width="0.0190%" height="15" fill="rgb(249,185,26)" fg:x="4778" fg:w="1"/><text x="91.1556%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="90.9247%" y="149" width="0.0381%" height="15" fill="rgb(249,174,33)" fg:x="4779" fg:w="2"/><text x="91.1747%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::compile (279 samples, 5.31%)</title><rect x="85.6735%" y="165" width="5.3082%" height="15" fill="rgb(233,201,37)" fg:x="4503" fg:w="279"/><text x="85.9235%" y="175.50">colors..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="90.9627%" y="149" width="0.0190%" height="15" fill="rgb(221,78,26)" fg:x="4781" fg:w="1"/><text x="91.2127%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t::new (316 samples, 6.01%)</title><rect x="84.9886%" y="181" width="6.0122%" height="15" fill="rgb(250,127,30)" fg:x="4467" fg:w="316"/><text x="85.2386%" y="191.50">colors`r..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="90.9817%" y="165" width="0.0190%" height="15" fill="rgb(230,49,44)" fg:x="4782" fg:w="1"/><text x="91.2317%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::guess_segment_properties (2 samples, 0.04%)</title><rect x="91.0008%" y="165" width="0.0381%" height="15" fill="rgb(229,67,23)" fg:x="4783" fg:w="2"/><text x="91.2508%" y="175.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (1 samples, 0.02%)</title><rect x="91.0198%" y="149" width="0.0190%" height="15" fill="rgb(249,83,47)" fg:x="4784" fg:w="1"/><text x="91.2698%" y="159.50"></text></g><g><title>colors`&lt;char as unicode_properties::general_category::UnicodeGeneralCategory&gt;::general_category (3 samples, 0.06%)</title><rect x="91.0578%" y="149" width="0.0571%" height="15" fill="rgb(215,43,3)" fg:x="4786" fg:w="3"/><text x="91.3078%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_glyph_info_t::init_unicode_props (1 samples, 0.02%)</title><rect x="91.1149%" y="149" width="0.0190%" height="15" fill="rgb(238,154,13)" fg:x="4789" fg:w="1"/><text x="91.3649%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::ot_layout::apply_layout_table (23 samples, 0.44%)</title><rect x="91.1339%" y="149" width="0.4376%" height="15" fill="rgb(219,56,2)" fg:x="4790" fg:w="23"/><text x="91.3839%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::sync (7 samples, 0.13%)</title><rect x="91.4384%" y="133" width="0.1332%" height="15" fill="rgb(233,0,4)" fg:x="4806" fg:w="7"/><text x="91.6884%" y="143.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::next_glyphs (1 samples, 0.02%)</title><rect x="91.5525%" y="117" width="0.0190%" height="15" fill="rgb(235,30,7)" fg:x="4812" fg:w="1"/><text x="91.8025%" y="127.50"></text></g><g><title>colors`rustybuzz::hb::ot_layout::hb_ot_layout_substitute_start (1 samples, 0.02%)</title><rect x="91.5715%" y="149" width="0.0190%" height="15" fill="rgb(250,79,13)" fg:x="4813" fg:w="1"/><text x="91.8215%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::sync (3 samples, 0.06%)</title><rect x="91.5906%" y="133" width="0.0571%" height="15" fill="rgb(211,146,34)" fg:x="4814" fg:w="3"/><text x="91.8406%" y="143.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_normalize::_hb_ot_shape_normalize (4 samples, 0.08%)</title><rect x="91.5906%" y="149" width="0.0761%" height="15" fill="rgb(228,22,38)" fg:x="4814" fg:w="4"/><text x="91.8406%" y="159.50"></text></g><g><title>colors`ttf_parser::tables::cmap::format12::Subtable12::glyph_index (1 samples, 0.02%)</title><rect x="91.6476%" y="133" width="0.0190%" height="15" fill="rgb(235,168,5)" fg:x="4817" fg:w="1"/><text x="91.8976%" y="143.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::shape_internal (37 samples, 0.70%)</title><rect x="91.0388%" y="165" width="0.7040%" height="15" fill="rgb(221,155,16)" fg:x="4785" fg:w="37"/><text x="91.2888%" y="175.50"></text></g><g><title>colors`ttf_parser::ggg::ClassDefinition::get (4 samples, 0.08%)</title><rect x="91.6667%" y="149" width="0.0761%" height="15" fill="rgb(215,215,53)" fg:x="4818" fg:w="4"/><text x="91.9167%" y="159.50"></text></g><g><title>colors`rustybuzz::hb::shape::shape_with_plan (40 samples, 0.76%)</title><rect x="91.0008%" y="181" width="0.7610%" height="15" fill="rgb(223,4,10)" fg:x="4783" fg:w="40"/><text x="91.2508%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="91.7428%" y="165" width="0.0190%" height="15" fill="rgb(234,103,6)" fg:x="4822" fg:w="1"/><text x="91.9928%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="91.7618%" y="181" width="0.0190%" height="15" fill="rgb(227,97,0)" fg:x="4823" fg:w="1"/><text x="92.0118%" y="191.50"></text></g><g><title>colors`cosmic_text::shape::shape_fallback (379 samples, 7.21%)</title><rect x="84.6081%" y="197" width="7.2108%" height="15" fill="rgb(234,150,53)" fg:x="4447" fg:w="379"/><text x="84.8581%" y="207.50">colors`cos..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="91.7808%" y="181" width="0.0381%" height="15" fill="rgb(228,201,54)" fg:x="4824" fg:w="2"/><text x="92.0308%" y="191.50"></text></g><g><title>colors`fontdb::Database::face (40 samples, 0.76%)</title><rect x="91.8189%" y="197" width="0.7610%" height="15" fill="rgb(222,22,37)" fg:x="4826" fg:w="40"/><text x="92.0689%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="92.5799%" y="197" width="0.0190%" height="15" fill="rgb(237,53,32)" fg:x="4866" fg:w="1"/><text x="92.8299%" y="207.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (1,345 samples, 25.59%)</title><rect x="67.0852%" y="213" width="25.5898%" height="15" fill="rgb(233,25,53)" fg:x="3526" fg:w="1345"/><text x="67.3352%" y="223.50">colors`cosmic_text::shape::Shaping::run</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (4 samples, 0.08%)</title><rect x="92.5989%" y="197" width="0.0761%" height="15" fill="rgb(210,40,34)" fg:x="4867" fg:w="4"/><text x="92.8489%" y="207.50"></text></g><g><title>colors`unicode_segmentation::grapheme::GraphemeCursor::grapheme_category (1 samples, 0.02%)</title><rect x="92.6750%" y="213" width="0.0190%" height="15" fill="rgb(241,220,44)" fg:x="4871" fg:w="1"/><text x="92.9250%" y="223.50"></text></g><g><title>colors`unicode_segmentation::tables::grapheme::grapheme_category (1 samples, 0.02%)</title><rect x="92.6750%" y="197" width="0.0190%" height="15" fill="rgb(235,28,35)" fg:x="4871" fg:w="1"/><text x="92.9250%" y="207.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (1,357 samples, 25.82%)</title><rect x="66.8950%" y="245" width="25.8181%" height="15" fill="rgb(210,56,17)" fg:x="3516" fg:w="1357"/><text x="67.1450%" y="255.50">colors`cosmic_text::shape::ShapeSpan::bui..</text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (1,354 samples, 25.76%)</title><rect x="66.9521%" y="229" width="25.7610%" height="15" fill="rgb(224,130,29)" fg:x="3519" fg:w="1354"/><text x="67.2021%" y="239.50">colors`cosmic_text::shape::ShapeWord::bui..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="92.6941%" y="213" width="0.0190%" height="15" fill="rgb(235,212,8)" fg:x="4872" fg:w="1"/><text x="92.9441%" y="223.50"></text></g><g><title>colors`__rdl_alloc (1 samples, 0.02%)</title><rect x="92.8082%" y="213" width="0.0190%" height="15" fill="rgb(223,33,50)" fg:x="4878" fg:w="1"/><text x="93.0582%" y="223.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.11%)</title><rect x="92.7702%" y="229" width="0.1142%" height="15" fill="rgb(219,149,13)" fg:x="4876" fg:w="6"/><text x="93.0202%" y="239.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (3 samples, 0.06%)</title><rect x="92.8272%" y="213" width="0.0571%" height="15" fill="rgb(250,156,29)" fg:x="4879" fg:w="3"/><text x="93.0772%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="92.8653%" y="197" width="0.0190%" height="15" fill="rgb(216,193,19)" fg:x="4881" fg:w="1"/><text x="93.1153%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="92.8843%" y="229" width="0.0190%" height="15" fill="rgb(216,135,14)" fg:x="4882" fg:w="1"/><text x="93.1343%" y="239.50"></text></g><g><title>colors`unicode_bidi::BidiInfo::new_with_data_source (12 samples, 0.23%)</title><rect x="92.7131%" y="245" width="0.2283%" height="15" fill="rgb(241,47,5)" fg:x="4873" fg:w="12"/><text x="92.9631%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.04%)</title><rect x="92.9033%" y="229" width="0.0381%" height="15" fill="rgb(233,42,35)" fg:x="4883" fg:w="2"/><text x="93.1533%" y="239.50"></text></g><g><title>colors`unicode_bidi::char_data::bsearch_range_value_table (1 samples, 0.02%)</title><rect x="92.9414%" y="245" width="0.0190%" height="15" fill="rgb(231,13,6)" fg:x="4885" fg:w="1"/><text x="93.1914%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="92.9604%" y="245" width="0.0190%" height="15" fill="rgb(207,181,40)" fg:x="4886" fg:w="1"/><text x="93.2104%" y="255.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (1,379 samples, 26.24%)</title><rect x="66.8189%" y="261" width="26.2367%" height="15" fill="rgb(254,173,49)" fg:x="3512" fg:w="1379"/><text x="67.0689%" y="271.50">colors`cosmic_text::shape::ShapeLine::build</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.08%)</title><rect x="92.9795%" y="245" width="0.0761%" height="15" fill="rgb(221,1,38)" fg:x="4887" fg:w="4"/><text x="93.2295%" y="255.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (1,383 samples, 26.31%)</title><rect x="66.7998%" y="277" width="26.3128%" height="15" fill="rgb(206,124,46)" fg:x="3511" fg:w="1383"/><text x="67.0498%" y="287.50">colors`cosmic_text::buffer_line::BufferLin..</text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.06%)</title><rect x="93.0556%" y="261" width="0.0571%" height="15" fill="rgb(249,21,11)" fg:x="4891" fg:w="3"/><text x="93.3056%" y="271.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer (8 samples, 0.15%)</title><rect x="93.1126%" y="277" width="0.1522%" height="15" fill="rgb(222,201,40)" fg:x="4894" fg:w="8"/><text x="93.3626%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer::_{{closure}} (1 samples, 0.02%)</title><rect x="93.2648%" y="277" width="0.0190%" height="15" fill="rgb(235,61,29)" fg:x="4902" fg:w="1"/><text x="93.5148%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer (2 samples, 0.04%)</title><rect x="93.2839%" y="277" width="0.0381%" height="15" fill="rgb(219,207,3)" fg:x="4903" fg:w="2"/><text x="93.5339%" y="287.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.04%)</title><rect x="93.2839%" y="261" width="0.0381%" height="15" fill="rgb(222,56,46)" fg:x="4903" fg:w="2"/><text x="93.5339%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="93.3029%" y="245" width="0.0190%" height="15" fill="rgb(239,76,54)" fg:x="4904" fg:w="1"/><text x="93.5529%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="93.3219%" y="277" width="0.0190%" height="15" fill="rgb(231,124,27)" fg:x="4905" fg:w="1"/><text x="93.5719%" y="287.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (1,399 samples, 26.62%)</title><rect x="66.7428%" y="309" width="26.6172%" height="15" fill="rgb(249,195,6)" fg:x="3508" fg:w="1399"/><text x="66.9928%" y="319.50">colors`cosmic_text::buffer::Buffer::shape_u..</text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (1,396 samples, 26.56%)</title><rect x="66.7998%" y="293" width="26.5601%" height="15" fill="rgb(237,174,47)" fg:x="3511" fg:w="1396"/><text x="67.0498%" y="303.50">colors`cosmic_text::buffer_line::BufferLine..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="93.3409%" y="277" width="0.0190%" height="15" fill="rgb(206,201,31)" fg:x="4906" fg:w="1"/><text x="93.5909%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="93.3600%" y="309" width="0.0190%" height="15" fill="rgb(231,57,52)" fg:x="4907" fg:w="1"/><text x="93.6100%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.02%)</title><rect x="93.3790%" y="309" width="0.0190%" height="15" fill="rgb(248,177,22)" fg:x="4908" fg:w="1"/><text x="93.6290%" y="319.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (1,411 samples, 26.85%)</title><rect x="66.5715%" y="325" width="26.8455%" height="15" fill="rgb(215,211,37)" fg:x="3499" fg:w="1411"/><text x="66.8215%" y="335.50">colors`cosmic_text::buffer::Buffer::set_text</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="93.3980%" y="309" width="0.0190%" height="15" fill="rgb(241,128,51)" fg:x="4909" fg:w="1"/><text x="93.6480%" y="319.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (1 samples, 0.02%)</title><rect x="93.4361%" y="277" width="0.0190%" height="15" fill="rgb(227,165,31)" fg:x="4911" fg:w="1"/><text x="93.6861%" y="287.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (2 samples, 0.04%)</title><rect x="93.6834%" y="261" width="0.0381%" height="15" fill="rgb(228,167,24)" fg:x="4924" fg:w="2"/><text x="93.9334%" y="271.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (7 samples, 0.13%)</title><rect x="93.7215%" y="261" width="0.1332%" height="15" fill="rgb(228,143,12)" fg:x="4926" fg:w="7"/><text x="93.9715%" y="271.50"></text></g><g><title>colors`tiny_skia::shaders::pattern::Pattern::push_stages (1 samples, 0.02%)</title><rect x="93.8546%" y="261" width="0.0190%" height="15" fill="rgb(249,149,8)" fg:x="4933" fg:w="1"/><text x="94.1046%" y="271.50"></text></g><g><title>colors`tiny_skia_path::transform::Transform::is_identity (1 samples, 0.02%)</title><rect x="93.8737%" y="261" width="0.0190%" height="15" fill="rgb(243,35,44)" fg:x="4934" fg:w="1"/><text x="94.1237%" y="271.50"></text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (25 samples, 0.48%)</title><rect x="93.4551%" y="277" width="0.4756%" height="15" fill="rgb(246,89,9)" fg:x="4912" fg:w="25"/><text x="93.7051%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="93.8927%" y="261" width="0.0381%" height="15" fill="rgb(233,213,13)" fg:x="4935" fg:w="2"/><text x="94.1427%" y="271.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::seed_shader (13 samples, 0.25%)</title><rect x="93.9688%" y="245" width="0.2473%" height="15" fill="rgb(233,141,41)" fg:x="4939" fg:w="13"/><text x="94.2188%" y="255.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::source_over_rgba_tail (1 samples, 0.02%)</title><rect x="94.2161%" y="245" width="0.0190%" height="15" fill="rgb(239,167,4)" fg:x="4952" fg:w="1"/><text x="94.4661%" y="255.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="94.3303%" y="229" width="0.0190%" height="15" fill="rgb(209,217,16)" fg:x="4958" fg:w="1"/><text x="94.5803%" y="239.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::gather (27 samples, 0.51%)</title><rect x="94.3493%" y="229" width="0.5137%" height="15" fill="rgb(219,88,35)" fg:x="4959" fg:w="27"/><text x="94.5993%" y="239.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::source_over_rgba (49 samples, 0.93%)</title><rect x="94.8630%" y="229" width="0.9323%" height="15" fill="rgb(220,193,23)" fg:x="4986" fg:w="49"/><text x="95.1130%" y="239.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::source_over_rgba_tail (49 samples, 0.93%)</title><rect x="95.7953%" y="229" width="0.9323%" height="15" fill="rgb(230,90,52)" fg:x="5035" fg:w="49"/><text x="96.0453%" y="239.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::start (132 samples, 2.51%)</title><rect x="94.2352%" y="245" width="2.5114%" height="15" fill="rgb(252,106,19)" fg:x="4953" fg:w="132"/><text x="94.4852%" y="255.50">co..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="96.7275%" y="229" width="0.0190%" height="15" fill="rgb(206,74,20)" fg:x="5084" fg:w="1"/><text x="96.9775%" y="239.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (161 samples, 3.06%)</title><rect x="93.9307%" y="277" width="3.0632%" height="15" fill="rgb(230,138,44)" fg:x="4937" fg:w="161"/><text x="94.1807%" y="287.50">col..</text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (160 samples, 3.04%)</title><rect x="93.9498%" y="261" width="3.0441%" height="15" fill="rgb(235,182,43)" fg:x="4938" fg:w="160"/><text x="94.1998%" y="271.50">col..</text></g><g><title>colors`tiny_skia::pipeline::highp::transform (13 samples, 0.25%)</title><rect x="96.7466%" y="245" width="0.2473%" height="15" fill="rgb(242,16,51)" fg:x="5085" fg:w="13"/><text x="96.9966%" y="255.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::intersect (1 samples, 0.02%)</title><rect x="96.9939%" y="277" width="0.0190%" height="15" fill="rgb(248,9,4)" fg:x="5098" fg:w="1"/><text x="97.2439%" y="287.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (194 samples, 3.69%)</title><rect x="93.4170%" y="293" width="3.6910%" height="15" fill="rgb(210,31,22)" fg:x="4910" fg:w="194"/><text x="93.6670%" y="303.50">colo..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.10%)</title><rect x="97.0129%" y="277" width="0.0951%" height="15" fill="rgb(239,54,39)" fg:x="5099" fg:w="5"/><text x="97.2629%" y="287.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::draw_pixmap (201 samples, 3.82%)</title><rect x="93.4170%" y="325" width="3.8242%" height="15" fill="rgb(230,99,41)" fg:x="4910" fg:w="201"/><text x="93.6670%" y="335.50">colo..</text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::draw_pixmap (201 samples, 3.82%)</title><rect x="93.4170%" y="309" width="3.8242%" height="15" fill="rgb(253,106,12)" fg:x="4910" fg:w="201"/><text x="93.6670%" y="319.50">colo..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.13%)</title><rect x="97.1081%" y="293" width="0.1332%" height="15" fill="rgb(213,46,41)" fg:x="5104" fg:w="7"/><text x="97.3581%" y="303.50"></text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::draw_cell (5,112 samples, 97.26%)</title><rect x="0.0190%" y="341" width="97.2603%" height="15" fill="rgb(215,133,35)" fg:x="1" fg:w="5112"/><text x="0.2690%" y="351.50">colors`soft_ratatui::soft_backend::SoftBackend::draw_cell</text></g><g><title>colors`tiny_skia::pixmap::Pixmap::fill (2 samples, 0.04%)</title><rect x="97.2412%" y="325" width="0.0381%" height="15" fill="rgb(213,28,5)" fg:x="5111" fg:w="2"/><text x="97.4912%" y="335.50"></text></g><g><title>colors`std::fs::write::inner (2 samples, 0.04%)</title><rect x="97.2793%" y="341" width="0.0381%" height="15" fill="rgb(215,77,49)" fg:x="5113" fg:w="2"/><text x="97.5293%" y="351.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (2 samples, 0.04%)</title><rect x="97.2793%" y="325" width="0.0381%" height="15" fill="rgb(248,100,22)" fg:x="5113" fg:w="2"/><text x="97.5293%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.04%)</title><rect x="97.2793%" y="309" width="0.0381%" height="15" fill="rgb(208,67,9)" fg:x="5113" fg:w="2"/><text x="97.5293%" y="319.50"></text></g><g><title>colors`crc32fast::Hasher::update (3 samples, 0.06%)</title><rect x="97.6979%" y="309" width="0.0571%" height="15" fill="rgb(219,133,21)" fg:x="5135" fg:w="3"/><text x="97.9479%" y="319.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (6 samples, 0.11%)</title><rect x="98.0403%" y="293" width="0.1142%" height="15" fill="rgb(246,46,29)" fg:x="5153" fg:w="6"/><text x="98.2903%" y="303.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_data (76 samples, 1.45%)</title><rect x="97.7549%" y="309" width="1.4460%" height="15" fill="rgb(246,185,52)" fg:x="5138" fg:w="76"/><text x="98.0049%" y="319.50"></text></g><g><title>colors`simd_adler32::imp::scalar::update (55 samples, 1.05%)</title><rect x="98.1545%" y="293" width="1.0464%" height="15" fill="rgb(252,136,11)" fg:x="5159" fg:w="55"/><text x="98.4045%" y="303.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (3 samples, 0.06%)</title><rect x="99.2009%" y="309" width="0.0571%" height="15" fill="rgb(219,138,53)" fg:x="5214" fg:w="3"/><text x="99.4509%" y="319.50"></text></g><g><title>colors`png::filter::filter (4 samples, 0.08%)</title><rect x="99.2580%" y="309" width="0.0761%" height="15" fill="rgb(211,51,23)" fg:x="5217" fg:w="4"/><text x="99.5080%" y="319.50"></text></g><g><title>colors`png::filter::filter_internal (4 samples, 0.08%)</title><rect x="99.2580%" y="293" width="0.0761%" height="15" fill="rgb(247,221,28)" fg:x="5217" fg:w="4"/><text x="99.5080%" y="303.50"></text></g><g><title>colors`tiny_skia::pixmap::PixmapRef::encode_png (107 samples, 2.04%)</title><rect x="97.3174%" y="341" width="2.0358%" height="15" fill="rgb(251,222,45)" fg:x="5115" fg:w="107"/><text x="97.5674%" y="351.50">c..</text></g><g><title>colors`png::encoder::Writer&lt;W&gt;::write_image_data (87 samples, 1.66%)</title><rect x="97.6979%" y="325" width="1.6553%" height="15" fill="rgb(217,162,53)" fg:x="5135" fg:w="87"/><text x="97.9479%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="99.3341%" y="309" width="0.0190%" height="15" fill="rgb(229,93,14)" fg:x="5221" fg:w="1"/><text x="99.5841%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`close (1 samples, 0.02%)</title><rect x="99.3531%" y="341" width="0.0190%" height="15" fill="rgb(209,67,49)" fg:x="5222" fg:w="1"/><text x="99.6031%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`write (3 samples, 0.06%)</title><rect x="99.3721%" y="341" width="0.0571%" height="15" fill="rgb(213,87,29)" fg:x="5223" fg:w="3"/><text x="99.6221%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="99.4292%" y="341" width="0.0190%" height="15" fill="rgb(205,151,52)" fg:x="5226" fg:w="1"/><text x="99.6792%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="99.4292%" y="325" width="0.0190%" height="15" fill="rgb(253,215,39)" fg:x="5226" fg:w="1"/><text x="99.6792%" y="335.50"></text></g><g><title>colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw (5,232 samples, 99.54%)</title><rect x="0.0190%" y="357" width="99.5434%" height="15" fill="rgb(221,220,41)" fg:x="1" fg:w="5232"/><text x="0.2690%" y="367.50">colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw</text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.11%)</title><rect x="99.4482%" y="341" width="0.1142%" height="15" fill="rgb(218,133,21)" fg:x="5227" fg:w="6"/><text x="99.6982%" y="351.50"></text></g><g><title>colors`DYLD-STUB$$__sincosf_stret (1 samples, 0.02%)</title><rect x="99.5624%" y="357" width="0.0190%" height="15" fill="rgb(221,193,43)" fg:x="5233" fg:w="1"/><text x="99.8124%" y="367.50"></text></g><g><title>colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw (5,234 samples, 99.58%)</title><rect x="0.0190%" y="373" width="99.5814%" height="15" fill="rgb(240,128,52)" fg:x="1" fg:w="5234"/><text x="0.2690%" y="383.50">colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw</text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (1 samples, 0.02%)</title><rect x="99.5814%" y="357" width="0.0190%" height="15" fill="rgb(253,114,12)" fg:x="5234" fg:w="1"/><text x="99.8314%" y="367.50"></text></g><g><title>colors`cosmic_text::font::Font::new (1 samples, 0.02%)</title><rect x="99.6005%" y="197" width="0.0190%" height="15" fill="rgb(215,223,47)" fg:x="5235" fg:w="1"/><text x="99.8505%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::from_slice (1 samples, 0.02%)</title><rect x="99.6005%" y="181" width="0.0190%" height="15" fill="rgb(248,225,23)" fg:x="5235" fg:w="1"/><text x="99.8505%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::from_face (1 samples, 0.02%)</title><rect x="99.6005%" y="165" width="0.0190%" height="15" fill="rgb(250,108,0)" fg:x="5235" fg:w="1"/><text x="99.8505%" y="175.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="99.6005%" y="149" width="0.0190%" height="15" fill="rgb(228,208,7)" fg:x="5235" fg:w="1"/><text x="99.8505%" y="159.50"></text></g><g><title>colors`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.02%)</title><rect x="99.6005%" y="133" width="0.0190%" height="15" fill="rgb(244,45,10)" fg:x="5235" fg:w="1"/><text x="99.8505%" y="143.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="99.6005%" y="117" width="0.0190%" height="15" fill="rgb(207,125,25)" fg:x="5235" fg:w="1"/><text x="99.8505%" y="127.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="99.6005%" y="101" width="0.0190%" height="15" fill="rgb(210,195,18)" fg:x="5235" fg:w="1"/><text x="99.8505%" y="111.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.6005%" y="85" width="0.0190%" height="15" fill="rgb(249,80,12)" fg:x="5235" fg:w="1"/><text x="99.8505%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="99.6005%" y="69" width="0.0190%" height="15" fill="rgb(221,65,9)" fg:x="5235" fg:w="1"/><text x="99.8505%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="99.6005%" y="53" width="0.0190%" height="15" fill="rgb(235,49,36)" fg:x="5235" fg:w="1"/><text x="99.8505%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="99.6005%" y="37" width="0.0190%" height="15" fill="rgb(225,32,20)" fg:x="5235" fg:w="1"/><text x="99.8505%" y="47.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (2 samples, 0.04%)</title><rect x="99.6005%" y="357" width="0.0381%" height="15" fill="rgb(215,141,46)" fg:x="5235" fg:w="2"/><text x="99.8505%" y="367.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (2 samples, 0.04%)</title><rect x="99.6005%" y="341" width="0.0381%" height="15" fill="rgb(250,160,47)" fg:x="5235" fg:w="2"/><text x="99.8505%" y="351.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (2 samples, 0.04%)</title><rect x="99.6005%" y="325" width="0.0381%" height="15" fill="rgb(216,222,40)" fg:x="5235" fg:w="2"/><text x="99.8505%" y="335.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (2 samples, 0.04%)</title><rect x="99.6005%" y="309" width="0.0381%" height="15" fill="rgb(234,217,39)" fg:x="5235" fg:w="2"/><text x="99.8505%" y="319.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (2 samples, 0.04%)</title><rect x="99.6005%" y="293" width="0.0381%" height="15" fill="rgb(207,178,40)" fg:x="5235" fg:w="2"/><text x="99.8505%" y="303.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (2 samples, 0.04%)</title><rect x="99.6005%" y="277" width="0.0381%" height="15" fill="rgb(221,136,13)" fg:x="5235" fg:w="2"/><text x="99.8505%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (2 samples, 0.04%)</title><rect x="99.6005%" y="261" width="0.0381%" height="15" fill="rgb(249,199,10)" fg:x="5235" fg:w="2"/><text x="99.8505%" y="271.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (2 samples, 0.04%)</title><rect x="99.6005%" y="245" width="0.0381%" height="15" fill="rgb(249,222,13)" fg:x="5235" fg:w="2"/><text x="99.8505%" y="255.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="99.6005%" y="229" width="0.0381%" height="15" fill="rgb(244,185,38)" fg:x="5235" fg:w="2"/><text x="99.8505%" y="239.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (2 samples, 0.04%)</title><rect x="99.6005%" y="213" width="0.0381%" height="15" fill="rgb(236,202,9)" fg:x="5235" fg:w="2"/><text x="99.8505%" y="223.50"></text></g><g><title>colors`fontdb::Database::make_shared_face_data (1 samples, 0.02%)</title><rect x="99.6195%" y="197" width="0.0190%" height="15" fill="rgb(250,229,37)" fg:x="5236" fg:w="1"/><text x="99.8695%" y="207.50"></text></g><g><title>colors`&lt;std::path::PathBuf as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="99.6195%" y="181" width="0.0190%" height="15" fill="rgb(206,174,23)" fg:x="5236" fg:w="1"/><text x="99.8695%" y="191.50"></text></g><g><title>colors`std::path::Path::components (1 samples, 0.02%)</title><rect x="99.6195%" y="165" width="0.0190%" height="15" fill="rgb(211,33,43)" fg:x="5236" fg:w="1"/><text x="99.8695%" y="175.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_locale (1 samples, 0.02%)</title><rect x="99.6385%" y="341" width="0.0190%" height="15" fill="rgb(245,58,50)" fg:x="5237" fg:w="1"/><text x="99.8885%" y="351.50"></text></g><g><title>colors`sys_locale::get_locale (1 samples, 0.02%)</title><rect x="99.6385%" y="325" width="0.0190%" height="15" fill="rgb(244,68,36)" fg:x="5237" fg:w="1"/><text x="99.8885%" y="335.50"></text></g><g><title>CoreFoundation`CFLocaleCopyPreferredLanguages (1 samples, 0.02%)</title><rect x="99.6385%" y="309" width="0.0190%" height="15" fill="rgb(232,229,15)" fg:x="5237" fg:w="1"/><text x="99.8885%" y="319.50"></text></g><g><title>Foundation`@objc static NSLocale._preferredLanguagesForCurrentUser(_:) (1 samples, 0.02%)</title><rect x="99.6385%" y="293" width="0.0190%" height="15" fill="rgb(254,30,23)" fg:x="5237" fg:w="1"/><text x="99.8885%" y="303.50"></text></g><g><title>Foundation`LocaleCache.preferredLanguages(forCurrentUser:) (1 samples, 0.02%)</title><rect x="99.6385%" y="277" width="0.0190%" height="15" fill="rgb(235,160,14)" fg:x="5237" fg:w="1"/><text x="99.8885%" y="287.50"></text></g><g><title>CoreFoundation`_CFPreferencesCopyAppValueWithContainerAndConfiguration (1 samples, 0.02%)</title><rect x="99.6385%" y="261" width="0.0190%" height="15" fill="rgb(212,155,44)" fg:x="5237" fg:w="1"/><text x="99.8885%" y="271.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences copyAppValueForKey:identifier:container:configurationURL:] (1 samples, 0.02%)</title><rect x="99.6385%" y="245" width="0.0190%" height="15" fill="rgb(226,2,50)" fg:x="5237" fg:w="1"/><text x="99.8885%" y="255.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchListForIdentifier:container:cloudConfigurationURL:perform:] (1 samples, 0.02%)</title><rect x="99.6385%" y="229" width="0.0190%" height="15" fill="rgb(234,177,6)" fg:x="5237" fg:w="1"/><text x="99.8885%" y="239.50"></text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke (1 samples, 0.02%)</title><rect x="99.6385%" y="213" width="0.0190%" height="15" fill="rgb(217,24,9)" fg:x="5237" fg:w="1"/><text x="99.8885%" y="223.50"></text></g><g><title>CoreFoundation`-[_CFXPreferences withSearchLists:] (1 samples, 0.02%)</title><rect x="99.6385%" y="197" width="0.0190%" height="15" fill="rgb(220,13,46)" fg:x="5237" fg:w="1"/><text x="99.8885%" y="207.50"></text></g><g><title>CoreFoundation`__108-[_CFXPreferences(SearchListAdditions) withSearchListForIdentifier:container:cloudConfigurationURL:perform:]_block_invoke.152 (1 samples, 0.02%)</title><rect x="99.6385%" y="181" width="0.0190%" height="15" fill="rgb(239,221,27)" fg:x="5237" fg:w="1"/><text x="99.8885%" y="191.50"></text></g><g><title>CoreFoundation`-[CFPrefsSearchListSource addSourceForIdentifier:user:byHost:container:] (1 samples, 0.02%)</title><rect x="99.6385%" y="165" width="0.0190%" height="15" fill="rgb(222,198,25)" fg:x="5237" fg:w="1"/><text x="99.8885%" y="175.50"></text></g><g><title>CoreFoundation`DYLD-STUB$$os_unfair_lock_unlock (1 samples, 0.02%)</title><rect x="99.6385%" y="149" width="0.0190%" height="15" fill="rgb(211,99,13)" fg:x="5237" fg:w="1"/><text x="99.8885%" y="159.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (2 samples, 0.04%)</title><rect x="99.6575%" y="309" width="0.0381%" height="15" fill="rgb(232,111,31)" fg:x="5238" fg:w="2"/><text x="99.9075%" y="319.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (1 samples, 0.02%)</title><rect x="99.6766%" y="293" width="0.0190%" height="15" fill="rgb(245,82,37)" fg:x="5239" fg:w="1"/><text x="99.9266%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`open (1 samples, 0.02%)</title><rect x="99.6766%" y="277" width="0.0190%" height="15" fill="rgb(227,149,46)" fg:x="5239" fg:w="1"/><text x="99.9266%" y="287.50"></text></g><g><title>colors`&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="99.6956%" y="293" width="0.0190%" height="15" fill="rgb(218,36,50)" fg:x="5240" fg:w="1"/><text x="99.9456%" y="303.50"></text></g><g><title>colors`&lt;std::sys::pal::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="99.6956%" y="277" width="0.0190%" height="15" fill="rgb(226,80,48)" fg:x="5240" fg:w="1"/><text x="99.9456%" y="287.50"></text></g><g><title>libsystem_c.dylib`readdir_r (1 samples, 0.02%)</title><rect x="99.6956%" y="261" width="0.0190%" height="15" fill="rgb(238,224,15)" fg:x="5240" fg:w="1"/><text x="99.9456%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__getdirentries64 (1 samples, 0.02%)</title><rect x="99.6956%" y="245" width="0.0190%" height="15" fill="rgb(241,136,10)" fg:x="5240" fg:w="1"/><text x="99.9456%" y="255.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (5 samples, 0.10%)</title><rect x="99.7146%" y="277" width="0.0951%" height="15" fill="rgb(208,32,45)" fg:x="5241" fg:w="5"/><text x="99.9646%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__open (5 samples, 0.10%)</title><rect x="99.7146%" y="261" width="0.0951%" height="15" fill="rgb(207,135,9)" fg:x="5241" fg:w="5"/><text x="99.9646%" y="271.50"></text></g><g><title>colors`ttf_parser::tables::name::Table::parse (1 samples, 0.02%)</title><rect x="99.8097%" y="277" width="0.0190%" height="15" fill="rgb(206,86,44)" fg:x="5246" fg:w="1"/><text x="100.0597%" y="287.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (7 samples, 0.13%)</title><rect x="99.7146%" y="293" width="0.1332%" height="15" fill="rgb(245,177,15)" fg:x="5241" fg:w="7"/><text x="99.9646%" y="303.50"></text></g><g><title>colors`ttf_parser::tables::os2::Table::parse (1 samples, 0.02%)</title><rect x="99.8288%" y="277" width="0.0190%" height="15" fill="rgb(206,64,50)" fg:x="5247" fg:w="1"/><text x="100.0788%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`close (1 samples, 0.02%)</title><rect x="99.8478%" y="293" width="0.0190%" height="15" fill="rgb(234,36,40)" fg:x="5248" fg:w="1"/><text x="100.0978%" y="303.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (14 samples, 0.27%)</title><rect x="99.6956%" y="309" width="0.2664%" height="15" fill="rgb(213,64,8)" fg:x="5240" fg:w="14"/><text x="99.9456%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`stat (5 samples, 0.10%)</title><rect x="99.8668%" y="293" width="0.0951%" height="15" fill="rgb(210,75,36)" fg:x="5249" fg:w="5"/><text x="100.1168%" y="303.50"></text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::new (20 samples, 0.38%)</title><rect x="99.6005%" y="373" width="0.3805%" height="15" fill="rgb(229,88,21)" fg:x="5235" fg:w="20"/><text x="99.8505%" y="383.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::new (18 samples, 0.34%)</title><rect x="99.6385%" y="357" width="0.3425%" height="15" fill="rgb(252,204,47)" fg:x="5237" fg:w="18"/><text x="99.8885%" y="367.50"></text></g><g><title>colors`fontdb::Database::load_system_fonts (17 samples, 0.32%)</title><rect x="99.6575%" y="341" width="0.3234%" height="15" fill="rgb(208,77,27)" fg:x="5238" fg:w="17"/><text x="99.9075%" y="351.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (17 samples, 0.32%)</title><rect x="99.6575%" y="325" width="0.3234%" height="15" fill="rgb(221,76,26)" fg:x="5238" fg:w="17"/><text x="99.9075%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`stat (1 samples, 0.02%)</title><rect x="99.9619%" y="309" width="0.0190%" height="15" fill="rgb(225,139,18)" fg:x="5254" fg:w="1"/><text x="100.2119%" y="319.50"></text></g><g><title>all (5,256 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(230,137,11)" fg:x="0" fg:w="5256"/><text x="0.2500%" y="495.50"></text></g><g><title>dyld`start (5,256 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(212,28,1)" fg:x="0" fg:w="5256"/><text x="0.2500%" y="479.50">dyld`start</text></g><g><title>colors`main (5,256 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(248,164,17)" fg:x="0" fg:w="5256"/><text x="0.2500%" y="463.50">colors`main</text></g><g><title>colors`std::rt::lang_start_internal (5,256 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(222,171,42)" fg:x="0" fg:w="5256"/><text x="0.2500%" y="447.50">colors`std::rt::lang_start_internal</text></g><g><title>colors`std::rt::lang_start::_{{closure}} (5,256 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(243,84,45)" fg:x="0" fg:w="5256"/><text x="0.2500%" y="431.50">colors`std::rt::lang_start::_{{closure}}</text></g><g><title>colors`std::sys::backtrace::__rust_begin_short_backtrace (5,256 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(252,49,23)" fg:x="0" fg:w="5256"/><text x="0.2500%" y="415.50">colors`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>colors`colors::main (5,256 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(215,19,7)" fg:x="0" fg:w="5256"/><text x="0.2500%" y="399.50">colors`colors::main</text></g><g><title>colors`tiny_skia::pixmap::Pixmap::new (1 samples, 0.02%)</title><rect x="99.9810%" y="373" width="0.0190%" height="15" fill="rgb(238,81,41)" fg:x="5255" fg:w="1"/><text x="100.2310%" y="383.50"></text></g></svg></svg>
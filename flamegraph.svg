<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="8841"><g><title>colors`ratatui::buffer::buffer::Buffer::index_of (1 samples, 0.01%)</title><rect x="0.0000%" y="389" width="0.0113%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>colors`ratatui::buffer::cell::Cell::set_char (1 samples, 0.01%)</title><rect x="0.0113%" y="389" width="0.0113%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2613%" y="399.50"></text></g><g><title>colors`&lt;&amp;mut colors::App as ratatui::widgets::Widget&gt;::render (3 samples, 0.03%)</title><rect x="0.0000%" y="405" width="0.0339%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="415.50"></text></g><g><title>libsystem_m.dylib`powf (1 samples, 0.01%)</title><rect x="0.0226%" y="389" width="0.0113%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.2726%" y="399.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::draw (1 samples, 0.01%)</title><rect x="0.0452%" y="389" width="0.0113%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1"/><text x="0.2952%" y="399.50"></text></g><g><title>colors`cosmic_text::buffer::_&lt;impl cosmic_text::font::system::BorrowedWithFontSystem&lt;cosmic_text::buffer::Buffer&gt;&gt;::set_size (2 samples, 0.02%)</title><rect x="0.0566%" y="389" width="0.0226%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="2"/><text x="0.3066%" y="399.50"></text></g><g><title>colors`ratatui::buffer::cell::Cell::symbol (2 samples, 0.02%)</title><rect x="0.0792%" y="389" width="0.0226%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="2"/><text x="0.3292%" y="399.50"></text></g><g><title>colors`&lt;cosmic_text::buffer::LayoutRunIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="0.1244%" y="373" width="0.0113%" height="15" fill="rgb(228,23,34)" fg:x="11" fg:w="1"/><text x="0.3744%" y="383.50"></text></g><g><title>colors`cosmic_text::swash::SwashCache::get_image (2 samples, 0.02%)</title><rect x="0.4864%" y="341" width="0.0226%" height="15" fill="rgb(218,30,26)" fg:x="43" fg:w="2"/><text x="0.7364%" y="351.50"></text></g><g><title>colors`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.01%)</title><rect x="0.4977%" y="325" width="0.0113%" height="15" fill="rgb(220,122,19)" fg:x="44" fg:w="1"/><text x="0.7477%" y="335.50"></text></g><g><title>colors`tiny_skia::painter::Paint::set_color (21 samples, 0.24%)</title><rect x="0.5090%" y="341" width="0.2375%" height="15" fill="rgb(250,228,42)" fg:x="45" fg:w="21"/><text x="0.7590%" y="351.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (3 samples, 0.03%)</title><rect x="0.9162%" y="325" width="0.0339%" height="15" fill="rgb(240,193,28)" fg:x="81" fg:w="3"/><text x="1.1662%" y="335.50"></text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (16 samples, 0.18%)</title><rect x="2.1265%" y="309" width="0.1810%" height="15" fill="rgb(216,20,37)" fg:x="188" fg:w="16"/><text x="2.3765%" y="319.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (54 samples, 0.61%)</title><rect x="2.3074%" y="309" width="0.6108%" height="15" fill="rgb(206,188,39)" fg:x="204" fg:w="54"/><text x="2.5574%" y="319.50"></text></g><g><title>colors`tiny_skia::blend_mode::BlendMode::to_stage (9 samples, 0.10%)</title><rect x="2.9182%" y="309" width="0.1018%" height="15" fill="rgb(217,207,13)" fg:x="258" fg:w="9"/><text x="3.1682%" y="319.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (38 samples, 0.43%)</title><rect x="3.0200%" y="309" width="0.4298%" height="15" fill="rgb(231,73,38)" fg:x="267" fg:w="38"/><text x="3.2700%" y="319.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::push (18 samples, 0.20%)</title><rect x="3.4498%" y="309" width="0.2036%" height="15" fill="rgb(225,20,46)" fg:x="305" fg:w="18"/><text x="3.6998%" y="319.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (184 samples, 2.08%)</title><rect x="9.3768%" y="293" width="2.0812%" height="15" fill="rgb(210,31,41)" fg:x="829" fg:w="184"/><text x="9.6268%" y="303.50">c..</text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (1,233 samples, 13.95%)</title><rect x="11.4580%" y="293" width="13.9464%" height="15" fill="rgb(221,200,47)" fg:x="1013" fg:w="1233"/><text x="11.7080%" y="303.50">colors`tiny_skia::pip..</text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (206 samples, 2.33%)</title><rect x="25.4044%" y="293" width="2.3301%" height="15" fill="rgb(226,26,5)" fg:x="2246" fg:w="206"/><text x="25.6544%" y="303.50">c..</text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (2,989 samples, 33.81%)</title><rect x="3.6534%" y="309" width="33.8084%" height="15" fill="rgb(249,33,26)" fg:x="323" fg:w="2989"/><text x="3.9034%" y="319.50">colors`tiny_skia::pipeline::blitter::RasterPipelineBlit..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (860 samples, 9.73%)</title><rect x="27.7344%" y="293" width="9.7274%" height="15" fill="rgb(235,183,28)" fg:x="2452" fg:w="860"/><text x="27.9844%" y="303.50">libsystem_plat..</text></g><g><title>colors`tiny_skia::pipeline::lowp::null_fn (2 samples, 0.02%)</title><rect x="39.6448%" y="277" width="0.0226%" height="15" fill="rgb(221,5,38)" fg:x="3505" fg:w="2"/><text x="39.8948%" y="287.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::source_over_rgba_tail (2 samples, 0.02%)</title><rect x="39.6675%" y="277" width="0.0226%" height="15" fill="rgb(247,18,42)" fg:x="3507" fg:w="2"/><text x="39.9175%" y="287.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (3 samples, 0.03%)</title><rect x="39.9276%" y="261" width="0.0339%" height="15" fill="rgb(241,131,45)" fg:x="3530" fg:w="3"/><text x="40.1776%" y="271.50"></text></g><g><title>colors`DYLD-STUB$$memset_pattern16 (7 samples, 0.08%)</title><rect x="39.9615%" y="261" width="0.0792%" height="15" fill="rgb(249,31,29)" fg:x="3533" fg:w="7"/><text x="40.2115%" y="271.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::source_over_rgba_tail (86 samples, 0.97%)</title><rect x="40.0407%" y="261" width="0.9727%" height="15" fill="rgb(225,111,53)" fg:x="3540" fg:w="86"/><text x="40.2907%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.11%)</title><rect x="41.0135%" y="261" width="0.1131%" height="15" fill="rgb(238,160,17)" fg:x="3626" fg:w="10"/><text x="41.2635%" y="271.50"></text></g><g><title>colors`tiny_skia::pipeline::lowp::start (141 samples, 1.59%)</title><rect x="39.6901%" y="277" width="1.5948%" height="15" fill="rgb(214,148,48)" fg:x="3509" fg:w="141"/><text x="39.9401%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (14 samples, 0.16%)</title><rect x="41.1266%" y="261" width="0.1584%" height="15" fill="rgb(232,36,49)" fg:x="3636" fg:w="14"/><text x="41.3766%" y="271.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (381 samples, 4.31%)</title><rect x="37.4618%" y="309" width="4.3095%" height="15" fill="rgb(209,103,24)" fg:x="3312" fg:w="381"/><text x="37.7118%" y="319.50">color..</text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (252 samples, 2.85%)</title><rect x="38.9209%" y="293" width="2.8504%" height="15" fill="rgb(229,88,8)" fg:x="3441" fg:w="252"/><text x="39.1709%" y="303.50">co..</text></g><g><title>colors`tiny_skia::pipeline::lowp::uniform_color (43 samples, 0.49%)</title><rect x="41.2849%" y="277" width="0.4864%" height="15" fill="rgb(213,181,19)" fg:x="3650" fg:w="43"/><text x="41.5349%" y="287.50"></text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (7 samples, 0.08%)</title><rect x="41.7713%" y="309" width="0.0792%" height="15" fill="rgb(254,191,54)" fg:x="3693" fg:w="7"/><text x="42.0213%" y="319.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::from_xywh (21 samples, 0.24%)</title><rect x="41.8505%" y="309" width="0.2375%" height="15" fill="rgb(241,83,37)" fg:x="3700" fg:w="21"/><text x="42.1005%" y="319.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::intersect (192 samples, 2.17%)</title><rect x="42.0880%" y="309" width="2.1717%" height="15" fill="rgb(233,36,39)" fg:x="3721" fg:w="192"/><text x="42.3380%" y="319.50">c..</text></g><g><title>colors`tiny_skia_path::rect::Rect::round (48 samples, 0.54%)</title><rect x="44.2597%" y="309" width="0.5429%" height="15" fill="rgb(226,3,54)" fg:x="3913" fg:w="48"/><text x="44.5097%" y="319.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (5,095 samples, 57.63%)</title><rect x="0.9501%" y="325" width="57.6292%" height="15" fill="rgb(245,192,40)" fg:x="84" fg:w="5095"/><text x="1.2001%" y="335.50">colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,218 samples, 13.78%)</title><rect x="44.8026%" y="309" width="13.7767%" height="15" fill="rgb(238,167,29)" fg:x="3961" fg:w="1218"/><text x="45.0526%" y="319.50">libsystem_platform.dy..</text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (25 samples, 0.28%)</title><rect x="58.5793%" y="325" width="0.2828%" height="15" fill="rgb(232,182,51)" fg:x="5179" fg:w="25"/><text x="58.8293%" y="335.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (10 samples, 0.11%)</title><rect x="58.8621%" y="325" width="0.1131%" height="15" fill="rgb(231,60,39)" fg:x="5204" fg:w="10"/><text x="59.1121%" y="335.50"></text></g><g><title>colors`tiny_skia_path::transform::Transform::is_identity (18 samples, 0.20%)</title><rect x="58.9752%" y="325" width="0.2036%" height="15" fill="rgb(208,69,12)" fg:x="5214" fg:w="18"/><text x="59.2252%" y="335.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::fill_rect (5,787 samples, 65.46%)</title><rect x="0.7465%" y="341" width="65.4564%" height="15" fill="rgb(235,93,37)" fg:x="66" fg:w="5787"/><text x="0.9965%" y="351.50">colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::fill_rect</text></g><g><title>libsystem_platform.dylib`_platform_memmove (621 samples, 7.02%)</title><rect x="59.1788%" y="325" width="7.0241%" height="15" fill="rgb(213,116,39)" fg:x="5232" fg:w="621"/><text x="59.4288%" y="335.50">libsystem..</text></g><g><title>colors`cosmic_text::swash::SwashCache::with_pixels (5,852 samples, 66.19%)</title><rect x="0.1357%" y="357" width="66.1916%" height="15" fill="rgb(222,207,29)" fg:x="12" fg:w="5852"/><text x="0.3857%" y="367.50">colors`cosmic_text::swash::SwashCache::with_pixels</text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (11 samples, 0.12%)</title><rect x="66.2029%" y="341" width="0.1244%" height="15" fill="rgb(206,96,30)" fg:x="5853" fg:w="11"/><text x="66.4529%" y="351.50"></text></g><g><title>colors`tiny_skia::painter::Paint::set_color (15 samples, 0.17%)</title><rect x="66.3273%" y="357" width="0.1697%" height="15" fill="rgb(218,138,4)" fg:x="5864" fg:w="15"/><text x="66.5773%" y="367.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::draw (5,921 samples, 66.97%)</title><rect x="0.1357%" y="373" width="66.9721%" height="15" fill="rgb(250,191,14)" fg:x="12" fg:w="5921"/><text x="0.3857%" y="383.50">colors`cosmic_text::buffer::Buffer::draw</text></g><g><title>colors`tiny_skia_path::rect::Rect::from_xywh (54 samples, 0.61%)</title><rect x="66.4970%" y="357" width="0.6108%" height="15" fill="rgb(239,60,40)" fg:x="5879" fg:w="54"/><text x="66.7470%" y="367.50"></text></g><g><title>colors`&lt;cosmic_text::line_ending::LineIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="67.1078%" y="357" width="0.0226%" height="15" fill="rgb(206,27,48)" fg:x="5933" fg:w="2"/><text x="67.3578%" y="367.50"></text></g><g><title>colors`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="67.1304%" y="341" width="0.0113%" height="15" fill="rgb(225,35,8)" fg:x="5935" fg:w="1"/><text x="67.3804%" y="351.50"></text></g><g><title>colors`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.01%)</title><rect x="67.1304%" y="325" width="0.0113%" height="15" fill="rgb(250,213,24)" fg:x="5935" fg:w="1"/><text x="67.3804%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="67.1417%" y="325" width="0.0226%" height="15" fill="rgb(247,123,22)" fg:x="5936" fg:w="2"/><text x="67.3917%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.03%)</title><rect x="67.1643%" y="325" width="0.0339%" height="15" fill="rgb(231,138,38)" fg:x="5938" fg:w="3"/><text x="67.4143%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.03%)</title><rect x="67.1643%" y="309" width="0.0339%" height="15" fill="rgb(231,145,46)" fg:x="5938" fg:w="3"/><text x="67.4143%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="67.1870%" y="293" width="0.0113%" height="15" fill="rgb(251,118,11)" fg:x="5940" fg:w="1"/><text x="67.4370%" y="303.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::cached::Cached&lt;cosmic_text::shape::ShapeLine&gt;&gt; (7 samples, 0.08%)</title><rect x="67.1417%" y="341" width="0.0792%" height="15" fill="rgb(217,147,25)" fg:x="5936" fg:w="7"/><text x="67.3917%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="67.1983%" y="325" width="0.0226%" height="15" fill="rgb(247,81,37)" fg:x="5941" fg:w="2"/><text x="67.4483%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.01%)</title><rect x="67.2209%" y="341" width="0.0113%" height="15" fill="rgb(209,12,38)" fg:x="5943" fg:w="1"/><text x="67.4709%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.05%)</title><rect x="67.2322%" y="341" width="0.0452%" height="15" fill="rgb(227,1,9)" fg:x="5944" fg:w="4"/><text x="67.4822%" y="351.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;cosmic_text::buffer_line::BufferLine&gt; (14 samples, 0.16%)</title><rect x="67.1304%" y="357" width="0.1584%" height="15" fill="rgb(248,47,43)" fg:x="5935" fg:w="14"/><text x="67.3804%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.01%)</title><rect x="67.2775%" y="341" width="0.0113%" height="15" fill="rgb(221,10,30)" fg:x="5948" fg:w="1"/><text x="67.5275%" y="351.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="67.3001%" y="325" width="0.0113%" height="15" fill="rgb(210,229,1)" fg:x="5950" fg:w="1"/><text x="67.5501%" y="335.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="67.3566%" y="293" width="0.0226%" height="15" fill="rgb(222,148,37)" fg:x="5955" fg:w="2"/><text x="67.6066%" y="303.50"></text></g><g><title>colors`&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="67.3793%" y="293" width="0.0113%" height="15" fill="rgb(234,67,33)" fg:x="5957" fg:w="1"/><text x="67.6293%" y="303.50"></text></g><g><title>colors`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="67.3906%" y="293" width="0.0113%" height="15" fill="rgb(247,98,35)" fg:x="5958" fg:w="1"/><text x="67.6406%" y="303.50"></text></g><g><title>colors`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="67.4019%" y="293" width="0.0113%" height="15" fill="rgb(247,138,52)" fg:x="5959" fg:w="1"/><text x="67.6519%" y="303.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.01%)</title><rect x="67.4132%" y="293" width="0.0113%" height="15" fill="rgb(213,79,30)" fg:x="5960" fg:w="1"/><text x="67.6632%" y="303.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.01%)</title><rect x="67.4245%" y="293" width="0.0113%" height="15" fill="rgb(246,177,23)" fg:x="5961" fg:w="1"/><text x="67.6745%" y="303.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="67.4245%" y="277" width="0.0113%" height="15" fill="rgb(230,62,27)" fg:x="5961" fg:w="1"/><text x="67.6745%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.01%)</title><rect x="67.4245%" y="261" width="0.0113%" height="15" fill="rgb(216,154,8)" fg:x="5961" fg:w="1"/><text x="67.6745%" y="271.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.01%)</title><rect x="67.4811%" y="277" width="0.0113%" height="15" fill="rgb(244,35,45)" fg:x="5966" fg:w="1"/><text x="67.7311%" y="287.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.01%)</title><rect x="67.4924%" y="277" width="0.0113%" height="15" fill="rgb(251,115,12)" fg:x="5967" fg:w="1"/><text x="67.7424%" y="287.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="67.4924%" y="261" width="0.0113%" height="15" fill="rgb(240,54,50)" fg:x="5967" fg:w="1"/><text x="67.7424%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.01%)</title><rect x="67.4924%" y="245" width="0.0113%" height="15" fill="rgb(233,84,52)" fg:x="5967" fg:w="1"/><text x="67.7424%" y="255.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::defaults (2 samples, 0.02%)</title><rect x="67.5037%" y="277" width="0.0226%" height="15" fill="rgb(207,117,47)" fg:x="5968" fg:w="2"/><text x="67.7537%" y="287.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (2 samples, 0.02%)</title><rect x="67.6507%" y="261" width="0.0226%" height="15" fill="rgb(249,43,39)" fg:x="5981" fg:w="2"/><text x="67.9007%" y="271.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::defaults (1 samples, 0.01%)</title><rect x="67.6733%" y="261" width="0.0113%" height="15" fill="rgb(209,38,44)" fg:x="5983" fg:w="1"/><text x="67.9233%" y="271.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (2 samples, 0.02%)</title><rect x="67.6847%" y="261" width="0.0226%" height="15" fill="rgb(236,212,23)" fg:x="5984" fg:w="2"/><text x="67.9347%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.01%)</title><rect x="83.9724%" y="181" width="0.0113%" height="15" fill="rgb(242,79,21)" fg:x="7424" fg:w="1"/><text x="84.2224%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.02%)</title><rect x="83.9950%" y="165" width="0.0226%" height="15" fill="rgb(211,96,35)" fg:x="7426" fg:w="2"/><text x="84.2450%" y="175.50"></text></g><g><title>colors`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (9 samples, 0.10%)</title><rect x="83.9385%" y="213" width="0.1018%" height="15" fill="rgb(253,215,40)" fg:x="7421" fg:w="9"/><text x="84.1885%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.07%)</title><rect x="83.9724%" y="197" width="0.0679%" height="15" fill="rgb(211,81,21)" fg:x="7424" fg:w="6"/><text x="84.2224%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.06%)</title><rect x="83.9837%" y="181" width="0.0566%" height="15" fill="rgb(208,190,38)" fg:x="7425" fg:w="5"/><text x="84.2337%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.02%)</title><rect x="84.0176%" y="165" width="0.0226%" height="15" fill="rgb(235,213,38)" fg:x="7428" fg:w="2"/><text x="84.2676%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.01%)</title><rect x="84.0516%" y="181" width="0.0113%" height="15" fill="rgb(237,122,38)" fg:x="7431" fg:w="1"/><text x="84.3016%" y="191.50"></text></g><g><title>colors`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (22 samples, 0.25%)</title><rect x="83.8706%" y="229" width="0.2488%" height="15" fill="rgb(244,218,35)" fg:x="7415" fg:w="22"/><text x="84.1206%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.08%)</title><rect x="84.0403%" y="213" width="0.0792%" height="15" fill="rgb(240,68,47)" fg:x="7430" fg:w="7"/><text x="84.2903%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.07%)</title><rect x="84.0516%" y="197" width="0.0679%" height="15" fill="rgb(210,16,53)" fg:x="7431" fg:w="6"/><text x="84.3016%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.06%)</title><rect x="84.0629%" y="181" width="0.0566%" height="15" fill="rgb(235,124,12)" fg:x="7432" fg:w="5"/><text x="84.3129%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.02%)</title><rect x="84.0968%" y="165" width="0.0226%" height="15" fill="rgb(224,169,11)" fg:x="7435" fg:w="2"/><text x="84.3468%" y="175.50"></text></g><g><title>colors`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (1 samples, 0.01%)</title><rect x="84.1194%" y="213" width="0.0113%" height="15" fill="rgb(250,166,2)" fg:x="7437" fg:w="1"/><text x="84.3694%" y="223.50"></text></g><g><title>colors`alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (2 samples, 0.02%)</title><rect x="84.1194%" y="229" width="0.0226%" height="15" fill="rgb(242,216,29)" fg:x="7437" fg:w="2"/><text x="84.3694%" y="239.50"></text></g><g><title>colors`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (1 samples, 0.01%)</title><rect x="84.1308%" y="213" width="0.0113%" height="15" fill="rgb(230,116,27)" fg:x="7438" fg:w="1"/><text x="84.3808%" y="223.50"></text></g><g><title>colors`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.01%)</title><rect x="84.1421%" y="229" width="0.0113%" height="15" fill="rgb(228,99,48)" fg:x="7439" fg:w="1"/><text x="84.3921%" y="239.50"></text></g><g><title>colors`alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (39 samples, 0.44%)</title><rect x="84.1534%" y="229" width="0.4411%" height="15" fill="rgb(253,11,6)" fg:x="7440" fg:w="39"/><text x="84.4034%" y="239.50"></text></g><g><title>colors`core::str::count::char_count_general_case (3 samples, 0.03%)</title><rect x="84.5945%" y="229" width="0.0339%" height="15" fill="rgb(247,143,39)" fg:x="7479" fg:w="3"/><text x="84.8445%" y="239.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (15 samples, 0.17%)</title><rect x="84.6284%" y="229" width="0.1697%" height="15" fill="rgb(236,97,10)" fg:x="7482" fg:w="15"/><text x="84.8784%" y="239.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_supported_codepoints_in_word::_{{closure}} (19 samples, 0.21%)</title><rect x="84.7981%" y="229" width="0.2149%" height="15" fill="rgb(233,208,19)" fg:x="7497" fg:w="19"/><text x="85.0481%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="85.0130%" y="229" width="0.0226%" height="15" fill="rgb(216,164,2)" fg:x="7516" fg:w="2"/><text x="85.2630%" y="239.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (1,527 samples, 17.27%)</title><rect x="67.7864%" y="245" width="17.2718%" height="15" fill="rgb(220,129,5)" fg:x="5993" fg:w="1527"/><text x="68.0364%" y="255.50">colors`&lt;cosmic_text::font::..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="85.0356%" y="229" width="0.0226%" height="15" fill="rgb(242,17,10)" fg:x="7518" fg:w="2"/><text x="85.2856%" y="239.50"></text></g><g><title>colors`DYLD-STUB$$memcmp (1 samples, 0.01%)</title><rect x="85.0583%" y="245" width="0.0113%" height="15" fill="rgb(242,107,0)" fg:x="7520" fg:w="1"/><text x="85.3083%" y="255.50"></text></g><g><title>colors`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.03%)</title><rect x="85.0696%" y="245" width="0.0339%" height="15" fill="rgb(251,28,31)" fg:x="7521" fg:w="3"/><text x="85.3196%" y="255.50"></text></g><g><title>colors`core::str::count::char_count_general_case (1 samples, 0.01%)</title><rect x="85.1035%" y="245" width="0.0113%" height="15" fill="rgb(233,223,10)" fg:x="7524" fg:w="1"/><text x="85.3535%" y="255.50"></text></g><g><title>colors`cosmic_text::attrs::AttrsList::get_span (7 samples, 0.08%)</title><rect x="85.1148%" y="245" width="0.0792%" height="15" fill="rgb(215,21,27)" fg:x="7525" fg:w="7"/><text x="85.3648%" y="255.50"></text></g><g><title>colors`alloc::collections::btree::navigate::LeafRange&lt;BorrowType,K,V&gt;::perform_next_back_checked (1 samples, 0.01%)</title><rect x="85.1827%" y="229" width="0.0113%" height="15" fill="rgb(232,23,21)" fg:x="7531" fg:w="1"/><text x="85.4327%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.01%)</title><rect x="85.2279%" y="213" width="0.0113%" height="15" fill="rgb(244,5,23)" fg:x="7535" fg:w="1"/><text x="85.4779%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.01%)</title><rect x="85.2618%" y="197" width="0.0113%" height="15" fill="rgb(226,81,46)" fg:x="7538" fg:w="1"/><text x="85.5118%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="85.2732%" y="197" width="0.0113%" height="15" fill="rgb(247,70,30)" fg:x="7539" fg:w="1"/><text x="85.5232%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.05%)</title><rect x="85.2958%" y="181" width="0.0452%" height="15" fill="rgb(212,68,19)" fg:x="7541" fg:w="4"/><text x="85.5458%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.11%)</title><rect x="85.2392%" y="213" width="0.1131%" height="15" fill="rgb(240,187,13)" fg:x="7536" fg:w="10"/><text x="85.4892%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.07%)</title><rect x="85.2845%" y="197" width="0.0679%" height="15" fill="rgb(223,113,26)" fg:x="7540" fg:w="6"/><text x="85.5345%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="85.3410%" y="181" width="0.0113%" height="15" fill="rgb(206,192,2)" fg:x="7545" fg:w="1"/><text x="85.5910%" y="191.50"></text></g><g><title>colors`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.17%)</title><rect x="85.1940%" y="229" width="0.1697%" height="15" fill="rgb(241,108,4)" fg:x="7532" fg:w="15"/><text x="85.4440%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="85.3523%" y="213" width="0.0113%" height="15" fill="rgb(247,173,49)" fg:x="7546" fg:w="1"/><text x="85.6023%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.01%)</title><rect x="85.3636%" y="229" width="0.0113%" height="15" fill="rgb(224,114,35)" fg:x="7547" fg:w="1"/><text x="85.6136%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="85.3750%" y="229" width="0.0113%" height="15" fill="rgb(245,159,27)" fg:x="7548" fg:w="1"/><text x="85.6250%" y="239.50"></text></g><g><title>colors`cosmic_text::font::fallback::FontFallbackIter::new (21 samples, 0.24%)</title><rect x="85.1940%" y="245" width="0.2375%" height="15" fill="rgb(245,172,44)" fg:x="7532" fg:w="21"/><text x="85.4440%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.05%)</title><rect x="85.3863%" y="229" width="0.0452%" height="15" fill="rgb(236,23,11)" fg:x="7549" fg:w="4"/><text x="85.6363%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.01%)</title><rect x="85.4202%" y="213" width="0.0113%" height="15" fill="rgb(205,117,38)" fg:x="7552" fg:w="1"/><text x="85.6702%" y="223.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (42 samples, 0.48%)</title><rect x="85.4315%" y="245" width="0.4751%" height="15" fill="rgb(237,72,25)" fg:x="7553" fg:w="42"/><text x="85.6815%" y="255.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_matches (8 samples, 0.09%)</title><rect x="85.9066%" y="245" width="0.0905%" height="15" fill="rgb(244,70,9)" fg:x="7595" fg:w="8"/><text x="86.1566%" y="255.50"></text></g><g><title>colors`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.01%)</title><rect x="85.9857%" y="229" width="0.0113%" height="15" fill="rgb(217,125,39)" fg:x="7602" fg:w="1"/><text x="86.2357%" y="239.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font_supported_codepoints_in_word::_{{closure}} (2 samples, 0.02%)</title><rect x="85.9971%" y="245" width="0.0226%" height="15" fill="rgb(235,36,10)" fg:x="7603" fg:w="2"/><text x="86.2471%" y="255.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="86.0310%" y="213" width="0.0226%" height="15" fill="rgb(251,123,47)" fg:x="7606" fg:w="2"/><text x="86.2810%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="86.0310%" y="197" width="0.0226%" height="15" fill="rgb(221,13,13)" fg:x="7606" fg:w="2"/><text x="86.2810%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="86.0310%" y="181" width="0.0226%" height="15" fill="rgb(238,131,9)" fg:x="7606" fg:w="2"/><text x="86.2810%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.02%)</title><rect x="86.0310%" y="165" width="0.0226%" height="15" fill="rgb(211,50,8)" fg:x="7606" fg:w="2"/><text x="86.2810%" y="175.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.03%)</title><rect x="86.0310%" y="229" width="0.0339%" height="15" fill="rgb(245,182,24)" fg:x="7606" fg:w="3"/><text x="86.2810%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="86.0536%" y="213" width="0.0113%" height="15" fill="rgb(242,14,37)" fg:x="7608" fg:w="1"/><text x="86.3036%" y="223.50"></text></g><g><title>colors`core::ptr::drop_in_place&lt;rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t&gt; (4 samples, 0.05%)</title><rect x="86.0649%" y="229" width="0.0452%" height="15" fill="rgb(246,228,12)" fg:x="7609" fg:w="4"/><text x="86.3149%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.03%)</title><rect x="86.0762%" y="213" width="0.0339%" height="15" fill="rgb(213,55,15)" fg:x="7610" fg:w="3"/><text x="86.3262%" y="223.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::guess_segment_properties (2 samples, 0.02%)</title><rect x="86.1102%" y="229" width="0.0226%" height="15" fill="rgb(209,9,3)" fg:x="7613" fg:w="2"/><text x="86.3602%" y="239.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (1 samples, 0.01%)</title><rect x="86.1215%" y="213" width="0.0113%" height="15" fill="rgb(230,59,30)" fg:x="7614" fg:w="1"/><text x="86.3715%" y="223.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::push_str (3 samples, 0.03%)</title><rect x="86.1328%" y="229" width="0.0339%" height="15" fill="rgb(209,121,21)" fg:x="7615" fg:w="3"/><text x="86.3828%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::compile (1 samples, 0.01%)</title><rect x="86.1667%" y="229" width="0.0113%" height="15" fill="rgb(220,109,13)" fg:x="7618" fg:w="1"/><text x="86.4167%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::shape_internal (1 samples, 0.01%)</title><rect x="86.1780%" y="229" width="0.0113%" height="15" fill="rgb(232,18,1)" fg:x="7619" fg:w="1"/><text x="86.4280%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_complex::hb_ot_shape_complex_categorize (1 samples, 0.01%)</title><rect x="86.1893%" y="229" width="0.0113%" height="15" fill="rgb(215,41,42)" fg:x="7620" fg:w="1"/><text x="86.4393%" y="239.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::select_script (7 samples, 0.08%)</title><rect x="86.2007%" y="213" width="0.0792%" height="15" fill="rgb(224,123,36)" fg:x="7621" fg:w="7"/><text x="86.4507%" y="223.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Script as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (2 samples, 0.02%)</title><rect x="86.3025%" y="197" width="0.0226%" height="15" fill="rgb(240,125,3)" fg:x="7630" fg:w="2"/><text x="86.5525%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::new (15 samples, 0.17%)</title><rect x="86.2798%" y="213" width="0.1697%" height="15" fill="rgb(205,98,50)" fg:x="7628" fg:w="15"/><text x="86.5298%" y="223.50"></text></g><g><title>colors`rustybuzz::hb::tag::tags_from_script_and_language (11 samples, 0.12%)</title><rect x="86.3251%" y="197" width="0.1244%" height="15" fill="rgb(205,185,37)" fg:x="7632" fg:w="11"/><text x="86.5751%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="86.6418%" y="133" width="0.0226%" height="15" fill="rgb(238,207,15)" fg:x="7660" fg:w="2"/><text x="86.8918%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="86.6870%" y="117" width="0.0113%" height="15" fill="rgb(213,199,42)" fg:x="7664" fg:w="1"/><text x="86.9370%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.06%)</title><rect x="86.6983%" y="117" width="0.0566%" height="15" fill="rgb(235,201,11)" fg:x="7665" fg:w="5"/><text x="86.9483%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.06%)</title><rect x="86.6983%" y="101" width="0.0566%" height="15" fill="rgb(207,46,11)" fg:x="7665" fg:w="5"/><text x="86.9483%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.05%)</title><rect x="86.7096%" y="85" width="0.0452%" height="15" fill="rgb(241,35,35)" fg:x="7666" fg:w="4"/><text x="86.9596%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (9 samples, 0.10%)</title><rect x="86.6644%" y="133" width="0.1018%" height="15" fill="rgb(243,32,47)" fg:x="7662" fg:w="9"/><text x="86.9144%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.01%)</title><rect x="86.7549%" y="117" width="0.0113%" height="15" fill="rgb(247,202,23)" fg:x="7670" fg:w="1"/><text x="87.0049%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="86.7662%" y="133" width="0.0113%" height="15" fill="rgb(219,102,11)" fg:x="7671" fg:w="1"/><text x="87.0162%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.06%)</title><rect x="86.7775%" y="117" width="0.0566%" height="15" fill="rgb(243,110,44)" fg:x="7672" fg:w="5"/><text x="87.0275%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.03%)</title><rect x="86.8001%" y="101" width="0.0339%" height="15" fill="rgb(222,74,54)" fg:x="7674" fg:w="3"/><text x="87.0501%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.03%)</title><rect x="86.8341%" y="117" width="0.0339%" height="15" fill="rgb(216,99,12)" fg:x="7677" fg:w="3"/><text x="87.0841%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.03%)</title><rect x="86.8341%" y="101" width="0.0339%" height="15" fill="rgb(226,22,26)" fg:x="7677" fg:w="3"/><text x="87.0841%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (9 samples, 0.10%)</title><rect x="86.7775%" y="133" width="0.1018%" height="15" fill="rgb(217,163,10)" fg:x="7672" fg:w="9"/><text x="87.0275%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.01%)</title><rect x="86.8680%" y="117" width="0.0113%" height="15" fill="rgb(213,25,53)" fg:x="7680" fg:w="1"/><text x="87.1180%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="86.8680%" y="101" width="0.0113%" height="15" fill="rgb(252,105,26)" fg:x="7680" fg:w="1"/><text x="87.1180%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (26 samples, 0.29%)</title><rect x="86.6078%" y="165" width="0.2941%" height="15" fill="rgb(220,39,43)" fg:x="7657" fg:w="26"/><text x="86.8578%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (25 samples, 0.28%)</title><rect x="86.6192%" y="149" width="0.2828%" height="15" fill="rgb(229,68,48)" fg:x="7658" fg:w="25"/><text x="86.8692%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="86.8793%" y="133" width="0.0226%" height="15" fill="rgb(252,8,32)" fg:x="7681" fg:w="2"/><text x="87.1293%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.01%)</title><rect x="86.9019%" y="165" width="0.0113%" height="15" fill="rgb(223,20,43)" fg:x="7683" fg:w="1"/><text x="87.1519%" y="175.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (36 samples, 0.41%)</title><rect x="86.5174%" y="181" width="0.4072%" height="15" fill="rgb(229,81,49)" fg:x="7649" fg:w="36"/><text x="86.7674%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.01%)</title><rect x="86.9132%" y="165" width="0.0113%" height="15" fill="rgb(236,28,36)" fg:x="7684" fg:w="1"/><text x="87.1632%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::collect_features (43 samples, 0.49%)</title><rect x="86.4495%" y="213" width="0.4864%" height="15" fill="rgb(249,185,26)" fg:x="7643" fg:w="43"/><text x="86.6995%" y="223.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (39 samples, 0.44%)</title><rect x="86.4947%" y="197" width="0.4411%" height="15" fill="rgb(249,174,33)" fg:x="7647" fg:w="39"/><text x="86.7447%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="86.9246%" y="181" width="0.0113%" height="15" fill="rgb(233,201,37)" fg:x="7685" fg:w="1"/><text x="87.1746%" y="191.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Feature as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (4 samples, 0.05%)</title><rect x="86.9698%" y="197" width="0.0452%" height="15" fill="rgb(221,78,26)" fg:x="7689" fg:w="4"/><text x="87.2198%" y="207.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::find_language_feature (8 samples, 0.09%)</title><rect x="87.0150%" y="197" width="0.0905%" height="15" fill="rgb(250,127,30)" fg:x="7693" fg:w="8"/><text x="87.2650%" y="207.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.01%)</title><rect x="87.1055%" y="197" width="0.0113%" height="15" fill="rgb(230,49,44)" fg:x="7701" fg:w="1"/><text x="87.3555%" y="207.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::insert_tail (11 samples, 0.12%)</title><rect x="87.1168%" y="197" width="0.1244%" height="15" fill="rgb(229,67,23)" fg:x="7702" fg:w="11"/><text x="87.3668%" y="207.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Feature as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (74 samples, 0.84%)</title><rect x="87.7503%" y="181" width="0.8370%" height="15" fill="rgb(249,83,47)" fg:x="7758" fg:w="74"/><text x="88.0003%" y="191.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::LayoutTable as rustybuzz::hb::ot_layout::LayoutTableExt&gt;::find_language_feature (135 samples, 1.53%)</title><rect x="88.5873%" y="181" width="1.5270%" height="15" fill="rgb(215,43,3)" fg:x="7832" fg:w="135"/><text x="88.8373%" y="191.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::layout_table::Script as ttf_parser::ggg::layout_table::RecordListItem&gt;::parse (22 samples, 0.25%)</title><rect x="90.1142%" y="181" width="0.2488%" height="15" fill="rgb(238,154,13)" fg:x="7967" fg:w="22"/><text x="90.3642%" y="191.50"></text></g><g><title>colors`DYLD-STUB$$realloc (1 samples, 0.01%)</title><rect x="90.3857%" y="165" width="0.0113%" height="15" fill="rgb(219,56,2)" fg:x="7991" fg:w="1"/><text x="90.6357%" y="175.50"></text></g><g><title>colors`__rdl_alloc (1 samples, 0.01%)</title><rect x="90.3970%" y="165" width="0.0113%" height="15" fill="rgb(233,0,4)" fg:x="7992" fg:w="1"/><text x="90.6470%" y="175.50"></text></g><g><title>colors`__rdl_realloc (1 samples, 0.01%)</title><rect x="90.4083%" y="165" width="0.0113%" height="15" fill="rgb(235,30,7)" fg:x="7993" fg:w="1"/><text x="90.6583%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.02%)</title><rect x="90.4196%" y="149" width="0.0226%" height="15" fill="rgb(250,79,13)" fg:x="7994" fg:w="2"/><text x="90.6696%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="90.4875%" y="117" width="0.0226%" height="15" fill="rgb(211,146,34)" fg:x="8000" fg:w="2"/><text x="90.7375%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.05%)</title><rect x="90.5101%" y="117" width="0.0452%" height="15" fill="rgb(228,22,38)" fg:x="8002" fg:w="4"/><text x="90.7601%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.09%)</title><rect x="90.5780%" y="101" width="0.0905%" height="15" fill="rgb(235,168,5)" fg:x="8008" fg:w="8"/><text x="90.8280%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.05%)</title><rect x="90.6685%" y="101" width="0.0452%" height="15" fill="rgb(221,155,16)" fg:x="8016" fg:w="4"/><text x="90.9185%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (15 samples, 0.17%)</title><rect x="90.5554%" y="117" width="0.1697%" height="15" fill="rgb(215,215,53)" fg:x="8006" fg:w="15"/><text x="90.8054%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="90.7137%" y="101" width="0.0113%" height="15" fill="rgb(223,4,10)" fg:x="8020" fg:w="1"/><text x="90.9637%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.01%)</title><rect x="90.7137%" y="85" width="0.0113%" height="15" fill="rgb(234,103,6)" fg:x="8020" fg:w="1"/><text x="90.9637%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (24 samples, 0.27%)</title><rect x="90.4649%" y="133" width="0.2715%" height="15" fill="rgb(227,97,0)" fg:x="7998" fg:w="24"/><text x="90.7149%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="90.7250%" y="117" width="0.0113%" height="15" fill="rgb(234,150,53)" fg:x="8021" fg:w="1"/><text x="90.9750%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.01%)</title><rect x="90.7363%" y="133" width="0.0113%" height="15" fill="rgb(228,201,54)" fg:x="8022" fg:w="1"/><text x="90.9863%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (28 samples, 0.32%)</title><rect x="90.4423%" y="149" width="0.3167%" height="15" fill="rgb(222,22,37)" fg:x="7996" fg:w="28"/><text x="90.6923%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.01%)</title><rect x="90.7477%" y="133" width="0.0113%" height="15" fill="rgb(237,53,32)" fg:x="8023" fg:w="1"/><text x="90.9977%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.02%)</title><rect x="90.7590%" y="149" width="0.0226%" height="15" fill="rgb(233,25,53)" fg:x="8024" fg:w="2"/><text x="91.0090%" y="159.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (33 samples, 0.37%)</title><rect x="90.4196%" y="165" width="0.3733%" height="15" fill="rgb(210,40,34)" fg:x="7994" fg:w="33"/><text x="90.6696%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.01%)</title><rect x="90.7816%" y="149" width="0.0113%" height="15" fill="rgb(241,220,44)" fg:x="8026" fg:w="1"/><text x="91.0316%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="90.7929%" y="165" width="0.0226%" height="15" fill="rgb(235,28,35)" fg:x="8027" fg:w="2"/><text x="91.0429%" y="175.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (41 samples, 0.46%)</title><rect x="90.3631%" y="181" width="0.4637%" height="15" fill="rgb(210,56,17)" fg:x="7989" fg:w="41"/><text x="90.6131%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.01%)</title><rect x="90.8155%" y="165" width="0.0113%" height="15" fill="rgb(224,130,29)" fg:x="8029" fg:w="1"/><text x="91.0655%" y="175.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="90.8268%" y="181" width="0.0113%" height="15" fill="rgb(235,212,8)" fg:x="8030" fg:w="1"/><text x="91.0768%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::ot_map::hb_ot_map_builder_t::compile (349 samples, 3.95%)</title><rect x="87.2413%" y="197" width="3.9475%" height="15" fill="rgb(223,33,50)" fg:x="7713" fg:w="349"/><text x="87.4913%" y="207.50">colo..</text></g><g><title>colors`core::slice::sort::stable::driftsort_main (31 samples, 0.35%)</title><rect x="90.8381%" y="181" width="0.3506%" height="15" fill="rgb(219,149,13)" fg:x="8031" fg:w="31"/><text x="91.0881%" y="191.50"></text></g><g><title>colors`core::slice::sort::stable::drift::sort (31 samples, 0.35%)</title><rect x="90.8381%" y="165" width="0.3506%" height="15" fill="rgb(250,156,29)" fg:x="8031" fg:w="31"/><text x="91.0881%" y="175.50"></text></g><g><title>colors`core::slice::sort::stable::quicksort::quicksort (30 samples, 0.34%)</title><rect x="90.8495%" y="149" width="0.3393%" height="15" fill="rgb(216,193,19)" fg:x="8032" fg:w="30"/><text x="91.0995%" y="159.50"></text></g><g><title>colors`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (30 samples, 0.34%)</title><rect x="90.8495%" y="133" width="0.3393%" height="15" fill="rgb(216,135,14)" fg:x="8032" fg:w="30"/><text x="91.0995%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="91.1888%" y="197" width="0.0113%" height="15" fill="rgb(241,47,5)" fg:x="8062" fg:w="1"/><text x="91.4388%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::hb_ot_shape_planner_t::compile (378 samples, 4.28%)</title><rect x="86.9359%" y="213" width="4.2755%" height="15" fill="rgb(233,42,35)" fg:x="7686" fg:w="378"/><text x="87.1859%" y="223.50">color..</text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.01%)</title><rect x="91.2001%" y="197" width="0.0113%" height="15" fill="rgb(231,13,6)" fg:x="8063" fg:w="1"/><text x="91.4501%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::tag::tags_from_script_and_language (1 samples, 0.01%)</title><rect x="91.2114%" y="213" width="0.0113%" height="15" fill="rgb(207,181,40)" fg:x="8064" fg:w="1"/><text x="91.4614%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.03%)</title><rect x="91.2227%" y="213" width="0.0339%" height="15" fill="rgb(254,173,49)" fg:x="8065" fg:w="3"/><text x="91.4727%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="91.2566%" y="213" width="0.0113%" height="15" fill="rgb(221,1,38)" fg:x="8068" fg:w="1"/><text x="91.5066%" y="223.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_plan::hb_ot_shape_plan_t::new (449 samples, 5.08%)</title><rect x="86.2007%" y="229" width="5.0786%" height="15" fill="rgb(206,124,46)" fg:x="7621" fg:w="449"/><text x="86.4507%" y="239.50">colors..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="91.2680%" y="213" width="0.0113%" height="15" fill="rgb(249,21,11)" fg:x="8069" fg:w="1"/><text x="91.5180%" y="223.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::guess_segment_properties (1 samples, 0.01%)</title><rect x="91.2793%" y="213" width="0.0113%" height="15" fill="rgb(222,201,40)" fg:x="8070" fg:w="1"/><text x="91.5293%" y="223.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::merge_clusters (1 samples, 0.01%)</title><rect x="91.2906%" y="213" width="0.0113%" height="15" fill="rgb(235,61,29)" fg:x="8071" fg:w="1"/><text x="91.5406%" y="223.50"></text></g><g><title>colors`rustybuzz::hb::ot_layout::apply_layout_table (1 samples, 0.01%)</title><rect x="91.3019%" y="213" width="0.0113%" height="15" fill="rgb(219,207,3)" fg:x="8072" fg:w="1"/><text x="91.5519%" y="223.50"></text></g><g><title>colors`&lt;char as unicode_properties::general_category::UnicodeGeneralCategory&gt;::general_category (2 samples, 0.02%)</title><rect x="91.3698%" y="197" width="0.0226%" height="15" fill="rgb(222,56,46)" fg:x="8078" fg:w="2"/><text x="91.6198%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_glyph_info_t::init_unicode_props (1 samples, 0.01%)</title><rect x="91.3924%" y="197" width="0.0113%" height="15" fill="rgb(239,76,54)" fg:x="8080" fg:w="1"/><text x="91.6424%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::ot_layout::apply_layout_table (37 samples, 0.42%)</title><rect x="91.4037%" y="197" width="0.4185%" height="15" fill="rgb(231,124,27)" fg:x="8081" fg:w="37"/><text x="91.6537%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::sync (6 samples, 0.07%)</title><rect x="91.7543%" y="181" width="0.0679%" height="15" fill="rgb(249,195,6)" fg:x="8112" fg:w="6"/><text x="92.0043%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::next_glyphs (1 samples, 0.01%)</title><rect x="91.8109%" y="165" width="0.0113%" height="15" fill="rgb(237,174,47)" fg:x="8117" fg:w="1"/><text x="92.0609%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::next_glyphs (2 samples, 0.02%)</title><rect x="91.8335%" y="181" width="0.0226%" height="15" fill="rgb(206,201,31)" fg:x="8119" fg:w="2"/><text x="92.0835%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::sync (5 samples, 0.06%)</title><rect x="91.8561%" y="181" width="0.0566%" height="15" fill="rgb(231,57,52)" fg:x="8121" fg:w="5"/><text x="92.1061%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::get_nominal_glyph (4 samples, 0.05%)</title><rect x="91.9127%" y="181" width="0.0452%" height="15" fill="rgb(248,177,22)" fg:x="8126" fg:w="4"/><text x="92.1627%" y="191.50"></text></g><g><title>colors`ttf_parser::tables::cmap::Subtables::get (1 samples, 0.01%)</title><rect x="91.9466%" y="165" width="0.0113%" height="15" fill="rgb(215,211,37)" fg:x="8129" fg:w="1"/><text x="92.1966%" y="175.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape_normalize::_hb_ot_shape_normalize (18 samples, 0.20%)</title><rect x="91.8222%" y="197" width="0.2036%" height="15" fill="rgb(241,128,51)" fg:x="8118" fg:w="18"/><text x="92.0722%" y="207.50"></text></g><g><title>colors`ttf_parser::tables::cmap::format12::Subtable12::glyph_index (6 samples, 0.07%)</title><rect x="91.9579%" y="181" width="0.0679%" height="15" fill="rgb(227,165,31)" fg:x="8130" fg:w="6"/><text x="92.2079%" y="191.50"></text></g><g><title>colors`rustybuzz::hb::shape::shape_with_plan (72 samples, 0.81%)</title><rect x="91.2793%" y="229" width="0.8144%" height="15" fill="rgb(228,167,24)" fg:x="8070" fg:w="72"/><text x="91.5293%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::ot_shape::shape_internal (69 samples, 0.78%)</title><rect x="91.3132%" y="213" width="0.7805%" height="15" fill="rgb(228,143,12)" fg:x="8073" fg:w="69"/><text x="91.5632%" y="223.50"></text></g><g><title>colors`ttf_parser::ggg::ClassDefinition::get (6 samples, 0.07%)</title><rect x="92.0258%" y="197" width="0.0679%" height="15" fill="rgb(249,149,8)" fg:x="8136" fg:w="6"/><text x="92.2758%" y="207.50"></text></g><g><title>colors`cosmic_text::shape::shape_fallback (539 samples, 6.10%)</title><rect x="86.0197%" y="245" width="6.0966%" height="15" fill="rgb(243,35,44)" fg:x="7605" fg:w="539"/><text x="86.2697%" y="255.50">colors`c..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="92.0937%" y="229" width="0.0226%" height="15" fill="rgb(246,89,9)" fg:x="8142" fg:w="2"/><text x="92.3437%" y="239.50"></text></g><g><title>colors`fontdb::Database::face (55 samples, 0.62%)</title><rect x="92.1163%" y="245" width="0.6221%" height="15" fill="rgb(233,213,13)" fg:x="8144" fg:w="55"/><text x="92.3663%" y="255.50"></text></g><g><title>colors`rustybuzz::hb::buffer::hb_buffer_t::push_str (1 samples, 0.01%)</title><rect x="92.7384%" y="245" width="0.0113%" height="15" fill="rgb(233,141,41)" fg:x="8199" fg:w="1"/><text x="92.9884%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.01%)</title><rect x="92.7497%" y="245" width="0.0113%" height="15" fill="rgb(239,167,4)" fg:x="8200" fg:w="1"/><text x="92.9997%" y="255.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (2,227 samples, 25.19%)</title><rect x="67.7073%" y="261" width="25.1895%" height="15" fill="rgb(209,217,16)" fg:x="5986" fg:w="2227"/><text x="67.9573%" y="271.50">colors`cosmic_text::shape::Shaping::run</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (12 samples, 0.14%)</title><rect x="92.7610%" y="245" width="0.1357%" height="15" fill="rgb(219,88,35)" fg:x="8201" fg:w="12"/><text x="93.0110%" y="255.50"></text></g><g><title>colors`unicode_segmentation::grapheme::GraphemeCursor::grapheme_category (2 samples, 0.02%)</title><rect x="92.8967%" y="261" width="0.0226%" height="15" fill="rgb(220,193,23)" fg:x="8213" fg:w="2"/><text x="93.1467%" y="271.50"></text></g><g><title>colors`unicode_segmentation::tables::grapheme::grapheme_category (1 samples, 0.01%)</title><rect x="92.9080%" y="245" width="0.0113%" height="15" fill="rgb(230,90,52)" fg:x="8214" fg:w="1"/><text x="93.1580%" y="255.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (2,254 samples, 25.49%)</title><rect x="67.4358%" y="293" width="25.4949%" height="15" fill="rgb(252,106,19)" fg:x="5962" fg:w="2254"/><text x="67.6858%" y="303.50">colors`cosmic_text::shape::ShapeSpan::bui..</text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (2,246 samples, 25.40%)</title><rect x="67.5263%" y="277" width="25.4044%" height="15" fill="rgb(206,74,20)" fg:x="5970" fg:w="2246"/><text x="67.7763%" y="287.50">colors`cosmic_text::shape::ShapeWord::bui..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="92.9194%" y="261" width="0.0113%" height="15" fill="rgb(230,138,44)" fg:x="8215" fg:w="1"/><text x="93.1694%" y="271.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.03%)</title><rect x="92.9646%" y="277" width="0.0339%" height="15" fill="rgb(235,182,43)" fg:x="8219" fg:w="3"/><text x="93.2146%" y="287.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="92.9759%" y="261" width="0.0226%" height="15" fill="rgb(242,16,51)" fg:x="8220" fg:w="2"/><text x="93.2259%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.01%)</title><rect x="92.9872%" y="245" width="0.0113%" height="15" fill="rgb(248,9,4)" fg:x="8221" fg:w="1"/><text x="93.2372%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="92.9985%" y="277" width="0.0226%" height="15" fill="rgb(210,31,22)" fg:x="8222" fg:w="2"/><text x="93.2485%" y="287.50"></text></g><g><title>colors`unicode_bidi::BidiInfo::new_with_data_source (14 samples, 0.16%)</title><rect x="92.9307%" y="293" width="0.1584%" height="15" fill="rgb(239,54,39)" fg:x="8216" fg:w="14"/><text x="93.1807%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (6 samples, 0.07%)</title><rect x="93.0212%" y="277" width="0.0679%" height="15" fill="rgb(230,99,41)" fg:x="8224" fg:w="6"/><text x="93.2712%" y="287.50"></text></g><g><title>colors`unicode_linebreak::linebreaks (1 samples, 0.01%)</title><rect x="93.0890%" y="293" width="0.0113%" height="15" fill="rgb(253,106,12)" fg:x="8230" fg:w="1"/><text x="93.3390%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="93.1003%" y="293" width="0.0226%" height="15" fill="rgb(213,46,41)" fg:x="8231" fg:w="2"/><text x="93.3503%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="93.1229%" y="293" width="0.0226%" height="15" fill="rgb(215,133,35)" fg:x="8233" fg:w="2"/><text x="93.3729%" y="303.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (2,285 samples, 25.85%)</title><rect x="67.3114%" y="309" width="25.8455%" height="15" fill="rgb(213,28,5)" fg:x="5951" fg:w="2285"/><text x="67.5614%" y="319.50">colors`cosmic_text::shape::ShapeLine::bui..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="93.1456%" y="293" width="0.0113%" height="15" fill="rgb(215,77,49)" fg:x="8235" fg:w="1"/><text x="93.3956%" y="303.50"></text></g><g><title>colors`unicode_bidi::BidiInfo::new_with_data_source (1 samples, 0.01%)</title><rect x="93.1569%" y="309" width="0.0113%" height="15" fill="rgb(248,100,22)" fg:x="8236" fg:w="1"/><text x="93.4069%" y="319.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (2,288 samples, 25.88%)</title><rect x="67.3114%" y="325" width="25.8794%" height="15" fill="rgb(208,67,9)" fg:x="5951" fg:w="2288"/><text x="67.5614%" y="335.50">colors`cosmic_text::buffer_line::BufferLi..</text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.02%)</title><rect x="93.1682%" y="309" width="0.0226%" height="15" fill="rgb(219,133,21)" fg:x="8237" fg:w="2"/><text x="93.4182%" y="319.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer (8 samples, 0.09%)</title><rect x="93.1908%" y="325" width="0.0905%" height="15" fill="rgb(246,46,29)" fg:x="8239" fg:w="8"/><text x="93.4408%" y="335.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer::_{{closure}} (2 samples, 0.02%)</title><rect x="93.2813%" y="325" width="0.0226%" height="15" fill="rgb(246,185,52)" fg:x="8247" fg:w="2"/><text x="93.5313%" y="335.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.01%)</title><rect x="93.3039%" y="309" width="0.0113%" height="15" fill="rgb(252,136,11)" fg:x="8249" fg:w="1"/><text x="93.5539%" y="319.50"></text></g><g><title>colors`&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="93.3039%" y="293" width="0.0113%" height="15" fill="rgb(219,138,53)" fg:x="8249" fg:w="1"/><text x="93.5539%" y="303.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.01%)</title><rect x="93.3152%" y="309" width="0.0113%" height="15" fill="rgb(211,51,23)" fg:x="8250" fg:w="1"/><text x="93.5652%" y="319.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="93.3152%" y="293" width="0.0113%" height="15" fill="rgb(247,221,28)" fg:x="8250" fg:w="1"/><text x="93.5652%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.01%)</title><rect x="93.3152%" y="277" width="0.0113%" height="15" fill="rgb(251,222,45)" fg:x="8250" fg:w="1"/><text x="93.5652%" y="287.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer::_{{closure}} (1 samples, 0.01%)</title><rect x="93.3265%" y="309" width="0.0113%" height="15" fill="rgb(217,162,53)" fg:x="8251" fg:w="1"/><text x="93.5765%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.03%)</title><rect x="93.3379%" y="309" width="0.0339%" height="15" fill="rgb(229,93,14)" fg:x="8252" fg:w="3"/><text x="93.5879%" y="319.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (2,307 samples, 26.09%)</title><rect x="67.3001%" y="341" width="26.0943%" height="15" fill="rgb(209,67,49)" fg:x="5950" fg:w="2307"/><text x="67.5501%" y="351.50">colors`cosmic_text::buffer_line::BufferLin..</text></g><g><title>colors`cosmic_text::shape::ShapeLine::layout_to_buffer (8 samples, 0.09%)</title><rect x="93.3039%" y="325" width="0.0905%" height="15" fill="rgb(213,87,29)" fg:x="8249" fg:w="8"/><text x="93.5539%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.02%)</title><rect x="93.3718%" y="309" width="0.0226%" height="15" fill="rgb(205,151,52)" fg:x="8255" fg:w="2"/><text x="93.6218%" y="319.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (2,309 samples, 26.12%)</title><rect x="67.2888%" y="357" width="26.1170%" height="15" fill="rgb(253,215,39)" fg:x="5949" fg:w="2309"/><text x="67.5388%" y="367.50">colors`cosmic_text::buffer::Buffer::shape_..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="93.3944%" y="341" width="0.0113%" height="15" fill="rgb(221,220,41)" fg:x="8257" fg:w="1"/><text x="93.6444%" y="351.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (1 samples, 0.01%)</title><rect x="93.4057%" y="357" width="0.0113%" height="15" fill="rgb(218,133,21)" fg:x="8258" fg:w="1"/><text x="93.6557%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.05%)</title><rect x="93.4170%" y="357" width="0.0452%" height="15" fill="rgb(221,193,43)" fg:x="8259" fg:w="4"/><text x="93.6670%" y="367.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (2,331 samples, 26.37%)</title><rect x="67.1078%" y="373" width="26.3658%" height="15" fill="rgb(240,128,52)" fg:x="5933" fg:w="2331"/><text x="67.3578%" y="383.50">colors`cosmic_text::buffer::Buffer::set_te..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="93.4623%" y="357" width="0.0113%" height="15" fill="rgb(253,114,12)" fg:x="8263" fg:w="1"/><text x="93.7123%" y="367.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (1 samples, 0.01%)</title><rect x="93.4736%" y="373" width="0.0113%" height="15" fill="rgb(215,223,47)" fg:x="8264" fg:w="1"/><text x="93.7236%" y="383.50"></text></g><g><title>colors`cosmic_text::layout::LayoutGlyph::physical (2 samples, 0.02%)</title><rect x="93.4849%" y="373" width="0.0226%" height="15" fill="rgb(248,225,23)" fg:x="8265" fg:w="2"/><text x="93.7349%" y="383.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (1 samples, 0.01%)</title><rect x="93.5188%" y="325" width="0.0113%" height="15" fill="rgb(250,108,0)" fg:x="8268" fg:w="1"/><text x="93.7688%" y="335.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="93.5867%" y="309" width="0.0113%" height="15" fill="rgb(228,208,7)" fg:x="8274" fg:w="1"/><text x="93.8367%" y="319.50"></text></g><g><title>colors`tiny_skia::pipeline::RasterPipelineBuilder::compile (17 samples, 0.19%)</title><rect x="93.5980%" y="309" width="0.1923%" height="15" fill="rgb(244,45,10)" fg:x="8275" fg:w="17"/><text x="93.8480%" y="319.50"></text></g><g><title>colors`tiny_skia::shaders::Shader::push_stages (1 samples, 0.01%)</title><rect x="93.7903%" y="309" width="0.0113%" height="15" fill="rgb(207,125,25)" fg:x="8292" fg:w="1"/><text x="94.0403%" y="319.50"></text></g><g><title>colors`tiny_skia::shaders::pattern::Pattern::push_stages (3 samples, 0.03%)</title><rect x="93.8016%" y="309" width="0.0339%" height="15" fill="rgb(210,195,18)" fg:x="8293" fg:w="3"/><text x="94.0516%" y="319.50"></text></g><g><title>colors`tiny_skia_path::transform::Transform::is_identity (3 samples, 0.03%)</title><rect x="93.8355%" y="309" width="0.0339%" height="15" fill="rgb(249,80,12)" fg:x="8296" fg:w="3"/><text x="94.0855%" y="319.50"></text></g><g><title>colors`tiny_skia::pipeline::blitter::RasterPipelineBlitter::new (36 samples, 0.41%)</title><rect x="93.5301%" y="325" width="0.4072%" height="15" fill="rgb(221,65,9)" fg:x="8269" fg:w="36"/><text x="93.7801%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.07%)</title><rect x="93.8695%" y="309" width="0.0679%" height="15" fill="rgb(235,49,36)" fg:x="8299" fg:w="6"/><text x="94.1195%" y="319.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::load_mask_u8 (1 samples, 0.01%)</title><rect x="93.9373%" y="293" width="0.0113%" height="15" fill="rgb(225,32,20)" fg:x="8305" fg:w="1"/><text x="94.1873%" y="303.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::seed_shader (11 samples, 0.12%)</title><rect x="93.9486%" y="293" width="0.1244%" height="15" fill="rgb(215,141,46)" fg:x="8306" fg:w="11"/><text x="94.1986%" y="303.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::source_over_rgba_tail (5 samples, 0.06%)</title><rect x="94.0731%" y="293" width="0.0566%" height="15" fill="rgb(250,160,47)" fg:x="8317" fg:w="5"/><text x="94.3231%" y="303.50"></text></g><g><title>colors`DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="94.1975%" y="277" width="0.0113%" height="15" fill="rgb(216,222,40)" fg:x="8328" fg:w="1"/><text x="94.4475%" y="287.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::gather (62 samples, 0.70%)</title><rect x="94.2088%" y="277" width="0.7013%" height="15" fill="rgb(234,217,39)" fg:x="8329" fg:w="62"/><text x="94.4588%" y="287.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::source_over_rgba (95 samples, 1.07%)</title><rect x="94.9101%" y="277" width="1.0745%" height="15" fill="rgb(207,178,40)" fg:x="8391" fg:w="95"/><text x="95.1601%" y="287.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::source_over_rgba_tail (63 samples, 0.71%)</title><rect x="95.9846%" y="277" width="0.7126%" height="15" fill="rgb(221,136,13)" fg:x="8486" fg:w="63"/><text x="96.2346%" y="287.50"></text></g><g><title>colors`tiny_skia::pipeline::highp::start (242 samples, 2.74%)</title><rect x="94.1296%" y="293" width="2.7372%" height="15" fill="rgb(249,199,10)" fg:x="8322" fg:w="242"/><text x="94.3796%" y="303.50">co..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.17%)</title><rect x="96.6972%" y="277" width="0.1697%" height="15" fill="rgb(249,222,13)" fg:x="8549" fg:w="15"/><text x="96.9472%" y="287.50"></text></g><g><title>colors`tiny_skia::scan::fill_rect (274 samples, 3.10%)</title><rect x="93.9373%" y="325" width="3.0992%" height="15" fill="rgb(244,185,38)" fg:x="8305" fg:w="274"/><text x="94.1873%" y="335.50">col..</text></g><g><title>colors`&lt;tiny_skia::pipeline::blitter::RasterPipelineBlitter as tiny_skia::blitter::Blitter&gt;::blit_rect (274 samples, 3.10%)</title><rect x="93.9373%" y="309" width="3.0992%" height="15" fill="rgb(236,202,9)" fg:x="8305" fg:w="274"/><text x="94.1873%" y="319.50">col..</text></g><g><title>colors`tiny_skia::pipeline::highp::transform (15 samples, 0.17%)</title><rect x="96.8669%" y="293" width="0.1697%" height="15" fill="rgb(250,229,37)" fg:x="8564" fg:w="15"/><text x="97.1169%" y="303.50"></text></g><g><title>colors`tiny_skia::shaders::pattern::Pattern::push_stages (1 samples, 0.01%)</title><rect x="97.0365%" y="325" width="0.0113%" height="15" fill="rgb(206,174,23)" fg:x="8579" fg:w="1"/><text x="97.2865%" y="335.50"></text></g><g><title>colors`tiny_skia_path::rect::IntRect::intersect (2 samples, 0.02%)</title><rect x="97.0478%" y="325" width="0.0226%" height="15" fill="rgb(211,33,43)" fg:x="8580" fg:w="2"/><text x="97.2978%" y="335.50"></text></g><g><title>colors`tiny_skia_path::rect::Rect::round (1 samples, 0.01%)</title><rect x="97.0705%" y="325" width="0.0113%" height="15" fill="rgb(245,58,50)" fg:x="8582" fg:w="1"/><text x="97.3205%" y="335.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::fill_rect (332 samples, 3.76%)</title><rect x="93.5188%" y="341" width="3.7552%" height="15" fill="rgb(244,68,36)" fg:x="8268" fg:w="332"/><text x="93.7688%" y="351.50">colo..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.19%)</title><rect x="97.0818%" y="325" width="0.1923%" height="15" fill="rgb(232,229,15)" fg:x="8583" fg:w="17"/><text x="97.3318%" y="335.50"></text></g><g><title>colors`tiny_skia_path::transform::Transform::is_identity (1 samples, 0.01%)</title><rect x="97.2741%" y="341" width="0.0113%" height="15" fill="rgb(254,30,23)" fg:x="8600" fg:w="1"/><text x="97.5241%" y="351.50"></text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::Pixmap&gt;::draw_pixmap (340 samples, 3.85%)</title><rect x="93.5075%" y="373" width="3.8457%" height="15" fill="rgb(235,160,14)" fg:x="8267" fg:w="340"/><text x="93.7575%" y="383.50">colo..</text></g><g><title>colors`tiny_skia::painter::_&lt;impl tiny_skia::pixmap::PixmapMut&gt;::draw_pixmap (340 samples, 3.85%)</title><rect x="93.5075%" y="357" width="3.8457%" height="15" fill="rgb(212,155,44)" fg:x="8267" fg:w="340"/><text x="93.7575%" y="367.50">colo..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.07%)</title><rect x="97.2854%" y="341" width="0.0679%" height="15" fill="rgb(226,2,50)" fg:x="8601" fg:w="6"/><text x="97.5354%" y="351.50"></text></g><g><title>colors`tiny_skia::pixmap::Pixmap::fill (7 samples, 0.08%)</title><rect x="97.3532%" y="373" width="0.0792%" height="15" fill="rgb(234,177,6)" fg:x="8607" fg:w="7"/><text x="97.6032%" y="383.50"></text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::draw_cell (8,606 samples, 97.34%)</title><rect x="0.1018%" y="389" width="97.3419%" height="15" fill="rgb(217,24,9)" fg:x="9" fg:w="8606"/><text x="0.3518%" y="399.50">colors`soft_ratatui::soft_backend::SoftBackend::draw_cell</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="97.4324%" y="373" width="0.0113%" height="15" fill="rgb(220,13,46)" fg:x="8614" fg:w="1"/><text x="97.6824%" y="383.50"></text></g><g><title>colors`std::fs::write::inner (2 samples, 0.02%)</title><rect x="97.4437%" y="389" width="0.0226%" height="15" fill="rgb(239,221,27)" fg:x="8615" fg:w="2"/><text x="97.6937%" y="399.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (2 samples, 0.02%)</title><rect x="97.4437%" y="373" width="0.0226%" height="15" fill="rgb(222,198,25)" fg:x="8615" fg:w="2"/><text x="97.6937%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.02%)</title><rect x="97.4437%" y="357" width="0.0226%" height="15" fill="rgb(211,99,13)" fg:x="8615" fg:w="2"/><text x="97.6937%" y="367.50"></text></g><g><title>colors`crc32fast::Hasher::update (3 samples, 0.03%)</title><rect x="97.7944%" y="357" width="0.0339%" height="15" fill="rgb(232,111,31)" fg:x="8646" fg:w="3"/><text x="98.0444%" y="367.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (18 samples, 0.20%)</title><rect x="98.2355%" y="341" width="0.2036%" height="15" fill="rgb(245,82,37)" fg:x="8685" fg:w="18"/><text x="98.4855%" y="351.50"></text></g><g><title>colors`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.01%)</title><rect x="98.4278%" y="325" width="0.0113%" height="15" fill="rgb(227,149,46)" fg:x="8702" fg:w="1"/><text x="98.6778%" y="335.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="98.4278%" y="309" width="0.0113%" height="15" fill="rgb(218,36,50)" fg:x="8702" fg:w="1"/><text x="98.6778%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.01%)</title><rect x="98.4278%" y="293" width="0.0113%" height="15" fill="rgb(226,80,48)" fg:x="8702" fg:w="1"/><text x="98.6778%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.01%)</title><rect x="98.4278%" y="277" width="0.0113%" height="15" fill="rgb(238,224,15)" fg:x="8702" fg:w="1"/><text x="98.6778%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="98.4278%" y="261" width="0.0113%" height="15" fill="rgb(241,136,10)" fg:x="8702" fg:w="1"/><text x="98.6778%" y="271.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_data (133 samples, 1.50%)</title><rect x="97.8283%" y="357" width="1.5044%" height="15" fill="rgb(208,32,45)" fg:x="8649" fg:w="133"/><text x="98.0783%" y="367.50"></text></g><g><title>colors`simd_adler32::imp::scalar::update (79 samples, 0.89%)</title><rect x="98.4391%" y="341" width="0.8936%" height="15" fill="rgb(207,135,9)" fg:x="8703" fg:w="79"/><text x="98.6891%" y="351.50"></text></g><g><title>colors`fdeflate::compress::Compressor&lt;W&gt;::write_run (8 samples, 0.09%)</title><rect x="99.3327%" y="357" width="0.0905%" height="15" fill="rgb(206,86,44)" fg:x="8782" fg:w="8"/><text x="99.5827%" y="367.50"></text></g><g><title>colors`png::filter::filter (1 samples, 0.01%)</title><rect x="99.4231%" y="357" width="0.0113%" height="15" fill="rgb(245,177,15)" fg:x="8790" fg:w="1"/><text x="99.6731%" y="367.50"></text></g><g><title>colors`png::filter::filter_internal (1 samples, 0.01%)</title><rect x="99.4231%" y="341" width="0.0113%" height="15" fill="rgb(206,64,50)" fg:x="8790" fg:w="1"/><text x="99.6731%" y="351.50"></text></g><g><title>colors`png::encoder::Writer&lt;W&gt;::write_image_data (146 samples, 1.65%)</title><rect x="97.7944%" y="373" width="1.6514%" height="15" fill="rgb(234,36,40)" fg:x="8646" fg:w="146"/><text x="98.0444%" y="383.50"></text></g><g><title>colors`png::filter::filter_internal (1 samples, 0.01%)</title><rect x="99.4345%" y="357" width="0.0113%" height="15" fill="rgb(213,64,8)" fg:x="8791" fg:w="1"/><text x="99.6845%" y="367.50"></text></g><g><title>colors`tiny_skia::pixmap::PixmapRef::encode_png (179 samples, 2.02%)</title><rect x="97.4663%" y="389" width="2.0247%" height="15" fill="rgb(210,75,36)" fg:x="8617" fg:w="179"/><text x="97.7163%" y="399.50">c..</text></g><g><title>libsystem_malloc.dylib`free_medium (4 samples, 0.05%)</title><rect x="99.4458%" y="373" width="0.0452%" height="15" fill="rgb(229,88,21)" fg:x="8792" fg:w="4"/><text x="99.6958%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.05%)</title><rect x="99.4458%" y="357" width="0.0452%" height="15" fill="rgb(252,204,47)" fg:x="8792" fg:w="4"/><text x="99.6958%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`close (4 samples, 0.05%)</title><rect x="99.4910%" y="389" width="0.0452%" height="15" fill="rgb(208,77,27)" fg:x="8796" fg:w="4"/><text x="99.7410%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.02%)</title><rect x="99.5363%" y="389" width="0.0226%" height="15" fill="rgb(221,76,26)" fg:x="8800" fg:w="2"/><text x="99.7863%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.02%)</title><rect x="99.5589%" y="389" width="0.0226%" height="15" fill="rgb(225,139,18)" fg:x="8802" fg:w="2"/><text x="99.8089%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.02%)</title><rect x="99.5589%" y="373" width="0.0226%" height="15" fill="rgb(230,137,11)" fg:x="8802" fg:w="2"/><text x="99.8089%" y="383.50"></text></g><g><title>colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw (8,817 samples, 99.73%)</title><rect x="0.0339%" y="405" width="99.7285%" height="15" fill="rgb(212,28,1)" fg:x="3" fg:w="8817"/><text x="0.2839%" y="415.50">colors`&lt;soft_ratatui::soft_backend::SoftBackend as ratatui::backend::Backend&gt;::draw</text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.18%)</title><rect x="99.5815%" y="389" width="0.1810%" height="15" fill="rgb(248,164,17)" fg:x="8804" fg:w="16"/><text x="99.8315%" y="399.50"></text></g><g><title>colors`ratatui::buffer::buffer::Buffer::diff (3 samples, 0.03%)</title><rect x="99.7625%" y="405" width="0.0339%" height="15" fill="rgb(222,171,42)" fg:x="8820" fg:w="3"/><text x="100.0125%" y="415.50"></text></g><g><title>colors`core::iter::traits::double_ended::DoubleEndedIterator::rfold (2 samples, 0.02%)</title><rect x="99.7738%" y="389" width="0.0226%" height="15" fill="rgb(243,84,45)" fg:x="8821" fg:w="2"/><text x="100.0238%" y="399.50"></text></g><g><title>colors`unicode_width::tables::lookup_width (1 samples, 0.01%)</title><rect x="99.7851%" y="373" width="0.0113%" height="15" fill="rgb(252,49,23)" fg:x="8822" fg:w="1"/><text x="100.0351%" y="383.50"></text></g><g><title>colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw (8,824 samples, 99.81%)</title><rect x="0.0000%" y="421" width="99.8077%" height="15" fill="rgb(215,19,7)" fg:x="0" fg:w="8824"/><text x="0.2500%" y="431.50">colors`ratatui::terminal::terminal::Terminal&lt;B&gt;::try_draw</text></g><g><title>colors`ratatui::buffer::cell::Cell::set_char (1 samples, 0.01%)</title><rect x="99.7964%" y="405" width="0.0113%" height="15" fill="rgb(238,81,41)" fg:x="8823" fg:w="1"/><text x="100.0464%" y="415.50"></text></g><g><title>colors`&lt;char as unicode_script::UnicodeScript&gt;::script (1 samples, 0.01%)</title><rect x="99.8077%" y="293" width="0.0113%" height="15" fill="rgb(210,199,37)" fg:x="8824" fg:w="1"/><text x="100.0577%" y="303.50"></text></g><g><title>colors`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.01%)</title><rect x="99.8190%" y="181" width="0.0113%" height="15" fill="rgb(244,192,49)" fg:x="8825" fg:w="1"/><text x="100.0690%" y="191.50"></text></g><g><title>colors`&lt;ttf_parser::ggg::Coverage as rustybuzz::hb::ot_layout_common::CoverageExt&gt;::collect (1 samples, 0.01%)</title><rect x="99.8190%" y="165" width="0.0113%" height="15" fill="rgb(226,211,11)" fg:x="8825" fg:w="1"/><text x="100.0690%" y="175.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.01%)</title><rect x="99.8190%" y="149" width="0.0113%" height="15" fill="rgb(236,162,54)" fg:x="8825" fg:w="1"/><text x="100.0690%" y="159.50"></text></g><g><title>colors`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="99.8190%" y="133" width="0.0113%" height="15" fill="rgb(220,229,9)" fg:x="8825" fg:w="1"/><text x="100.0690%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.01%)</title><rect x="99.8190%" y="117" width="0.0113%" height="15" fill="rgb(250,87,22)" fg:x="8825" fg:w="1"/><text x="100.0690%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.01%)</title><rect x="99.8190%" y="101" width="0.0113%" height="15" fill="rgb(239,43,17)" fg:x="8825" fg:w="1"/><text x="100.0690%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.01%)</title><rect x="99.8190%" y="85" width="0.0113%" height="15" fill="rgb(231,177,25)" fg:x="8825" fg:w="1"/><text x="100.0690%" y="95.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::set_text (3 samples, 0.03%)</title><rect x="99.8077%" y="405" width="0.0339%" height="15" fill="rgb(219,179,1)" fg:x="8824" fg:w="3"/><text x="100.0577%" y="415.50"></text></g><g><title>colors`cosmic_text::buffer::Buffer::shape_until_scroll (3 samples, 0.03%)</title><rect x="99.8077%" y="389" width="0.0339%" height="15" fill="rgb(238,219,53)" fg:x="8824" fg:w="3"/><text x="100.0577%" y="399.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::layout (3 samples, 0.03%)</title><rect x="99.8077%" y="373" width="0.0339%" height="15" fill="rgb(232,167,36)" fg:x="8824" fg:w="3"/><text x="100.0577%" y="383.50"></text></g><g><title>colors`cosmic_text::buffer_line::BufferLine::shape (3 samples, 0.03%)</title><rect x="99.8077%" y="357" width="0.0339%" height="15" fill="rgb(244,19,51)" fg:x="8824" fg:w="3"/><text x="100.0577%" y="367.50"></text></g><g><title>colors`cosmic_text::shape::ShapeLine::build (3 samples, 0.03%)</title><rect x="99.8077%" y="341" width="0.0339%" height="15" fill="rgb(224,6,22)" fg:x="8824" fg:w="3"/><text x="100.0577%" y="351.50"></text></g><g><title>colors`cosmic_text::shape::ShapeSpan::build (3 samples, 0.03%)</title><rect x="99.8077%" y="325" width="0.0339%" height="15" fill="rgb(224,145,5)" fg:x="8824" fg:w="3"/><text x="100.0577%" y="335.50"></text></g><g><title>colors`cosmic_text::shape::ShapeWord::build (3 samples, 0.03%)</title><rect x="99.8077%" y="309" width="0.0339%" height="15" fill="rgb(234,130,49)" fg:x="8824" fg:w="3"/><text x="100.0577%" y="319.50"></text></g><g><title>colors`cosmic_text::shape::Shaping::run (2 samples, 0.02%)</title><rect x="99.8190%" y="293" width="0.0226%" height="15" fill="rgb(254,6,2)" fg:x="8825" fg:w="2"/><text x="100.0690%" y="303.50"></text></g><g><title>colors`&lt;cosmic_text::font::fallback::FontFallbackIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="99.8190%" y="277" width="0.0226%" height="15" fill="rgb(208,96,46)" fg:x="8825" fg:w="2"/><text x="100.0690%" y="287.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_font (2 samples, 0.02%)</title><rect x="99.8190%" y="261" width="0.0226%" height="15" fill="rgb(239,3,39)" fg:x="8825" fg:w="2"/><text x="100.0690%" y="271.50"></text></g><g><title>colors`cosmic_text::font::Font::new (2 samples, 0.02%)</title><rect x="99.8190%" y="245" width="0.0226%" height="15" fill="rgb(233,210,1)" fg:x="8825" fg:w="2"/><text x="100.0690%" y="255.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::from_slice (2 samples, 0.02%)</title><rect x="99.8190%" y="229" width="0.0226%" height="15" fill="rgb(244,137,37)" fg:x="8825" fg:w="2"/><text x="100.0690%" y="239.50"></text></g><g><title>colors`rustybuzz::hb::face::hb_font_t::from_face (2 samples, 0.02%)</title><rect x="99.8190%" y="213" width="0.0226%" height="15" fill="rgb(240,136,2)" fg:x="8825" fg:w="2"/><text x="100.0690%" y="223.50"></text></g><g><title>colors`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="99.8190%" y="197" width="0.0226%" height="15" fill="rgb(239,18,37)" fg:x="8825" fg:w="2"/><text x="100.0690%" y="207.50"></text></g><g><title>colors`rustybuzz::hb::glyph_set::GlyphSetBuilder::finish (1 samples, 0.01%)</title><rect x="99.8303%" y="181" width="0.0113%" height="15" fill="rgb(218,185,22)" fg:x="8826" fg:w="1"/><text x="100.0803%" y="191.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::get_locale (1 samples, 0.01%)</title><rect x="99.8416%" y="389" width="0.0113%" height="15" fill="rgb(225,218,4)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="399.50"></text></g><g><title>colors`sys_locale::get_locale (1 samples, 0.01%)</title><rect x="99.8416%" y="373" width="0.0113%" height="15" fill="rgb(230,182,32)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="383.50"></text></g><g><title>CoreFoundation`CFLocaleCopyPreferredLanguages (1 samples, 0.01%)</title><rect x="99.8416%" y="357" width="0.0113%" height="15" fill="rgb(242,56,43)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="367.50"></text></g><g><title>Foundation`@objc static NSLocale._preferredLanguagesForCurrentUser(_:) (1 samples, 0.01%)</title><rect x="99.8416%" y="341" width="0.0113%" height="15" fill="rgb(233,99,24)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="351.50"></text></g><g><title>Foundation`LocaleCache.preferredLanguages(forCurrentUser:) (1 samples, 0.01%)</title><rect x="99.8416%" y="325" width="0.0113%" height="15" fill="rgb(234,209,42)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="335.50"></text></g><g><title>libswiftCore.dylib`swift_dynamicCast (1 samples, 0.01%)</title><rect x="99.8416%" y="309" width="0.0113%" height="15" fill="rgb(227,7,12)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="319.50"></text></g><g><title>libswiftCore.dylib`tryCast(swift::OpaqueValue*, swift::TargetMetadata&lt;swift::InProcess&gt; const*, swift::OpaqueValue*, swift::TargetMetadata&lt;swift::InProcess&gt; const*, swift::TargetMetadata&lt;swift::InProcess&gt; const*&amp;, swift::TargetMetadata (1 samples, 0.01%)</title><rect x="99.8416%" y="293" width="0.0113%" height="15" fill="rgb(245,203,43)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="303.50"></text></g><g><title>libswiftCore.dylib`tryCast(swift::OpaqueValue*, swift::TargetMetadata&lt;swift::InProcess&gt; const*, swift::OpaqueValue*, swift::TargetMetadata&lt;swift::InProcess&gt; const*, swift::TargetMetadata&lt;swift::InProcess&gt; const*&amp;, swift::TargetMetadata (1 samples, 0.01%)</title><rect x="99.8416%" y="277" width="0.0113%" height="15" fill="rgb(238,205,33)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="287.50"></text></g><g><title>libswiftCore.dylib`_tryCastFromClassToObjCBridgeable(swift::OpaqueValue*, swift::TargetMetadata&lt;swift::InProcess&gt; const*, swift::OpaqueValue*, swift::TargetMetadata&lt;swift::InProcess&gt; const*, void*, swift::TargetMetadata&lt;swift::InProcess&gt; const*&amp;, swift::TargetMetadata&lt;swift::InProcess&gt; const*&amp;, bool, bool, _ObjectiveCBridgeableWitnessTable const*, swift::TargetMetadata (1 samples, 0.01%)</title><rect x="99.8416%" y="261" width="0.0113%" height="15" fill="rgb(231,56,7)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="271.50"></text></g><g><title>Foundation`static Array._conditionallyBridgeFromObjectiveC(_:result:) (1 samples, 0.01%)</title><rect x="99.8416%" y="245" width="0.0113%" height="15" fill="rgb(244,186,29)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="255.50"></text></g><g><title>Foundation`specialized _arrayConditionalCast&lt;A, B&gt;(_:) (1 samples, 0.01%)</title><rect x="99.8416%" y="229" width="0.0113%" height="15" fill="rgb(234,111,31)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="239.50"></text></g><g><title>libswiftCore.dylib`swift_dynamicCast (1 samples, 0.01%)</title><rect x="99.8416%" y="213" width="0.0113%" height="15" fill="rgb(241,149,10)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="223.50"></text></g><g><title>libswiftCore.dylib`tryCast(swift::OpaqueValue*, swift::TargetMetadata&lt;swift::InProcess&gt; const*, swift::OpaqueValue*, swift::TargetMetadata&lt;swift::InProcess&gt; const*, swift::TargetMetadata&lt;swift::InProcess&gt; const*&amp;, swift::TargetMetadata (1 samples, 0.01%)</title><rect x="99.8416%" y="197" width="0.0113%" height="15" fill="rgb(249,206,44)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="207.50"></text></g><g><title>libswiftCore.dylib`tryCast(swift::OpaqueValue*, swift::TargetMetadata&lt;swift::InProcess&gt; const*, swift::OpaqueValue*, swift::TargetMetadata&lt;swift::InProcess&gt; const*, swift::TargetMetadata&lt;swift::InProcess&gt; const*&amp;, swift::TargetMetadata (1 samples, 0.01%)</title><rect x="99.8416%" y="181" width="0.0113%" height="15" fill="rgb(251,153,30)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="191.50"></text></g><g><title>libswiftCore.dylib`tryCastToString(swift::OpaqueValue*, swift::TargetMetadata&lt;swift::InProcess&gt; const*, swift::OpaqueValue*, swift::TargetMetadata&lt;swift::InProcess&gt; const*, swift::TargetMetadata&lt;swift::InProcess&gt; const*&amp;, swift::TargetMetadata (1 samples, 0.01%)</title><rect x="99.8416%" y="165" width="0.0113%" height="15" fill="rgb(239,152,38)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="175.50"></text></g><g><title>libswiftCore.dylib`ObjCBridgeMemo::tryBridge(swift::OpaqueValue*, swift::TargetMetadata&lt;swift::InProcess&gt; const*, swift::OpaqueValue*, swift::TargetMetadata&lt;swift::InProcess&gt; const*, swift::TargetMetadata&lt;swift::InProcess&gt; const*&amp;, swift::TargetMetadata (1 samples, 0.01%)</title><rect x="99.8416%" y="149" width="0.0113%" height="15" fill="rgb(249,139,47)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="159.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.01%)</title><rect x="99.8416%" y="133" width="0.0113%" height="15" fill="rgb(244,64,35)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="143.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.01%)</title><rect x="99.8416%" y="117" width="0.0113%" height="15" fill="rgb(216,46,15)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="127.50"></text></g><g><title>libswiftCore.dylib`ObjCBridgeMemo::tryBridge(swift::OpaqueValue*, swift::TargetMetadata&lt;swift::InProcess&gt; const*, swift::OpaqueValue*, swift::TargetMetadata&lt;swift::InProcess&gt; const*, swift::TargetMetadata&lt;swift::InProcess&gt; const*&amp;, swift::TargetMetadata&lt;swift::InProcess&gt; const*&amp;, bool, bool)::&apos;lambda&apos;(void*)::__invoke (1 samples, 0.01%)</title><rect x="99.8416%" y="101" width="0.0113%" height="15" fill="rgb(250,74,19)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="111.50"></text></g><g><title>libswiftCore.dylib`swift_conformsToProtocolCommon (1 samples, 0.01%)</title><rect x="99.8416%" y="85" width="0.0113%" height="15" fill="rgb(249,42,33)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="95.50"></text></g><g><title>libswiftCore.dylib`swift_conformsToProtocolMaybeInstantiateSuperclasses(swift::TargetMetadata&lt;swift::InProcess&gt; const*, swift::TargetProtocolDescriptor (1 samples, 0.01%)</title><rect x="99.8416%" y="69" width="0.0113%" height="15" fill="rgb(242,149,17)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="79.50"></text></g><g><title>libswiftCore.dylib`swift::TargetProtocolConformanceDescriptor&lt;swift::InProcess&gt;::getWitnessTable(swift::TargetMetadata (1 samples, 0.01%)</title><rect x="99.8416%" y="53" width="0.0113%" height="15" fill="rgb(244,29,21)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="63.50"></text></g><g><title>libswiftCore.dylib`swift::_getWitnessTable(swift::TargetProtocolConformanceDescriptor&lt;swift::InProcess&gt; const*, swift::TargetMetadata (1 samples, 0.01%)</title><rect x="99.8416%" y="37" width="0.0113%" height="15" fill="rgb(220,130,37)" fg:x="8827" fg:w="1"/><text x="100.0916%" y="47.50"></text></g><g><title>colors`&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="99.8530%" y="357" width="0.0113%" height="15" fill="rgb(211,67,2)" fg:x="8828" fg:w="1"/><text x="100.1030%" y="367.50"></text></g><g><title>colors`&lt;std::sys::pal::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="99.8530%" y="341" width="0.0113%" height="15" fill="rgb(235,68,52)" fg:x="8828" fg:w="1"/><text x="100.1030%" y="351.50"></text></g><g><title>libsystem_c.dylib`readdir_r (1 samples, 0.01%)</title><rect x="99.8530%" y="325" width="0.0113%" height="15" fill="rgb(246,142,3)" fg:x="8828" fg:w="1"/><text x="100.1030%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__getdirentries64 (1 samples, 0.01%)</title><rect x="99.8530%" y="309" width="0.0113%" height="15" fill="rgb(241,25,7)" fg:x="8828" fg:w="1"/><text x="100.1030%" y="319.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (3 samples, 0.03%)</title><rect x="99.8643%" y="357" width="0.0339%" height="15" fill="rgb(242,119,39)" fg:x="8829" fg:w="3"/><text x="100.1143%" y="367.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (3 samples, 0.03%)</title><rect x="99.8643%" y="341" width="0.0339%" height="15" fill="rgb(241,98,45)" fg:x="8829" fg:w="3"/><text x="100.1143%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__open (3 samples, 0.03%)</title><rect x="99.8643%" y="325" width="0.0339%" height="15" fill="rgb(254,28,30)" fg:x="8829" fg:w="3"/><text x="100.1143%" y="335.50"></text></g><g><title>colors`fontdb::parse_face_info (1 samples, 0.01%)</title><rect x="99.9095%" y="325" width="0.0113%" height="15" fill="rgb(241,142,54)" fg:x="8833" fg:w="1"/><text x="100.1595%" y="335.50"></text></g><g><title>colors`fontdb::collect_families (1 samples, 0.01%)</title><rect x="99.9095%" y="309" width="0.0113%" height="15" fill="rgb(222,85,15)" fg:x="8833" fg:w="1"/><text x="100.1595%" y="319.50"></text></g><g><title>colors`fontdb::name_to_unicode (1 samples, 0.01%)</title><rect x="99.9095%" y="293" width="0.0113%" height="15" fill="rgb(210,85,47)" fg:x="8833" fg:w="1"/><text x="100.1595%" y="303.50"></text></g><g><title>colors`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.01%)</title><rect x="99.9095%" y="277" width="0.0113%" height="15" fill="rgb(224,206,25)" fg:x="8833" fg:w="1"/><text x="100.1595%" y="287.50"></text></g><g><title>colors`fontdb::Database::load_font_file_impl (5 samples, 0.06%)</title><rect x="99.8982%" y="341" width="0.0566%" height="15" fill="rgb(243,201,19)" fg:x="8832" fg:w="5"/><text x="100.1482%" y="351.50"></text></g><g><title>colors`std::fs::OpenOptions::_open (3 samples, 0.03%)</title><rect x="99.9208%" y="325" width="0.0339%" height="15" fill="rgb(236,59,4)" fg:x="8834" fg:w="3"/><text x="100.1708%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__open (3 samples, 0.03%)</title><rect x="99.9208%" y="309" width="0.0339%" height="15" fill="rgb(254,179,45)" fg:x="8834" fg:w="3"/><text x="100.1708%" y="319.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (7 samples, 0.08%)</title><rect x="99.8982%" y="357" width="0.0792%" height="15" fill="rgb(226,14,10)" fg:x="8832" fg:w="7"/><text x="100.1482%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`stat (2 samples, 0.02%)</title><rect x="99.9548%" y="341" width="0.0226%" height="15" fill="rgb(244,27,41)" fg:x="8837" fg:w="2"/><text x="100.2048%" y="351.50"></text></g><g><title>all (8,841 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(235,35,32)" fg:x="0" fg:w="8841"/><text x="0.2500%" y="543.50"></text></g><g><title>dyld`start (8,841 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(218,68,31)" fg:x="0" fg:w="8841"/><text x="0.2500%" y="527.50">dyld`start</text></g><g><title>colors`main (8,841 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(207,120,37)" fg:x="0" fg:w="8841"/><text x="0.2500%" y="511.50">colors`main</text></g><g><title>colors`std::rt::lang_start_internal (8,841 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(227,98,0)" fg:x="0" fg:w="8841"/><text x="0.2500%" y="495.50">colors`std::rt::lang_start_internal</text></g><g><title>colors`std::rt::lang_start::_{{closure}} (8,841 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(207,7,3)" fg:x="0" fg:w="8841"/><text x="0.2500%" y="479.50">colors`std::rt::lang_start::_{{closure}}</text></g><g><title>colors`std::sys::backtrace::__rust_begin_short_backtrace (8,841 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(206,98,19)" fg:x="0" fg:w="8841"/><text x="0.2500%" y="463.50">colors`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>colors`colors::main (8,841 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(217,5,26)" fg:x="0" fg:w="8841"/><text x="0.2500%" y="447.50">colors`colors::main</text></g><g><title>colors`soft_ratatui::soft_backend::SoftBackend::new (17 samples, 0.19%)</title><rect x="99.8077%" y="421" width="0.1923%" height="15" fill="rgb(235,190,38)" fg:x="8824" fg:w="17"/><text x="100.0577%" y="431.50"></text></g><g><title>colors`cosmic_text::font::system::FontSystem::new (14 samples, 0.16%)</title><rect x="99.8416%" y="405" width="0.1584%" height="15" fill="rgb(247,86,24)" fg:x="8827" fg:w="14"/><text x="100.0916%" y="415.50"></text></g><g><title>colors`fontdb::Database::load_system_fonts (13 samples, 0.15%)</title><rect x="99.8530%" y="389" width="0.1470%" height="15" fill="rgb(205,101,16)" fg:x="8828" fg:w="13"/><text x="100.1030%" y="399.50"></text></g><g><title>colors`fontdb::Database::load_fonts_dir_impl (13 samples, 0.15%)</title><rect x="99.8530%" y="373" width="0.1470%" height="15" fill="rgb(246,168,33)" fg:x="8828" fg:w="13"/><text x="100.1030%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`stat (2 samples, 0.02%)</title><rect x="99.9774%" y="357" width="0.0226%" height="15" fill="rgb(231,114,1)" fg:x="8839" fg:w="2"/><text x="100.2274%" y="367.50"></text></g></svg></svg>